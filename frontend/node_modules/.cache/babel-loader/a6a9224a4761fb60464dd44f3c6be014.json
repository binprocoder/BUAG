{"ast":null,"code":"'use strict';\n\nmodule.exports = Classifiers;\n\nconst isArray = require('lodash/isArray');\n\nconst isString = require('lodash/isString');\n\nconst isInteger = require('lodash/isInteger');\n\nconst isPlainObject = require('lodash/isPlainObject');\n\nconst Models = require('./models');\n\nconst request = require('./request').request;\n\nconst MonkeyLearnError = require('./monkeylearn-error');\n\nfunction Classifiers(ml) {\n  Models.call(this, ml, `${ml.settings.base_url}classifiers/`);\n  this.tags = new Tags(this);\n}\n\nClassifiers.prototype = Object.create(Models.prototype);\nClassifiers.prototype.constructor = Classifiers;\nClassifiers.prototype.classify = Classifiers.prototype.run; // classifier detail is handled by Models\n// list classifiers is handled by Models\n\nClassifiers.prototype.create = function (params) {\n  return new Promise((resolve, reject) => {\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the creation parameters is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}`,\n    method: 'POST',\n    body: params\n  }));\n};\n\nClassifiers.prototype.edit = function (model_id, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the edit parameters is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}${model_id}/`,\n    method: 'PATCH',\n    body: params\n  }));\n};\n\nClassifiers.prototype.delete = function (model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}${model_id}/`,\n    method: 'DELETE'\n  }));\n};\n\nClassifiers.prototype.deploy = function (model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}${model_id}/deploy/`,\n    method: 'POST'\n  }));\n};\n\nClassifiers.prototype.train = function (model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}${model_id}/train/`,\n    method: 'POST'\n  }));\n};\n\nClassifiers.prototype.upload_data = function (model_id, data) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    if (!isArray(data)) {\n      throw new MonkeyLearnError('', null, 'A data array is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}${model_id}/data/`,\n    method: 'POST',\n    body: {\n      'data': data\n    }\n  }));\n};\n\nfunction Tags(classifiers) {\n  this.ml = classifiers.ml;\n  this.classifiers = classifiers;\n}\n\nTags.prototype.detail = function (model_id, tag_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    if (!isString(tag_id) && !isInteger(tag_id)) {\n      throw new MonkeyLearnError('', null, 'A tag_id string or integer is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.classifiers.base_url}${model_id}/tags/${tag_id}/`,\n    method: 'GET'\n  }));\n};\n\nTags.prototype.create = function (model_id, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the creation parameters is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.classifiers.base_url}${model_id}/tags/`,\n    method: 'POST',\n    body: params\n  }));\n};\n\nTags.prototype.edit = function (model_id, tag_id, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    if (!isString(tag_id) && !isInteger(tag_id)) {\n      throw new MonkeyLearnError('', null, 'A tag_id string or integer is required.');\n    }\n\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the edit parameters is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.classifiers.base_url}${model_id}/tags/${tag_id}/`,\n    method: 'PATCH',\n    body: params\n  }));\n};\n\nTags.prototype.delete = function (model_id, tag_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    if (!isString(tag_id) && !isInteger(tag_id)) {\n      throw new MonkeyLearnError('', null, 'A tag_id string or integer is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.classifiers.base_url}${model_id}/tags/${tag_id}/`,\n    method: 'DELETE'\n  }));\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/BUAG-tienPush/frontend/node_modules/monkeylearn/lib/classifiers.js"],"names":["module","exports","Classifiers","isArray","require","isString","isInteger","isPlainObject","Models","request","MonkeyLearnError","ml","call","settings","base_url","tags","Tags","prototype","Object","create","constructor","classify","run","params","Promise","resolve","reject","then","_","url","method","body","edit","model_id","delete","deploy","train","upload_data","data","classifiers","detail","tag_id"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = Classifiers;\n\nconst isArray = require('lodash/isArray');\nconst isString = require('lodash/isString');\nconst isInteger = require('lodash/isInteger');\nconst isPlainObject = require('lodash/isPlainObject');\n\nconst Models = require('./models');\nconst request = require('./request').request;\nconst MonkeyLearnError = require('./monkeylearn-error');\n\n\nfunction Classifiers(ml) {\n  Models.call(this, ml, `${ml.settings.base_url}classifiers/`)\n  this.tags = new Tags(this);\n}\n\nClassifiers.prototype = Object.create(Models.prototype);\nClassifiers.prototype.constructor = Classifiers;\n\nClassifiers.prototype.classify = Classifiers.prototype.run;\n\n// classifier detail is handled by Models\n\n// list classifiers is handled by Models\n\nClassifiers.prototype.create = function(params) {\n  return new Promise((resolve, reject) => {\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the creation parameters is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}`,\n      method: 'POST',\n      body: params\n    })\n  )\n}\n\nClassifiers.prototype.edit = function(model_id, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the edit parameters is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}${model_id}/`,\n      method: 'PATCH',\n      body: params\n    })\n  )\n}\n\nClassifiers.prototype.delete = function(model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}${model_id}/`,\n      method: 'DELETE',\n    })\n  )\n};\n\nClassifiers.prototype.deploy = function(model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}${model_id}/deploy/`,\n      method: 'POST',\n    })\n  )\n};\n\nClassifiers.prototype.train = function(model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}${model_id}/train/`,\n      method: 'POST',\n    })\n  )\n};\n\nClassifiers.prototype.upload_data = function(model_id, data) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    if (!isArray(data)){\n      throw new MonkeyLearnError('', null, 'A data array is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}${model_id}/data/`,\n      method: 'POST',\n      body: {'data': data}\n    })\n  )\n};\n\n\n\nfunction Tags(classifiers) {\n  this.ml = classifiers.ml;\n  this.classifiers = classifiers;\n}\n\nTags.prototype.detail = function(model_id, tag_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    if (!isString(tag_id) && !isInteger(tag_id)) {\n      throw new MonkeyLearnError('', null, 'A tag_id string or integer is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.classifiers.base_url}${model_id}/tags/${tag_id}/`,\n      method: 'GET',\n    })\n  )\n};\n\nTags.prototype.create = function(model_id, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the creation parameters is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.classifiers.base_url}${model_id}/tags/`,\n      method: 'POST',\n      body: params\n    })\n  )\n}\n\nTags.prototype.edit = function(model_id, tag_id, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    if (!isString(tag_id) && !isInteger(tag_id)) {\n      throw new MonkeyLearnError('', null, 'A tag_id string or integer is required.');\n    }\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'An object containing the edit parameters is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.classifiers.base_url}${model_id}/tags/${tag_id}/`,\n      method: 'PATCH',\n      body: params\n    })\n  )\n}\n\nTags.prototype.delete = function(model_id, tag_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    if (!isString(tag_id) && !isInteger(tag_id)) {\n      throw new MonkeyLearnError('', null, 'A tag_id string or integer is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.classifiers.base_url}${model_id}/tags/${tag_id}/`,\n      method: 'DELETE'\n    })\n  )\n}\n"]},"metadata":{},"sourceType":"script"}