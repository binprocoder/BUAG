{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\nexport var InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\nexport var TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nexport function taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMA,SAAS,GAAG;AACvB;AACAC,eAAa,EAAE;AAFQ,CAAlB;AAUP,OAAO,IAAMC,iBAAiB,GAAG;AAC/BC,SAAO,EAAE,SADsB;AAE/BC,SAAO,EAAE,SAFsB;AAG/BC,QAAM,EAAE,QAHuB;AAI/BC,SAAO,EAAE,SAJsB;AAK/BC,WAAS,EAAE,WALoB;AAM/BC,UAAQ,EAAE,UANqB;AAO/BC,OAAK,EAAE;AAPwB,CAA1B;AAeP,OAAO,IAAMC,SAAS,GAAG;AACvB;AACAP,SAAO,EAAE,SAFc;;AAGvB;AACAE,QAAM,EAAE,QAJe;;AAKvB;AACAC,SAAO,EAAE,SANc;;AAOvB;AACAE,UAAQ,EAAE,UARa;;AASvB;AACAC,OAAK,EAAE;AAVgB,CAAlB;AAaP,OAAM,wCACJE,KADI,EACoB;AAExB,UAAQA,KAAR;AACE,SAAKT,iBAAiB,CAACC,OAAvB;AACA,SAAKD,iBAAiB,CAACE,OAAvB;AACA,SAAKF,iBAAiB,CAACK,SAAvB;AACE,aAAOG,SAAS,CAACP,OAAjB;;AACF,SAAKD,iBAAiB,CAACG,MAAvB;AACE,aAAOK,SAAS,CAACL,MAAjB;;AACF,SAAKH,iBAAiB,CAACI,OAAvB;AACE,aAAOI,SAAS,CAACJ,OAAjB;;AACF,SAAKJ,iBAAiB,CAACM,QAAvB;AACE,aAAOE,SAAS,CAACF,QAAjB;;AACF,SAAKN,iBAAiB,CAACO,KAAvB;AACE,aAAOC,SAAS,CAACD,KAAjB;;AACF;AACE;AACA,aAAOC,SAAS,CAACD,KAAjB;AAfJ;AAiBD","names":["TaskEvent","STATE_CHANGED","InternalTaskState","RUNNING","PAUSING","PAUSED","SUCCESS","CANCELING","CANCELED","ERROR","TaskState","state"],"sources":["../src/implementation/taskenums.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n * @enum {string}\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n * @enum {string}\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n * @enum {string}\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}