{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\nimport * as errorsExports from './error';\n/**\n * @struct\n */\n\nvar Location =\n/** @class */\nfunction () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function () {\n      return this.path_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n\n  Location.makeFromBucketSpec = function (bucketString) {\n    var bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw errorsExports.invalidDefaultBucket(bucketString);\n    }\n  };\n\n  Location.makeFromUrl = function (url) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    var gsPath = '(/(.*))?$';\n    var path = '(/([^?#]*).*)?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    var version = 'v[A-Za-z0-9_]+';\n    var httpRegex = new RegExp('^https?://firebasestorage\\\\.googleapis\\\\.com/' + version + '/b/' + bucketDomain + '/o' + path, 'i');\n    var httpIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: httpRegex,\n      indices: httpIndices,\n      postModify: httpModify\n    }];\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw errorsExports.invalidUrl(url);\n    }\n\n    return location;\n  };\n\n  return Location;\n}();\n\nexport { Location };","map":{"version":3,"mappings":"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","names":["errorsExports","bucket","path","path_","Object","Location","encode","encodeURIComponent","bucketString","bucketLocation","makeFromUrl","e","invalidDefaultBucket","url","location","bucketDomain","loc","charAt","length","slice","gsPath","gsRegex","RegExp","gsIndices","decodeURIComponent","version","httpRegex","httpIndices","groups","regex","indices","postModify","gsModify","httpModify","i","group","captures","exec","bucketValue","pathValue","invalidUrl"],"sources":["../src/implementation/location.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\nimport * as errorsExports from './error';\nimport { errors } from './error';\n\n/**\n * @struct\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  fullServerUrl(): string {\n    let encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    let encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw errorsExports.invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location = null;\n    let bucketDomain = '([A-Za-z0-9.\\\\-]+)';\n\n    function gsModify(loc: Location) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    let gsPath = '(/(.*))?$';\n    let path = '(/([^?#]*).*)?$';\n    let gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    let gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    let version = 'v[A-Za-z0-9_]+';\n    let httpRegex = new RegExp(\n      '^https?://firebasestorage\\\\.googleapis\\\\.com/' +\n        version +\n        '/b/' +\n        bucketDomain +\n        '/o' +\n        path,\n      'i'\n    );\n    let httpIndices = { bucket: 1, path: 3 };\n    let groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      { regex: httpRegex, indices: httpIndices, postModify: httpModify }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      let group = groups[i];\n      let captures = group.regex.exec(url);\n      if (captures) {\n        let bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw errorsExports.invalidUrl(url);\n    }\n    return location;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}