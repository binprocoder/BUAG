{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.request = exports.toArray = exports.stringify = exports.clone = exports.values = exports.deprecate = exports.info = exports.error = exports.warn = exports.debug = void 0;\n\nconst Debug = require(\"debug\");\n\nconst https = require(\"https\");\n\nconst name = 'actions-on-google';\n/** @hidden */\n\nexports.debug = Debug(`${name}:debug`);\n/** @hidden */\n\nexports.warn = Debug(`${name}:warn`);\n/** @hidden */\n// tslint:disable-next-line:no-console Allow console binding\n\nexports.error = console.error.bind(console);\n/** @hidden */\n// tslint:disable-next-line:no-console Allow console binding\n\nexports.info = console.log.bind(console);\nexports.warn.log = exports.error;\nexports.debug.log = exports.info;\n/** @hidden */\n\nconst deprecate = (feature, alternative) => exports.info(`${feature} is *DEPRECATED*: ${alternative}`);\n\nexports.deprecate = deprecate;\n/** @hidden */\n\nconst values = o => Object.keys(o).map(k => o[k]);\n\nexports.values = values;\n/** @hidden */\n\nconst clone = o => JSON.parse(JSON.stringify(o));\n\nexports.clone = clone;\n/** @hidden */\n// tslint:disable-next-line:no-any root can be anything\n\nconst stringify = (root, ...exclude) => {\n  const excluded = new Set(exclude);\n  const filtered = Object.keys(root).reduce((o, k) => {\n    if (excluded.has(k)) {\n      o[k] = '[Excluded]';\n      return o;\n    }\n\n    const value = root[k];\n\n    try {\n      JSON.stringify(value);\n      o[k] = value;\n      return o;\n    } catch (e) {\n      const {\n        message = ''\n      } = e;\n      o[k] = message.includes('Converting circular structure to JSON') ? '[Circular]' : `[Stringify Error] ${e}`;\n      return o;\n    }\n  }, {});\n  return JSON.stringify(filtered, null, 2);\n};\n\nexports.stringify = stringify;\n/** @hidden */\n\nconst toArray = a => Array.isArray(a) ? a : [a];\n\nexports.toArray = toArray; // Bind this to https to ensure its not implementation dependent\n\n/** @hidden */\n\nexports.request = https.request.bind(https);","map":{"version":3,"sources":["../src/common.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,MAAM,IAAI,GAAG,mBAAb;AAEA;;AACa,OAAA,CAAA,KAAA,GAAQ,KAAK,CAAC,GAAG,IAAI,QAAR,CAAb;AAEb;;AACa,OAAA,CAAA,IAAA,GAAO,KAAK,CAAC,GAAG,IAAI,OAAR,CAAZ;AAEb;AACA;;AACa,OAAA,CAAA,KAAA,GAAQ,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAAR;AAEb;AACA;;AACa,OAAA,CAAA,IAAA,GAAO,OAAO,CAAC,GAAR,CAAY,IAAZ,CAAiB,OAAjB,CAAP;AAEb,OAAA,CAAA,IAAA,CAAK,GAAL,GAAW,OAAA,CAAA,KAAX;AACA,OAAA,CAAA,KAAA,CAAM,GAAN,GAAY,OAAA,CAAA,IAAZ;AAEA;;AACO,MAAM,SAAS,GAAG,CAAC,OAAD,EAAkB,WAAlB,KACvB,OAAA,CAAA,IAAA,CAAK,GAAG,OAAO,qBAAqB,WAAW,EAA/C,CADK;;AAAM,OAAA,CAAA,SAAA,GAAS,SAAT;AASb;;AACO,MAAM,MAAM,GAAO,CAAJ,IACpB,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAe,GAAf,CAAmB,CAAC,IAAI,CAAC,CAAC,CAAD,CAAzB,CADK;;AAAM,OAAA,CAAA,MAAA,GAAM,MAAN;AAGb;;AACO,MAAM,KAAK,GAAO,CAAJ,IAAgB,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,CAAf,CAAX,CAA9B;;AAAM,OAAA,CAAA,KAAA,GAAK,KAAL;AAEb;AACA;;AACO,MAAM,SAAS,GAAG,CAAC,IAAD,EAAY,GAAG,OAAf,KAAoC;AAC3D,QAAM,QAAQ,GAAG,IAAI,GAAJ,CAAQ,OAAR,CAAjB;AACA,QAAM,QAAQ,GAAG,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,MAAlB,CAAyB,CAAC,CAAD,EAAI,CAAJ,KAAS;AACjD,QAAI,QAAQ,CAAC,GAAT,CAAa,CAAb,CAAJ,EAAqB;AACnB,MAAA,CAAC,CAAC,CAAD,CAAD,GAAO,YAAP;AACA,aAAO,CAAP;AACD;;AACD,UAAM,KAAK,GAAG,IAAI,CAAC,CAAD,CAAlB;;AACA,QAAI;AACF,MAAA,IAAI,CAAC,SAAL,CAAe,KAAf;AACA,MAAA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAP;AACA,aAAO,CAAP;AACD,KAJD,CAIE,OAAO,CAAP,EAAU;AACV,YAAM;AAAC,QAAA,OAAO,GAAG;AAAX,UAAiB,CAAvB;AACA,MAAA,CAAC,CAAC,CAAD,CAAD,GAAO,OAAO,CAAC,QAAR,CAAiB,uCAAjB,IACH,YADG,GAEH,qBAAqB,CAAC,EAF1B;AAGA,aAAO,CAAP;AACD;AACF,GAjBgB,EAiBd,EAjBc,CAAjB;AAkBA,SAAO,IAAI,CAAC,SAAL,CAAe,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAP;AACD,CArBM;;AAAM,OAAA,CAAA,SAAA,GAAS,SAAT;AA0Bb;;AACO,MAAM,OAAO,GAAO,CAAJ,IAAoB,KAAK,CAAC,OAAN,CAAc,CAAd,IAAmB,CAAnB,GAAuB,CAAC,CAAD,CAA3D;;AAAM,OAAA,CAAA,OAAA,GAAO,OAAP,C,CAOb;;AACA;;AACa,OAAA,CAAA,OAAA,GAAgC,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,KAAnB,CAAhC","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.request = exports.toArray = exports.stringify = exports.clone = exports.values = exports.deprecate = exports.info = exports.error = exports.warn = exports.debug = void 0;\nconst Debug = require(\"debug\");\nconst https = require(\"https\");\nconst name = 'actions-on-google';\n/** @hidden */\nexports.debug = Debug(`${name}:debug`);\n/** @hidden */\nexports.warn = Debug(`${name}:warn`);\n/** @hidden */\n// tslint:disable-next-line:no-console Allow console binding\nexports.error = console.error.bind(console);\n/** @hidden */\n// tslint:disable-next-line:no-console Allow console binding\nexports.info = console.log.bind(console);\nexports.warn.log = exports.error;\nexports.debug.log = exports.info;\n/** @hidden */\nconst deprecate = (feature, alternative) => exports.info(`${feature} is *DEPRECATED*: ${alternative}`);\nexports.deprecate = deprecate;\n/** @hidden */\nconst values = (o) => Object.keys(o).map(k => o[k]);\nexports.values = values;\n/** @hidden */\nconst clone = (o) => JSON.parse(JSON.stringify(o));\nexports.clone = clone;\n/** @hidden */\n// tslint:disable-next-line:no-any root can be anything\nconst stringify = (root, ...exclude) => {\n    const excluded = new Set(exclude);\n    const filtered = Object.keys(root).reduce((o, k) => {\n        if (excluded.has(k)) {\n            o[k] = '[Excluded]';\n            return o;\n        }\n        const value = root[k];\n        try {\n            JSON.stringify(value);\n            o[k] = value;\n            return o;\n        }\n        catch (e) {\n            const { message = '' } = e;\n            o[k] = message.includes('Converting circular structure to JSON')\n                ? '[Circular]'\n                : `[Stringify Error] ${e}`;\n            return o;\n        }\n    }, {});\n    return JSON.stringify(filtered, null, 2);\n};\nexports.stringify = stringify;\n/** @hidden */\nconst toArray = (a) => (Array.isArray(a) ? a : [a]);\nexports.toArray = toArray;\n// Bind this to https to ensure its not implementation dependent\n/** @hidden */\nexports.request = https.request.bind(https);\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}