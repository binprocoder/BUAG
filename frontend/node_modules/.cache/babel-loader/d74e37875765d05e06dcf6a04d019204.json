{"ast":null,"code":"import binhluanApi from \"../../../../api/binhluanApi\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n\nexport const binhluanData = createAsyncThunk('binhluans/binhluanData', async () => {\n  const binhluan = await binhluanApi.getAll();\n  return binhluan;\n});\nconst Binhluan = createSlice({\n  name: \"binhluans\",\n  initialState: {\n    binhluan: [],\n    loading: true,\n    error: ''\n  },\n  reducers: {\n    addbinhluan: (state, action) => {\n      binhluanApi.postbinhluan(action.payload);\n    },\n    removebinhluan: (state, action) => {\n      binhluanApi.deletebinhluan(action.payload);\n    },\n    updatebinhluan: (state, action) => {\n      binhluanApi.editbinhluan(action.payload);\n    },\n    findbinhluan: (state, action) => {\n      binhluanApi.getbinhluan(action.payload);\n    },\n    getallbinhluan: (state, action) => {\n      binhluanApi.getallbinhluan();\n    }\n  },\n  extraReducers: {\n    [binhluanData.pending]: state => {\n      state.loading = true;\n    },\n    [binhluanData.rejected]: (state, action) => {\n      state.loading = true;\n      state.error = action.error;\n    },\n    [binhluanData.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.binhluan = action.payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = Binhluan;\nexport const {\n  addbinhluan,\n  removebinhluan,\n  updatebinhluan,\n  findbinhluan,\n  getallbinhluan\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/BUAG-tienPush/frontend/src/features/container/admin/Binhluan/binhluanSlice.js"],"names":["binhluanApi","createSlice","createAsyncThunk","require","binhluanData","binhluan","getAll","Binhluan","name","initialState","loading","error","reducers","addbinhluan","state","action","postbinhluan","payload","removebinhluan","deletebinhluan","updatebinhluan","editbinhluan","findbinhluan","getbinhluan","getallbinhluan","extraReducers","pending","rejected","fulfilled","reducer","actions"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,6BAAxB;;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,OAAO,MAAMC,YAAY,GAAGF,gBAAgB,CAAC,wBAAD,EAA2B,YAAY;AAC/E,QAAMG,QAAQ,GAAG,MAAML,WAAW,CAACM,MAAZ,EAAvB;AACA,SAAOD,QAAP;AACH,CAH2C,CAArC;AAIP,MAAME,QAAQ,GAAGN,WAAW,CAAC;AACzBO,EAAAA,IAAI,EAAE,WADmB;AAEzBC,EAAAA,YAAY,EAAE;AACVJ,IAAAA,QAAQ,EAAE,EADA;AAEVK,IAAAA,OAAO,EAAE,IAFC;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFW;AAOzBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5Bf,MAAAA,WAAW,CAACgB,YAAZ,CAAyBD,MAAM,CAACE,OAAhC;AACH,KAHK;AAINC,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC/Bf,MAAAA,WAAW,CAACmB,cAAZ,CAA2BJ,MAAM,CAACE,OAAlC;AACH,KANK;AAONG,IAAAA,cAAc,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC/Bf,MAAAA,WAAW,CAACqB,YAAZ,CAAyBN,MAAM,CAACE,OAAhC;AACH,KATK;AAUNK,IAAAA,YAAY,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC7Bf,MAAAA,WAAW,CAACuB,WAAZ,CAAwBR,MAAM,CAACE,OAA/B;AACH,KAZK;AAaNO,IAAAA,cAAc,EAAE,CAACV,KAAD,EAAOC,MAAP,KAAkB;AAC9Bf,MAAAA,WAAW,CAACwB,cAAZ;AACH;AAfK,GAPe;AAwBzBC,EAAAA,aAAa,EAAE;AACX,KAACrB,YAAY,CAACsB,OAAd,GAAyBZ,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACN,YAAY,CAACuB,QAAd,GAAyB,CAACb,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAArB;AACH,KAPU;AAQX,KAACP,YAAY,CAACwB,SAAd,GAA0B,CAACd,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACT,QAAN,GAAiBU,MAAM,CAACE,OAAxB;AACH;AAXU;AAxBU,CAAD,CAA5B;AAsCA,MAAM;AAAEY,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBvB,QAA7B;AACA,OAAO,MAAM;AAAEM,EAAAA,WAAF;AAAeK,EAAAA,cAAf;AAA+BE,EAAAA,cAA/B;AAA+CE,EAAAA,YAA/C;AAA6DE,EAAAA;AAA7D,IAAgFM,OAAtF;AAEP,eAAeD,OAAf","sourcesContent":["import binhluanApi from \"../../../../api/binhluanApi\";\n\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\n\nexport const binhluanData = createAsyncThunk('binhluans/binhluanData', async () => {\n    const binhluan = await binhluanApi.getAll();\n    return binhluan;\n})\nconst Binhluan = createSlice({\n    name: \"binhluans\",\n    initialState: {\n        binhluan: [],\n        loading: true,\n        error: ''\n    },\n    reducers: {\n        addbinhluan: (state, action) => {\n            binhluanApi.postbinhluan(action.payload);\n        },\n        removebinhluan: (state, action) => {\n            binhluanApi.deletebinhluan(action.payload);\n        },\n        updatebinhluan: (state, action) => {\n            binhluanApi.editbinhluan(action.payload);\n        },\n        findbinhluan: (state, action) => {\n            binhluanApi.getbinhluan(action.payload);\n        },\n        getallbinhluan: (state,action) => {\n            binhluanApi.getallbinhluan();\n        }\n    },\n    extraReducers: {\n        [binhluanData.pending]: (state) => {\n            state.loading = true;\n        },\n        [binhluanData.rejected]: (state, action) => {\n            state.loading = true;\n            state.error = action.error;\n        },\n        [binhluanData.fulfilled]: (state, action) => {\n            state.loading = false;\n            state.binhluan = action.payload;\n        }\n    }\n});\nconst { reducer, actions } = Binhluan;\nexport const { addbinhluan, removebinhluan, updatebinhluan, findbinhluan, getallbinhluan } = actions;\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}