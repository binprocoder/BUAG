{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nconst axiosClient = axios.create({\n  baseURL: `http://localhost:666`,\n  headers: {\n    'content-type': \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  const token = localStorage.getItem(\"token\");\n\n  if (token) {\n    config.headers.authorization = `Bearer ${token}`;\n  }\n\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  // Handle errors\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["C:/Users/Tran Dai Quy/Desktop/BUAG/BUAG/frontend/src/api/axiosClient.js"],"names":["axios","queryString","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","localStorage","getItem","authorization","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAG,sBADmB;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIN,WAAW,CAACO,SAAZ,CAAsBD,MAAtB;AALC,CAAb,CAApB;AAOAL,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACnD,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACP,OAAP,CAAeW,aAAf,GAAgC,UAASH,KAAM,EAA/C;AACH;;AACD,SAAOD,MAAP;AACH,CAND;AAOAV,WAAW,CAACO,YAAZ,CAAyBQ,QAAzB,CAAkCN,GAAlC,CAAuCM,QAAD,IAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AACD,SAAOD,QAAP;AACH,CALD,EAKIE,KAAD,IAAW;AACV;AACA,QAAMA,KAAN;AACH,CARD;AASA,eAAejB,WAAf","sourcesContent":["import axios from 'axios';\r\nimport queryString from 'query-string';\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: `http://localhost:666`,\r\n    headers: {\r\n        'content-type': \"application/json\",\r\n    },\r\n    paramsSerializer: params => queryString.stringify(params),\r\n});\r\naxiosClient.interceptors.request.use(async (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n        config.headers.authorization = `Bearer ${token}`\r\n    }\r\n    return config;\r\n})\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.data) {\r\n        return response.data;\r\n    }\r\n    return response;\r\n}, (error) => {\r\n    // Handle errors\r\n    throw error;\r\n});\r\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}