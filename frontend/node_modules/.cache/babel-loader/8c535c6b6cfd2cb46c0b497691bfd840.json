{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\n\nvar Change =\n/** @class */\nfunction () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} newSnapshot\r\n   * @param {!Node} oldSnapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }; //event types\n\n  /** Event type for a child added */\n\n\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n\n  Change.VALUE = 'value';\n  return Change;\n}();\n\nexports.Change = Change;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;AASA;AAAA;AAAA;AACE,kBACSA,IADT,EAESC,YAFT,EAGSC,SAHT,EAISC,OAJT,EAKSC,QALT,EAK0B;AAJjB;AACA;AACA;AACA;AACA;AACL;AAEJ;;;;;;AAIOC,uBAAP,UAAmBC,QAAnB,EAAiC;AAC/B,WAAO,IAAID,MAAJ,CAAWA,MAAM,CAACE,KAAlB,EAAyBD,QAAzB,CAAP;AACD,GAFM;AAIP;;;;;;;AAKOD,4BAAP,UAAwBG,QAAxB,EAA0CF,QAA1C,EAAwD;AACtD,WAAO,IAAID,MAAJ,CAAWA,MAAM,CAACI,WAAlB,EAA+BH,QAA/B,EAAyCE,QAAzC,CAAP;AACD,GAFM;AAIP;;;;;;;AAKOH,8BAAP,UAA0BG,QAA1B,EAA4CF,QAA5C,EAA0D;AACxD,WAAO,IAAID,MAAJ,CAAWA,MAAM,CAACK,aAAlB,EAAiCJ,QAAjC,EAA2CE,QAA3C,CAAP;AACD,GAFM;AAIP;;;;;;;;AAMOH,8BAAP,UACEG,QADF,EAEEG,WAFF,EAGEC,WAHF,EAGmB;AAEjB,WAAO,IAAIP,MAAJ,CAAWA,MAAM,CAACQ,aAAlB,EAAiCF,WAAjC,EAA8CH,QAA9C,EAAwDI,WAAxD,CAAP;AACD,GANM;AAQP;;;;;;;AAKOP,4BAAP,UAAwBG,QAAxB,EAA0CF,QAA1C,EAAwD;AACtD,WAAO,IAAID,MAAJ,CAAWA,MAAM,CAACS,WAAlB,EAA+BR,QAA/B,EAAyCE,QAAzC,CAAP;AACD,GAFM,CAtDT,CA0DE;;AACA;;;AACOH,uBAAc,aAAd;AAEP;;AACOA,yBAAgB,eAAhB;AAEP;;AACOA,yBAAgB,eAAhB;AAEP;;AACOA,uBAAc,aAAd;AAEP;;AACOA,iBAAQ,OAAR;AACT;AAzEA;;AAAaU","names":["type","snapshotNode","childName","oldSnap","prevName","Change","snapshot","VALUE","childKey","CHILD_ADDED","CHILD_REMOVED","newSnapshot","oldSnapshot","CHILD_CHANGED","CHILD_MOVED","exports"],"sources":["../src/core/view/Change.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n"]},"metadata":{},"sourceType":"script"}