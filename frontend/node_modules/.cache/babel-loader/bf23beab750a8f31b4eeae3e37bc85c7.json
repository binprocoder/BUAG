{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Operation_1 = require(\"./Operation\");\n\nvar Overwrite_1 = require(\"./Overwrite\");\n\nvar Path_1 = require(\"../util/Path\");\n\nvar util_1 = require(\"@firebase/util\");\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(\n  /**@inheritDoc */\n  source,\n  /**@inheritDoc */\n  path,\n  /**@inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = Operation_1.OperationType.MERGE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path_1.Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite_1.Overwrite(this.source, Path_1.Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path_1.Path.Empty, childTree);\n      }\n    } else {\n      util_1.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n\n  return Merge;\n}();\n\nexports.Merge = Merge;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;AAIA;;;;;;;;;AAOA;AAAA;AAAA;AAIE;AACE;AAAyBA,QAD3B;AAEE;AAAyBC,MAF3B;AAGE;AAAyBC,UAH3B,EAGwD;AAF7B;AACA;AACA;AAN3B;;AACA,gBAAOC,0BAAcC,KAArB;AAMI;AAEJ;;;;;AAGAC,gDAAkBC,SAAlB,EAAmC;AACjC,QAAI,KAAKL,IAAL,CAAUM,OAAV,EAAJ,EAAyB;AACvB,UAAMC,SAAS,GAAG,KAAKN,QAAL,CAAcO,OAAd,CAAsB,IAAIC,WAAJ,CAASJ,SAAT,CAAtB,CAAlB;;AACA,UAAIE,SAAS,CAACD,OAAV,EAAJ,EAAyB;AACvB;AACA,eAAO,IAAP;AACD,OAHD,MAGO,IAAIC,SAAS,CAACG,KAAd,EAAqB;AAC1B;AACA,eAAO,IAAIC,qBAAJ,CAAc,KAAKZ,MAAnB,EAA2BU,YAAKG,KAAhC,EAAuCL,SAAS,CAACG,KAAjD,CAAP;AACD,OAHM,MAGA;AACL;AACA,eAAO,IAAIN,KAAJ,CAAU,KAAKL,MAAf,EAAuBU,YAAKG,KAA5B,EAAmCL,SAAnC,CAAP;AACD;AACF,KAZD,MAYO;AACLM,oBACE,KAAKb,IAAL,CAAUc,QAAV,OAAyBT,SAD3B,EAEE,gEAFF;AAIA,aAAO,IAAID,KAAJ,CAAU,KAAKL,MAAf,EAAuB,KAAKC,IAAL,CAAUe,QAAV,EAAvB,EAA6C,KAAKd,QAAlD,CAAP;AACD;AACF,GApBD;AAsBA;;;;;AAGAG;AACE,WACE,eACA,KAAKJ,IADL,GAEA,IAFA,GAGA,KAAKD,MAAL,CAAYiB,QAAZ,EAHA,GAIA,UAJA,GAKA,KAAKf,QAAL,CAAce,QAAd,EALA,GAMA,GAPF;AASD,GAVD;;AAWF;AAjDA;;AAAaC","names":["source","path","children","Operation_1","MERGE","Merge","childName","isEmpty","childTree","subtree","Path_1","value","Overwrite_1","Empty","util_1","getFront","popFront","toString","exports"],"sources":["../src/core/operation/Merge.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /**@inheritDoc */ public source: OperationSource,\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}