{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar Change_1 = require(\"./Change\");\n\nvar util_2 = require(\"@firebase/util\");\n/**\n * @constructor\n */\n\n\nvar ChildChangeAccumulator =\n/** @class */\nfunction () {\n  function ChildChangeAccumulator() {\n    this.changeMap_ = {};\n  }\n  /**\n   * @param {!Change} change\n   */\n\n\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey\n    /** @type {!string} */\n    = change.childName;\n    util_2.assert(type == Change_1.Change.CHILD_ADDED || type == Change_1.Change.CHILD_CHANGED || type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = util_1.safeGet(this.changeMap_, childKey);\n\n    if (oldChange) {\n      var oldType = oldChange.type;\n\n      if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\n      } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_ADDED) {\n        delete this.changeMap_[childKey];\n      } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_CHANGED) {\n        this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);\n      } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_ADDED) {\n        this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);\n      } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_CHANGED) {\n        this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\n      } else {\n        throw util_2.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  };\n  /**\n   * @return {!Array.<!Change>}\n   */\n\n\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return util_1.getValues(this.changeMap_);\n  };\n\n  return ChildChangeAccumulator;\n}();\n\nexports.ChildChangeAccumulator = ChildChangeAccumulator;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AACU,sBAAsC,EAAtC;AA4ET;AA1EC;;;;;AAGAA,gEAAiBC,MAAjB,EAA+B;AAC7B,QAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,QAAMC;AAAS;AAAD,MAA0BF,MAAM,CAACG,SAA/C;AACAC,kBACEH,IAAI,IAAII,gBAAOC,WAAf,IACEL,IAAI,IAAII,gBAAOE,aADjB,IAEEN,IAAI,IAAII,gBAAOG,aAHnB,EAIE,2CAJF;AAMAJ,kBACEF,QAAQ,KAAK,WADf,EAEE,iDAFF;AAIA,QAAMO,SAAS,GAAGC,eAAQ,KAAKC,UAAb,EAAyBT,QAAzB,CAAlB;;AACA,QAAIO,SAAJ,EAAe;AACb,UAAMG,OAAO,GAAGH,SAAS,CAACR,IAA1B;;AACA,UAAIA,IAAI,IAAII,gBAAOC,WAAf,IAA8BM,OAAO,IAAIP,gBAAOG,aAApD,EAAmE;AACjE,aAAKG,UAAL,CAAgBT,QAAhB,IAA4BG,gBAAOQ,kBAAP,CAC1BX,QAD0B,EAE1BF,MAAM,CAACc,YAFmB,EAG1BL,SAAS,CAACK,YAHgB,CAA5B;AAKD,OAND,MAMO,IACLb,IAAI,IAAII,gBAAOG,aAAf,IACAI,OAAO,IAAIP,gBAAOC,WAFb,EAGL;AACA,eAAO,KAAKK,UAAL,CAAgBT,QAAhB,CAAP;AACD,OALM,MAKA,IACLD,IAAI,IAAII,gBAAOG,aAAf,IACAI,OAAO,IAAIP,gBAAOE,aAFb,EAGL;AACA,aAAKI,UAAL,CAAgBT,QAAhB,IAA4BG,gBAAOU,kBAAP,CAC1Bb,QAD0B,EAE1BO,SAAS,CAACO,OAFgB,CAA5B;AAID,OARM,MAQA,IACLf,IAAI,IAAII,gBAAOE,aAAf,IACAK,OAAO,IAAIP,gBAAOC,WAFb,EAGL;AACA,aAAKK,UAAL,CAAgBT,QAAhB,IAA4BG,gBAAOY,gBAAP,CAC1Bf,QAD0B,EAE1BF,MAAM,CAACc,YAFmB,CAA5B;AAID,OARM,MAQA,IACLb,IAAI,IAAII,gBAAOE,aAAf,IACAK,OAAO,IAAIP,gBAAOE,aAFb,EAGL;AACA,aAAKI,UAAL,CAAgBT,QAAhB,IAA4BG,gBAAOQ,kBAAP,CAC1BX,QAD0B,EAE1BF,MAAM,CAACc,YAFmB,EAG1BL,SAAS,CAACO,OAHgB,CAA5B;AAKD,OATM,MASA;AACL,cAAMZ,sBACJ,qCACEJ,MADF,GAEE,kBAFF,GAGES,SAJE,CAAN;AAMD;AACF,KA9CD,MA8CO;AACL,WAAKE,UAAL,CAAgBT,QAAhB,IAA4BF,MAA5B;AACD;AACF,GA/DD;AAiEA;;;;;AAGAD;AACE,WAAOW,iBAAU,KAAKC,UAAf,CAAP;AACD,GAFD;;AAGF;AA7EA;;AAAaO","names":["ChildChangeAccumulator","change","type","childKey","childName","util_2","Change_1","CHILD_ADDED","CHILD_CHANGED","CHILD_REMOVED","oldChange","util_1","changeMap_","oldType","childChangedChange","snapshotNode","childRemovedChange","oldSnap","childAddedChange","exports"],"sources":["../src/core/view/ChildChangeAccumulator.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getValues, safeGet } from '@firebase/util';\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\n/**\n * @constructor\n */\nexport class ChildChangeAccumulator {\n  private changeMap_: { [k: string]: Change } = {};\n\n  /**\n   * @param {!Change} change\n   */\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey /** @type {!string} */ = change.childName;\n    assert(\n      type == Change.CHILD_ADDED ||\n        type == Change.CHILD_CHANGED ||\n        type == Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = safeGet(this.changeMap_, childKey) as Change;\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        delete this.changeMap_[childKey];\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childRemovedChange(\n          childKey,\n          oldChange.oldSnap\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap_[childKey] = Change.childAddedChange(\n          childKey,\n          change.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.oldSnap\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  }\n\n  /**\n   * @return {!Array.<!Change>}\n   */\n  getChanges(): Change[] {\n    return getValues(this.changeMap_);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}