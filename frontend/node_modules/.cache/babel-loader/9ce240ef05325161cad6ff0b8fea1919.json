{"ast":null,"code":"import roleApi from \"../../../../api/roleApi\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n\nexport const roleData = createAsyncThunk('roles/roleData', async () => {\n  const role = await roleApi.getAll();\n  return role;\n});\nconst Role = createSlice({\n  name: \"roles\",\n  initialState: {\n    role: [],\n    loading: true,\n    error: ''\n  },\n  reducers: {\n    addrole: (state, action) => {\n      roleApi.postrole(action.payload);\n    },\n    removerole: (state, action) => {\n      roleApi.deleterole(action.payload);\n    },\n    updaterole: (state, action) => {\n      roleApi.editrole(action.payload);\n    }\n  },\n  extraReducers: {\n    [roleData.pending]: state => {\n      state.loading = true;\n    },\n    [roleData.rejected]: (state, action) => {\n      state.loading = true;\n      state.error = action.error;\n    },\n    [roleData.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.role = action.payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = Role;\nexport const {\n  addrole,\n  removerole,\n  updaterole\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Tran Dai Quy/Desktop/BUAG/BUAG/frontend/src/features/container/admin/Role/roleSlice.js"],"names":["roleApi","createSlice","createAsyncThunk","require","roleData","role","getAll","Role","name","initialState","loading","error","reducers","addrole","state","action","postrole","payload","removerole","deleterole","updaterole","editrole","extraReducers","pending","rejected","fulfilled","reducer","actions"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,yBAApB;;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACnE,QAAMG,IAAI,GAAG,MAAML,OAAO,CAACM,MAAR,EAAnB;AACA,SAAOD,IAAP;AACH,CAHuC,CAAjC;AAIP,MAAME,IAAI,GAAGN,WAAW,CAAC;AACrBO,EAAAA,IAAI,EAAE,OADe;AAErBC,EAAAA,YAAY,EAAE;AACVJ,IAAAA,IAAI,EAAE,EADI;AAEVK,IAAAA,OAAO,EAAE,IAFC;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFO;AAOrBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxBf,MAAAA,OAAO,CAACgB,QAAR,CAAiBD,MAAM,CAACE,OAAxB;AACH,KAHK;AAINC,IAAAA,UAAU,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC3Bf,MAAAA,OAAO,CAACmB,UAAR,CAAmBJ,MAAM,CAACE,OAA1B;AACH,KANK;AAONG,IAAAA,UAAU,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC3Bf,MAAAA,OAAO,CAACqB,QAAR,CAAiBN,MAAM,CAACE,OAAxB;AACH;AATK,GAPW;AAkBrBK,EAAAA,aAAa,EAAE;AACX,KAAClB,QAAQ,CAACmB,OAAV,GAAqBT,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACN,QAAQ,CAACoB,QAAV,GAAqB,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAArB;AACH,KAPU;AAQX,KAACP,QAAQ,CAACqB,SAAV,GAAsB,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACE,OAApB;AACH;AAXU;AAlBM,CAAD,CAAxB;AAgCA,MAAM;AAAES,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBpB,IAA7B;AACA,OAAO,MAAM;AAAEM,EAAAA,OAAF;AAAWK,EAAAA,UAAX;AAAuBE,EAAAA;AAAvB,IAAsCO,OAA5C;AAEP,eAAeD,OAAf","sourcesContent":["import roleApi from \"../../../../api/roleApi\";\r\n\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\nexport const roleData = createAsyncThunk('roles/roleData', async () => {\r\n    const role = await roleApi.getAll();\r\n    return role;\r\n})\r\nconst Role = createSlice({\r\n    name: \"roles\",\r\n    initialState: {\r\n        role: [],\r\n        loading: true,\r\n        error: ''\r\n    },\r\n    reducers: {\r\n        addrole: (state, action) => {\r\n            roleApi.postrole(action.payload);\r\n        },\r\n        removerole: (state, action) => {\r\n            roleApi.deleterole(action.payload);\r\n        },\r\n        updaterole: (state, action) => {\r\n            roleApi.editrole(action.payload);\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [roleData.pending]: (state) => {\r\n            state.loading = true;\r\n        },\r\n        [roleData.rejected]: (state, action) => {\r\n            state.loading = true;\r\n            state.error = action.error;\r\n        },\r\n        [roleData.fulfilled]: (state, action) => {\r\n            state.loading = false;\r\n            state.role = action.payload;\r\n        }\r\n    }\r\n});\r\nconst { reducer, actions } = Role;\r\nexport const { addrole, removerole, updaterole } = actions;\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}