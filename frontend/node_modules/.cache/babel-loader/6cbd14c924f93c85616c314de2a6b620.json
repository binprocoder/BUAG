{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Node_1 = require(\"../snap/Node\");\n\nvar Change_1 = require(\"./Change\");\n\nvar util_1 = require(\"@firebase/util\");\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param {!Query} query_\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\n     * @private\n     * @type {!Index}\n     */\n\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n\n\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change_1.Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n\n\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n\n\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n      /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n\n\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util_1.assertionError('Should only compare child_ events.');\n    }\n\n    var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n\n  return EventGenerator;\n}();\n\nexports.EventGenerator = EventGenerator;","map":{"version":3,"mappings":"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","names":["query_","index_","getQueryParams","getIndex","EventGenerator","changes","eventCache","eventRegistrations","events","moves","forEach","change","type","Change_1","CHILD_CHANGED","_this","indexedValueChanged","oldSnap","snapshotNode","push","childMovedChange","childName","generateEventsForType_","CHILD_REMOVED","CHILD_ADDED","CHILD_MOVED","VALUE","eventType","registrations","filteredChanges","filter","sort","compareChanges_","bind","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","prevName","getPredecessorChildName","a","b","util_1","aWrapped","Node_1","bWrapped","compare","exports"],"sources":["../src/core/view/EventGenerator.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}