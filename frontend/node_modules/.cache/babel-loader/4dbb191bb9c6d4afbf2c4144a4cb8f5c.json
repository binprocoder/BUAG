{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Index_1 = require(\"./Index\");\n\nvar Node_1 = require(\"../Node\");\n\nvar util_1 = require(\"../../util/util\");\n\nvar nodeFromJSON_1 = require(\"../nodeFromJSON\");\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\n\nvar ValueIndex =\n/** @class */\nfunction (_super) {\n  __extends(ValueIndex, _super);\n\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return util_1.nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.minPost = function () {\n    return Node_1.NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.maxPost = function () {\n    return Node_1.NamedNode.MAX;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);\n    return new Node_1.NamedNode(name, valueNode);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n\n  return ValueIndex;\n}(Index_1.Index);\n\nexports.ValueIndex = ValueIndex;\nexports.VALUE_INDEX = new ValueIndex();","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AAAgCA;;AAAhC;;AAyDC;AAxDC;;;;;AAGAC,2CAAQC,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,QAAMC,QAAQ,GAAGF,CAAC,CAACG,IAAF,CAAOC,SAAP,CAAiBH,CAAC,CAACE,IAAnB,CAAjB;;AACA,QAAID,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAOG,mBAAYL,CAAC,CAACM,IAAd,EAAoBL,CAAC,CAACK,IAAtB,CAAP;AACD,KAFD,MAEO;AACL,aAAOJ,QAAP;AACD;AACF,GAPD;AASA;;;;;AAGAH,+CAAYI,IAAZ,EAAsB;AACpB,WAAO,IAAP;AACD,GAFD;AAIA;;;;;AAGAJ,uDAAoBQ,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,WAAO,CAACD,OAAO,CAACE,MAAR,CAAeD,OAAf,CAAR;AACD,GAFD;AAIA;;;;;AAGAT;AACE,WAAQW,iBAAkBC,GAA1B;AACD,GAFD;AAIA;;;;;AAGAZ;AACE,WAAQW,iBAAkBE,GAA1B;AACD,GAFD;AAIA;;;;;;;AAKAb,4CAASc,UAAT,EAA6BP,IAA7B,EAAyC;AACvC,QAAMQ,SAAS,GAAGC,4BAAaF,UAAb,CAAlB;AACA,WAAO,IAAIH,gBAAJ,CAAcJ,IAAd,EAAoBQ,SAApB,CAAP;AACD,GAHD;AAKA;;;;;AAGAf;AACE,WAAO,QAAP;AACD,GAFD;;AAGF;AAzDA,EAAgCiB,aAAhC;;AAAaC;AA2DAA,sBAAc,IAAIlB,UAAJ,EAAd","names":["__extends","ValueIndex","a","b","indexCmp","node","compareTo","util_1","name","oldNode","newNode","equals","Node_1","MIN","MAX","indexValue","valueNode","nodeFromJSON_1","Index_1","exports"],"sources":["../src/core/snap/indexes/ValueIndex.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n"]},"metadata":{},"sourceType":"script"}