{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EventEmitter_1 = require(\"./EventEmitter\");\n\nvar util_1 = require(\"@firebase/util\");\n/**\r\n * @extends {EventEmitter}\r\n */\n\n\nvar VisibilityMonitor =\n/** @class */\nfunction (_super) {\n  __extends(VisibilityMonitor, _super);\n\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    util_1.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n\n  return VisibilityMonitor;\n}(EventEmitter_1.EventEmitter);\n\nexports.VisibilityMonitor = VisibilityMonitor;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;AAIA;;;;;AAGA;AAAA;AAAA;AAAuCA;;AAOrC;AAAA,gBACEC,kBAAM,CAAC,SAAD,CAAN,KAAkB,IADpB;;AAEE,QAAIC,MAAJ;AACA,QAAIC,gBAAJ;;AACA,QACE,OAAOC,QAAP,KAAoB,WAApB,IACA,OAAOA,QAAQ,CAACC,gBAAhB,KAAqC,WAFvC,EAGE;AACA,UAAI,OAAOD,QAAQ,CAAC,QAAD,CAAf,KAA8B,WAAlC,EAA+C;AAC7C;AACAD,wBAAgB,GAAG,kBAAnB;AACAD,cAAM,GAAG,QAAT;AACD,OAJD,MAIO,IAAI,OAAOE,QAAQ,CAAC,WAAD,CAAf,KAAiC,WAArC,EAAkD;AACvDD,wBAAgB,GAAG,qBAAnB;AACAD,cAAM,GAAG,WAAT;AACD,OAHM,MAGA,IAAI,OAAOE,QAAQ,CAAC,UAAD,CAAf,KAAgC,WAApC,EAAiD;AACtDD,wBAAgB,GAAG,oBAAnB;AACAD,cAAM,GAAG,UAAT;AACD,OAHM,MAGA,IAAI,OAAOE,QAAQ,CAAC,cAAD,CAAf,KAAoC,WAAxC,EAAqD;AAC1DD,wBAAgB,GAAG,wBAAnB;AACAD,cAAM,GAAG,cAAT;AACD;AACF,KAtBH,CAwBE;AACA;AACA;AACA;;;AACAI,SAAI,CAACC,QAAL,GAAgB,IAAhB;;AAEA,QAAIJ,gBAAJ,EAAsB;AACpBC,cAAQ,CAACC,gBAAT,CACEF,gBADF,EAEE;AACE,YAAMK,OAAO,GAAG,CAACJ,QAAQ,CAACF,MAAD,CAAzB;;AACA,YAAIM,OAAO,KAAKF,KAAI,CAACC,QAArB,EAA+B;AAC7BD,eAAI,CAACC,QAAL,GAAgBC,OAAhB;;AACAF,eAAI,CAACG,OAAL,CAAa,SAAb,EAAwBD,OAAxB;AACD;AACF,OARH,EASE,KATF;AAWD;;;AACF;;AA/CME,kCAAP;AACE,WAAO,IAAIA,iBAAJ,EAAP;AACD,GAFM;AAiDP;;;;;;AAIAA,0DAAgBC,SAAhB,EAAiC;AAC/BC,kBAAOD,SAAS,KAAK,SAArB,EAAgC,yBAAyBA,SAAzD;AACA,WAAO,CAAC,KAAKJ,QAAN,CAAP;AACD,GAHD;;AAIF;AA5DA,EAAuCM,2BAAvC;;AAAaC","names":["__extends","_super","hidden","visibilityChange","document","addEventListener","_this","visible_","visible","trigger","VisibilityMonitor","eventType","util_1","EventEmitter_1","exports"],"sources":["../src/core/util/VisibilityMonitor.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: any;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}