{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar app_1 = require(\"@firebase/app\");\n\nvar Database_1 = require(\"./src/api/Database\");\n\nexports.Database = Database_1.Database;\n\nvar Query_1 = require(\"./src/api/Query\");\n\nexports.Query = Query_1.Query;\n\nvar Reference_1 = require(\"./src/api/Reference\");\n\nexports.Reference = Reference_1.Reference;\n\nvar util_1 = require(\"./src/core/util/util\");\n\nexports.enableLogging = util_1.enableLogging;\n\nvar RepoManager_1 = require(\"./src/core/RepoManager\");\n\nvar INTERNAL = require(\"./src/api/internal\");\n\nvar TEST_ACCESS = require(\"./src/api/test_access\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar ServerValue = Database_1.Database.ServerValue;\nexports.ServerValue = ServerValue;\n\nfunction registerDatabase(instance) {\n  // Register the Database Service with the 'firebase' namespace.\n  var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) {\n    return RepoManager_1.RepoManager.getInstance().databaseFromApp(app, url);\n  }, // firebase.database namespace properties\n  {\n    Reference: Reference_1.Reference,\n    Query: Query_1.Query,\n    Database: Database_1.Database,\n    enableLogging: util_1.enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }, null, true);\n\n  if (util_2.isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nexports.registerDatabase = registerDatabase;\nregisterDatabase(app_1.default);\n\nvar DataSnapshot_1 = require(\"./src/api/DataSnapshot\");\n\nexports.DataSnapshot = DataSnapshot_1.DataSnapshot;\n\nvar onDisconnect_1 = require(\"./src/api/onDisconnect\");\n\nexports.OnDisconnect = onDisconnect_1.OnDisconnect;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAsCSA,mBAtCAC,mBAsCA;;AArCT;;AAqCmBD,gBArCVE,aAqCU;;AApCnB;;AAoC0BF,oBApCjBG,qBAoCiB;;AAnC1B;;AAmCqCH,wBAnC5BI,oBAmC4B;;AAlCrC;;AACA;;AACA;;AACA;;AAEA,IAAMC,WAAW,GAAGJ,oBAASI,WAA7B;AA6BoDL;;AA3BpD,0BAAiCM,QAAjC,EAA4D;AAC1D;AACA,MAAMC,SAAS,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,eAAlB,CAChB,UADgB,EAEhB,UAACC,GAAD,EAAMC,MAAN,EAAcC,GAAd,EAAiB;AAAK,qCAAYC,WAAZ,GAA0BC,eAA1B,CAA0CJ,GAA1C,EAA+CE,GAA/C;AAAmD,GAFzD,EAGhB;AACA;AACEG,aAAS,uBADX;AAEEC,SAAK,eAFP;AAGEC,YAAQ,qBAHV;AAIEC,iBAAa,sBAJf;AAKEV,YAAQ,UALV;AAMEH,eAAW,aANb;AAOEc,eAAW;AAPb,GAJgB,EAahB,IAbgB,EAchB,IAdgB,CAAlB;;AAiBA,MAAIC,kBAAJ,EAAiB;AACfC,UAAM,CAACrB,OAAP,GAAiBO,SAAjB;AACD;AACF;;AAtBDP;AAwBAsB,gBAAgB,CAACC,aAAD,CAAhB;;AAKA;;AAASvB;;AACT;;AAASA","names":["exports","Database_1","Query_1","Reference_1","util_1","ServerValue","instance","namespace","INTERNAL","registerService","app","unused","url","getInstance","databaseFromApp","Reference","Query","Database","enableLogging","TEST_ACCESS","util_2","module","registerDatabase","app_1"],"sources":["../index.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp, FirebaseNamespace } from '@firebase/app';\nimport { Database } from './src/api/Database';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = instance.INTERNAL.registerService(\n    'database',\n    (app, unused, url) => RepoManager.getInstance().databaseFromApp(app, url),\n    // firebase.database namespace properties\n    {\n      Reference,\n      Query,\n      Database,\n      enableLogging,\n      INTERNAL,\n      ServerValue,\n      TEST_ACCESS\n    },\n    null,\n    true\n  );\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n"]},"metadata":{},"sourceType":"script"}