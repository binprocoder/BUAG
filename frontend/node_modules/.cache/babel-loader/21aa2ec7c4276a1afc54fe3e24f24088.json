{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"./util/util\");\n\nvar AckUserWrite_1 = require(\"./operation/AckUserWrite\");\n\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\n\nvar util_3 = require(\"@firebase/util\");\n\nvar ImmutableTree_1 = require(\"./util/ImmutableTree\");\n\nvar ListenComplete_1 = require(\"./operation/ListenComplete\");\n\nvar Merge_1 = require(\"./operation/Merge\");\n\nvar Operation_1 = require(\"./operation/Operation\");\n\nvar Overwrite_1 = require(\"./operation/Overwrite\");\n\nvar Path_1 = require(\"./util/Path\");\n\nvar SyncPoint_1 = require(\"./SyncPoint\");\n\nvar WriteTree_1 = require(\"./WriteTree\");\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\n\n\nvar SyncTree =\n/** @class */\nfunction () {\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n     * @type {!ImmutableTree.<!SyncPoint>}\n     * @private\n     */\n\n    this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;\n    /**\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n     * @type {!WriteTree}\n     * @private\n     */\n\n    this.pendingWriteTree_ = new WriteTree_1.WriteTree();\n    this.tagToQueryMap_ = {};\n    this.queryToTagMap_ = {};\n  }\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @param {number} writeId\n   * @param {boolean=} visible\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));\n    }\n  };\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));\n  };\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param {!number} writeId\n   * @param {boolean=} revert True if the given write failed and needs to be reverted\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;\n\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);\n      } else {\n        util_3.forEach(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);\n        });\n      }\n\n      return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));\n  };\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));\n  };\n  /**\n   * Apply a listen complete for a query\n   *\n   * @param {!Path} path\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));\n  };\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path_1.Path.relativePath(queryPath, path);\n      var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path_1.Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n      var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @param {!Path} path\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path_1.Path.relativePath(queryPath, path);\n      var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @return {!Array.<!Event>} Events to raise.\n   */\n\n\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n\n    if (!syncPoint) {\n      syncPoint = new SyncPoint_1.SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n    }\n\n    var serverCacheComplete;\n\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);\n\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap_[queryKey] = tag; // Coerce to string to avoid sparse arrays.\n\n      this.tagToQueryMap_['_' + tag] = queryKey;\n    }\n\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view\n      /** @type !View */\n      = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n\n    return events;\n  };\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n\n\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this; // Find the syncPoint first. Then deal with whether or not it has matching listeners\n\n\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n                newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        } else {// There's nothing below us, so nothing we need to start listening on\n        }\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\n\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      } // Now, clear all of the tags we're tracking for the removed listens\n\n\n      this.removeTags_(removed);\n    } else {// No-op, this listener must've been already removed\n    }\n\n    return cancelEvents;\n  };\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   * @param {!Path} path The path to the data we want\n   * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n   * @return {?Node}\n   */\n\n\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path_1.Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   *\n   * @param {!ImmutableTree.<!SyncPoint>} subtree\n   * @return {!Array.<!View>}\n   * @private\n   */\n\n\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n\n        util_3.forEach(childMap, function (key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n  /**\n   * @param {!Array.<!Query>} queries\n   * @private\n   */\n\n\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap_[removedQueryKey];\n        delete this.queryToTagMap_[removedQueryKey];\n        delete this.tagToQueryMap_['_' + removedQueryTag];\n      }\n    }\n  };\n  /**\n   * Normalizes a query to a query we send the server for listening\n   * @param {!Query} query\n   * @return {!Query} The normalized query\n   * @private\n   */\n\n\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return (\n        /** @type {!Query} */\n        query.getRef()\n      );\n    } else {\n      return query;\n    }\n  };\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @param {!Query} query\n   * @param {!View} view\n   * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n   * @private\n   */\n\n\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n\n    if (tag) {\n      util_1.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n\n          util_3.forEach(childMap, function (key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n\n    return events;\n  };\n  /**\n   *\n   * @param {!View} view\n   * @return {{hashFn: function(), onComplete: function(!string, *)}}\n   * @private\n   */\n\n\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function () {\n        var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function (status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error = util_2.errorForServerCode(status, query);\n          return _this.removeEventRegistration(query,\n          /*eventRegistration*/\n          null, error);\n        }\n      }\n    };\n  };\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   * @private\n   * @param {!Query} query\n   * @return {string}\n   */\n\n\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   * @private\n   * @param {!string} queryKey\n   * @return {{queryId: !string, path: !Path}}\n   */\n\n\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path_1.Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\n   * Return the query associated with the given tag, if we have one\n   * @param {!number} tag\n   * @return {?string}\n   * @private\n   */\n\n\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap_['_' + tag];\n  };\n  /**\n   * Return the tag associated with the given query.\n   * @param {!Query} query\n   * @return {?number}\n   * @private\n   */\n\n\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return util_3.safeGet(this.queryToTagMap_, queryKey);\n  };\n  /**\n   * Static accessor for query tags.\n   * @return {number}\n   * @private\n   */\n\n\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\n   * A helper method to apply tagged operations\n   *\n   * @param {!Path} queryPath\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n\n\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    util_1.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache,\n    /*serverCache=*/\n    null);\n  };\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n      * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n      * - We concatenate all of the events returned by each SyncPoint and return the result.\n   *\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n\n\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_,\n    /*serverCache=*/\n    null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));\n  };\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n\n\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path_1.Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n      }\n\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n\n      return events;\n    }\n  };\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n\n\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n\n    var syncPoint = syncPointTree.get(Path_1.Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n    }\n\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n\n    return events;\n  };\n  /**\n   * Static tracker for next query tag.\n   * @type {number}\n   * @private\n   */\n\n\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\n\nexports.SyncTree = SyncTree;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAAA;AAkBE;;;;AAIA,oBAAoBA,eAApB,EAAmD;AAA/B;AArBpB;;;;;;AAKQ,0BAA2CC,8BAAcC,KAAzD;AAER;;;;;;AAKQ,6BAAoB,IAAIC,qBAAJ,EAApB;AAEA,0BAA0C,EAA1C;AACA,0BAA0C,EAA1C;AAM+C;AAEvD;;;;;;;;;;;AASAC,oDACEC,IADF,EAEEC,OAFF,EAGEC,OAHF,EAIEC,OAJF,EAImB;AAEjB;AACA,SAAKC,iBAAL,CAAuBC,YAAvB,CAAoCL,IAApC,EAA0CC,OAA1C,EAAmDC,OAAnD,EAA4DC,OAA5D;;AAEA,QAAI,CAACA,OAAL,EAAc;AACZ,aAAO,EAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKG,2BAAL,CACL,IAAIC,qBAAJ,CAAcC,4BAAgBC,IAA9B,EAAoCT,IAApC,EAA0CC,OAA1C,CADK,CAAP;AAGD;AACF,GAhBD;AAkBA;;;;;;;;;;AAQAF,gDACEC,IADF,EAEEU,eAFF,EAGER,OAHF,EAGiB;AAEf;AACA,SAAKE,iBAAL,CAAuBO,QAAvB,CAAgCX,IAAhC,EAAsCU,eAAtC,EAAuDR,OAAvD;AAEA,QAAMU,UAAU,GAAGhB,8BAAciB,UAAd,CAAyBH,eAAzB,CAAnB;AAEA,WAAO,KAAKJ,2BAAL,CACL,IAAIQ,aAAJ,CAAUN,4BAAgBC,IAA1B,EAAgCT,IAAhC,EAAsCY,UAAtC,CADK,CAAP;AAGD,GAbD;AAeA;;;;;;;;;AAOAb,8CAAaG,OAAb,EAA8Ba,MAA9B,EAAqD;AAAvB;AAAAA;AAAuB;;AACnD,QAAMC,KAAK,GAAG,KAAKZ,iBAAL,CAAuBa,QAAvB,CAAgCf,OAAhC,CAAd;AACA,QAAMgB,gBAAgB,GAAG,KAAKd,iBAAL,CAAuBe,WAAvB,CAAmCjB,OAAnC,CAAzB;;AACA,QAAI,CAACgB,gBAAL,EAAuB;AACrB,aAAO,EAAP;AACD,KAFD,MAEO;AACL,UAAIE,cAAY,GAAGxB,8BAAcC,KAAjC;;AACA,UAAImB,KAAK,CAACK,IAAN,IAAc,IAAlB,EAAwB;AACtB;AACAD,sBAAY,GAAGA,cAAY,CAACE,GAAb,CAAiBC,YAAK1B,KAAtB,EAA6B,IAA7B,CAAf;AACD,OAHD,MAGO;AACL2B,uBAAQR,KAAK,CAACS,QAAd,EAAwB,UAASC,UAAT,EAA6BC,IAA7B,EAAuC;AAC7DP,wBAAY,GAAGA,cAAY,CAACE,GAAb,CAAiB,IAAIC,WAAJ,CAASG,UAAT,CAAjB,EAAuCC,IAAvC,CAAf;AACD,SAFD;AAGD;;AACD,aAAO,KAAKrB,2BAAL,CACL,IAAIsB,2BAAJ,CAAiBZ,KAAK,CAAChB,IAAvB,EAA6BoB,cAA7B,EAA2CL,MAA3C,CADK,CAAP;AAGD;AACF,GAnBD;AAqBA;;;;;;;;;AAOAhB,sDAAqBC,IAArB,EAAiCC,OAAjC,EAA8C;AAC5C,WAAO,KAAKK,2BAAL,CACL,IAAIC,qBAAJ,CAAcC,4BAAgBqB,MAA9B,EAAsC7B,IAAtC,EAA4CC,OAA5C,CADK,CAAP;AAGD,GAJD;AAMA;;;;;;;;;AAOAF,kDACEC,IADF,EAEEU,eAFF,EAEwC;AAEtC,QAAME,UAAU,GAAGhB,8BAAciB,UAAd,CAAyBH,eAAzB,CAAnB;AAEA,WAAO,KAAKJ,2BAAL,CACL,IAAIQ,aAAJ,CAAUN,4BAAgBqB,MAA1B,EAAkC7B,IAAlC,EAAwCY,UAAxC,CADK,CAAP;AAGD,GATD;AAWA;;;;;;;;AAMAb,qDAAoBC,IAApB,EAA8B;AAC5B,WAAO,KAAKM,2BAAL,CACL,IAAIwB,+BAAJ,CAAmBtB,4BAAgBqB,MAAnC,EAA2C7B,IAA3C,CADK,CAAP;AAGD,GAJD;AAMA;;;;;;;;;;AAQAD,2DAA0BC,IAA1B,EAAsCqB,IAAtC,EAAkDU,GAAlD,EAA6D;AAC3D,QAAMC,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,GAArB,CAAjB;;AACA,QAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAME,CAAC,GAAGnC,QAAQ,CAACoC,cAAT,CAAwBH,QAAxB,CAAV;AACA,UAAMI,SAAS,GAAGF,CAAC,CAAClC,IAApB;AAAA,UACEqC,OAAO,GAAGH,CAAC,CAACG,OADd;AAEA,UAAMC,YAAY,GAAGf,YAAKe,YAAL,CAAkBF,SAAlB,EAA6BpC,IAA7B,CAArB;AACA,UAAMuC,EAAE,GAAG,IAAIhC,qBAAJ,CACTC,4BAAgBgC,oBAAhB,CAAqCH,OAArC,CADS,EAETC,YAFS,EAGTjB,IAHS,CAAX;AAKA,aAAO,KAAKoB,qBAAL,CAA2BL,SAA3B,EAAsCG,EAAtC,CAAP;AACD,KAXD,MAWO;AACL;AACA,aAAO,EAAP;AACD;AACF,GAjBD;AAmBA;;;;;;;;;;AAQAxC,uDACEC,IADF,EAEEU,eAFF,EAGEqB,GAHF,EAGa;AAEX,QAAMC,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,GAArB,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZ,UAAME,CAAC,GAAGnC,QAAQ,CAACoC,cAAT,CAAwBH,QAAxB,CAAV;AACA,UAAMI,SAAS,GAAGF,CAAC,CAAClC,IAApB;AAAA,UACEqC,OAAO,GAAGH,CAAC,CAACG,OADd;AAEA,UAAMC,YAAY,GAAGf,YAAKe,YAAL,CAAkBF,SAAlB,EAA6BpC,IAA7B,CAArB;AACA,UAAMY,UAAU,GAAGhB,8BAAciB,UAAd,CAAyBH,eAAzB,CAAnB;AACA,UAAM6B,EAAE,GAAG,IAAIzB,aAAJ,CACTN,4BAAgBgC,oBAAhB,CAAqCH,OAArC,CADS,EAETC,YAFS,EAGT1B,UAHS,CAAX;AAKA,aAAO,KAAK6B,qBAAL,CAA2BL,SAA3B,EAAsCG,EAAtC,CAAP;AACD,KAZD,MAYO;AACL;AACA,aAAO,EAAP;AACD;AACF,GAtBD;AAwBA;;;;;;;;;AAOAxC,2DAA0BC,IAA1B,EAAsC+B,GAAtC,EAAiD;AAC/C,QAAMC,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,GAArB,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZ,UAAME,CAAC,GAAGnC,QAAQ,CAACoC,cAAT,CAAwBH,QAAxB,CAAV;AACA,UAAMI,SAAS,GAAGF,CAAC,CAAClC,IAApB;AAAA,UACEqC,OAAO,GAAGH,CAAC,CAACG,OADd;AAEA,UAAMC,YAAY,GAAGf,YAAKe,YAAL,CAAkBF,SAAlB,EAA6BpC,IAA7B,CAArB;AACA,UAAMuC,EAAE,GAAG,IAAIT,+BAAJ,CACTtB,4BAAgBgC,oBAAhB,CAAqCH,OAArC,CADS,EAETC,YAFS,CAAX;AAIA,aAAO,KAAKG,qBAAL,CAA2BL,SAA3B,EAAsCG,EAAtC,CAAP;AACD,KAVD,MAUO;AACL;AACA,aAAO,EAAP;AACD;AACF,GAhBD;AAkBA;;;;;;;;;AAOAxC,sDACE2C,KADF,EAEEC,iBAFF,EAEsC;AAEpC,QAAM3C,IAAI,GAAG0C,KAAK,CAAC1C,IAAnB;AAEA,QAAI4C,WAAW,GAAgB,IAA/B;AACA,QAAIC,wBAAwB,GAAG,KAA/B,CALoC,CAMpC;AACA;;AACA,SAAKC,cAAL,CAAoBC,aAApB,CAAkC/C,IAAlC,EAAwC,UAASgD,eAAT,EAA0BC,EAA1B,EAA4B;AAClE,UAAMX,YAAY,GAAGf,YAAKe,YAAL,CAAkBU,eAAlB,EAAmChD,IAAnC,CAArB;AACA4C,iBAAW,GAAGA,WAAW,IAAIK,EAAE,CAACC,sBAAH,CAA0BZ,YAA1B,CAA7B;AACAO,8BAAwB,GACtBA,wBAAwB,IAAII,EAAE,CAACE,eAAH,EAD9B;AAED,KALD;AAMA,QAAIC,SAAS,GAAG,KAAKN,cAAL,CAAoBO,GAApB,CAAwBrD,IAAxB,CAAhB;;AACA,QAAI,CAACoD,SAAL,EAAgB;AACdA,eAAS,GAAG,IAAIE,qBAAJ,EAAZ;AACA,WAAKR,cAAL,GAAsB,KAAKA,cAAL,CAAoBxB,GAApB,CAAwBtB,IAAxB,EAA8BoD,SAA9B,CAAtB;AACD,KAHD,MAGO;AACLP,8BAAwB,GACtBA,wBAAwB,IAAIO,SAAS,CAACD,eAAV,EAD9B;AAEAP,iBAAW,GAAGA,WAAW,IAAIQ,SAAS,CAACF,sBAAV,CAAiC3B,YAAK1B,KAAtC,CAA7B;AACD;;AAED,QAAI0D,mBAAJ;;AACA,QAAIX,WAAW,IAAI,IAAnB,EAAyB;AACvBW,yBAAmB,GAAG,IAAtB;AACD,KAFD,MAEO;AACLA,yBAAmB,GAAG,KAAtB;AACAX,iBAAW,GAAGY,4BAAaC,UAA3B;AACA,UAAMC,OAAO,GAAG,KAAKZ,cAAL,CAAoBY,OAApB,CAA4B1D,IAA5B,CAAhB;AACA0D,aAAO,CAACC,YAAR,CAAqB,UAASC,SAAT,EAAoBC,cAApB,EAAkC;AACrD,YAAMC,aAAa,GAAGD,cAAc,CAACX,sBAAf,CAAsC3B,YAAK1B,KAA3C,CAAtB;;AACA,YAAIiE,aAAJ,EAAmB;AACjBlB,qBAAW,GAAGA,WAAW,CAACmB,oBAAZ,CACZH,SADY,EAEZE,aAFY,CAAd;AAID;AACF,OARD;AASD;;AAED,QAAME,iBAAiB,GAAGZ,SAAS,CAACa,kBAAV,CAA6BvB,KAA7B,CAA1B;;AACA,QAAI,CAACsB,iBAAD,IAAsB,CAACtB,KAAK,CAACwB,cAAN,GAAuBC,YAAvB,EAA3B,EAAkE;AAChE;AACA,UAAMnC,QAAQ,GAAGjC,QAAQ,CAACqE,aAAT,CAAuB1B,KAAvB,CAAjB;AACA2B,oBACE,EAAErC,QAAQ,IAAI,KAAKsC,cAAnB,CADF,EAEE,wCAFF;AAIA,UAAMvC,GAAG,GAAGhC,QAAQ,CAACwE,gBAAT,EAAZ;AACA,WAAKD,cAAL,CAAoBtC,QAApB,IAAgCD,GAAhC,CARgE,CAShE;;AACA,WAAKyC,cAAL,CAAoB,MAAMzC,GAA1B,IAAiCC,QAAjC;AACD;;AACD,QAAMyC,WAAW,GAAG,KAAKrE,iBAAL,CAAuBsE,WAAvB,CAAmC1E,IAAnC,CAApB;AACA,QAAI2E,MAAM,GAAGvB,SAAS,CAACwB,oBAAV,CACXlC,KADW,EAEXC,iBAFW,EAGX8B,WAHW,EAIX7B,WAJW,EAKXW,mBALW,CAAb;;AAOA,QAAI,CAACS,iBAAD,IAAsB,CAACnB,wBAA3B,EAAqD;AACnD,UAAMgC;AAAK;AAAD,QAAsBzB,SAAS,CAAC0B,YAAV,CAAuBpC,KAAvB,CAAhC;AACAiC,YAAM,GAAGA,MAAM,CAACI,MAAP,CAAc,KAAKC,cAAL,CAAoBtC,KAApB,EAA2BmC,IAA3B,CAAd,CAAT;AACD;;AACD,WAAOF,MAAP;AACD,GAtED;AAwEA;;;;;;;;;;;;;AAWA5E,yDACE2C,KADF,EAEEC,iBAFF,EAGEsC,WAHF,EAGqB;AAHrB,qBAGqB,CAEnB;;;AACA,QAAMjF,IAAI,GAAG0C,KAAK,CAAC1C,IAAnB;AACA,QAAMkF,cAAc,GAAG,KAAKpC,cAAL,CAAoBO,GAApB,CAAwBrD,IAAxB,CAAvB;AACA,QAAImF,YAAY,GAAY,EAA5B,CALmB,CAMnB;AACA;AACA;;AACA,QACED,cAAc,KACbxC,KAAK,CAAC0C,eAAN,OAA4B,SAA5B,IACCF,cAAc,CAACjB,kBAAf,CAAkCvB,KAAlC,CAFY,CADhB,EAIE;AACA;;;AAGA,UAAM2C,gBAAgB,GAAGH,cAAc,CAACI,uBAAf,CACvB5C,KADuB,EAEvBC,iBAFuB,EAGvBsC,WAHuB,CAAzB;;AAKA,UAAIC,cAAc,CAACK,OAAf,EAAJ,EAA8B;AAC5B,aAAKzC,cAAL,GAAsB,KAAKA,cAAL,CAAoB0C,MAApB,CAA2BxF,IAA3B,CAAtB;AACD;;AACD,UAAMyF,OAAO,GAAGJ,gBAAgB,CAACI,OAAjC;AACAN,kBAAY,GAAGE,gBAAgB,CAACV,MAAhC,CAbA,CAcA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMe,eAAe,GACnB,CAAC,CAAD,KACAD,OAAO,CAACE,SAAR,CAAkB,UAASjD,KAAT,EAAc;AAC9B,eAAOA,KAAK,CAACwB,cAAN,GAAuBC,YAAvB,EAAP;AACD,OAFD,CAFF;AAKA,UAAMyB,OAAO,GAAG,KAAK9C,cAAL,CAAoB+C,UAApB,CAA+B7F,IAA/B,EAAqC,UACnDsC,YADmD,EAEnDwD,eAFmD,EAEpC;AAEf,eAAOA,eAAe,CAAC3C,eAAhB,EAAP;AACD,OALe,CAAhB;;AAOA,UAAIuC,eAAe,IAAI,CAACE,OAAxB,EAAiC;AAC/B,YAAMlC,OAAO,GAAG,KAAKZ,cAAL,CAAoBY,OAApB,CAA4B1D,IAA5B,CAAhB,CAD+B,CAE/B;AACA;;AACA,YAAI,CAAC0D,OAAO,CAAC6B,OAAR,EAAL,EAAwB;AACtB;AACA,cAAMQ,QAAQ,GAAG,KAAKC,+BAAL,CAAqCtC,OAArC,CAAjB,CAFsB,CAItB;;AACA,eAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACxC,gBAAMpB,IAAI,GAAGkB,QAAQ,CAACE,CAAD,CAArB;AAAA,gBACEE,QAAQ,GAAGtB,IAAI,CAACuB,QAAL,EADb;AAEA,gBAAMC,QAAQ,GAAG,KAAKC,sBAAL,CAA4BzB,IAA5B,CAAjB;AACA,iBAAKlF,eAAL,CAAqB4G,cAArB,CACExG,QAAQ,CAACyG,kBAAT,CAA4BL,QAA5B,CADF,EAEE,KAAKM,YAAL,CAAkBN,QAAlB,CAFF,EAGEE,QAAQ,CAACK,MAHX,EAIEL,QAAQ,CAACM,UAJX;AAMD;AACF,SAhBD,MAgBO,CACL;AACD;AACF,OAvDD,CAwDA;AACA;AACA;;;AACA,UAAI,CAACf,OAAD,IAAYH,OAAO,CAACS,MAAR,GAAiB,CAA7B,IAAkC,CAACjB,WAAvC,EAAoD;AAClD;AACA;AACA,YAAIS,eAAJ,EAAqB;AACnB;AACA,cAAMkB,UAAU,GAAkB,IAAlC;AACA,eAAKjH,eAAL,CAAqBkH,aAArB,CACE9G,QAAQ,CAACyG,kBAAT,CAA4B9D,KAA5B,CADF,EAEEkE,UAFF;AAID,SAPD,MAOO;AACLnB,iBAAO,CAACqB,OAAR,CAAgB,UAACC,aAAD,EAAqB;AACnC,gBAAMC,WAAW,GAAGC,KAAI,CAAC3C,cAAL,CAClBvE,QAAQ,CAACqE,aAAT,CAAuB2C,aAAvB,CADkB,CAApB;;AAGAE,iBAAI,CAACtH,eAAL,CAAqBkH,aAArB,CACE9G,QAAQ,CAACyG,kBAAT,CAA4BO,aAA5B,CADF,EAEEC,WAFF;AAID,WARD;AASD;AACF,OAhFD,CAiFA;;;AACA,WAAKE,WAAL,CAAiBzB,OAAjB;AACD,KAvFD,MAuFO,CACL;AACD;;AACD,WAAON,YAAP;AACD,GAvGD;AAyGA;;;;;;;;;;;AASApF,wDACEC,IADF,EAEEmH,iBAFF,EAE8B;AAE5B,QAAMC,iBAAiB,GAAG,IAA1B;AACA,QAAMC,SAAS,GAAG,KAAKjH,iBAAvB;AACA,QAAMwC,WAAW,GAAG,KAAKE,cAAL,CAAoB+C,UAApB,CAA+B7F,IAA/B,EAAqC,UACvDsH,SADuD,EAEvDlE,SAFuD,EAE9C;AAET,UAAMd,YAAY,GAAGf,YAAKe,YAAL,CAAkBgF,SAAlB,EAA6BtH,IAA7B,CAArB;AACA,UAAM4C,WAAW,GAAGQ,SAAS,CAACF,sBAAV,CAAiCZ,YAAjC,CAApB;;AACA,UAAIM,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;AACF,KATmB,CAApB;AAUA,WAAOyE,SAAS,CAACE,sBAAV,CACLvH,IADK,EAEL4C,WAFK,EAGLuE,iBAHK,EAILC,iBAJK,CAAP;AAMD,GAtBD;AAwBA;;;;;;;;;;AAQQrH,uDAAR,UACE2D,OADF,EACmC;AAEjC,WAAOA,OAAO,CAAC8D,IAAR,CACL,UAAClF,YAAD,EAAemF,mBAAf,EAAoCC,QAApC,EAA4C;AAC1C,UAAID,mBAAmB,IAAIA,mBAAmB,CAACtE,eAApB,EAA3B,EAAkE;AAChE,YAAMwE,YAAY,GAAGF,mBAAmB,CAACG,eAApB,EAArB;AACA,eAAO,CAACD,YAAD,CAAP;AACD,OAHD,MAGO;AACL;AACA,YAAIE,OAAK,GAAW,EAApB;;AACA,YAAIJ,mBAAJ,EAAyB;AACvBI,iBAAK,GAAGJ,mBAAmB,CAACK,aAApB,EAAR;AACD;;AACDtG,uBAAQkG,QAAR,EAAkB,UAASK,GAAT,EAAsBC,UAAtB,EAAwC;AACxDH,iBAAK,GAAGA,OAAK,CAAC9C,MAAN,CAAaiD,UAAb,CAAR;AACD,SAFD;AAGA,eAAOH,OAAP;AACD;AACF,KAhBI,CAAP;AAkBD,GArBO;AAuBR;;;;;;AAIQ9H,mCAAR,UAAoBkI,OAApB,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAAC/B,MAA5B,EAAoC,EAAEgC,CAAtC,EAAyC;AACvC,UAAMC,YAAY,GAAGF,OAAO,CAACC,CAAD,CAA5B;;AACA,UAAI,CAACC,YAAY,CAACjE,cAAb,GAA8BC,YAA9B,EAAL,EAAmD;AACjD;AACA,YAAMiE,eAAe,GAAGrI,QAAQ,CAACqE,aAAT,CAAuB+D,YAAvB,CAAxB;AACA,YAAME,eAAe,GAAG,KAAK/D,cAAL,CAAoB8D,eAApB,CAAxB;AACA,eAAO,KAAK9D,cAAL,CAAoB8D,eAApB,CAAP;AACA,eAAO,KAAK5D,cAAL,CAAoB,MAAM6D,eAA1B,CAAP;AACD;AACF;AACF,GAXO;AAaR;;;;;;;;AAMetI,gCAAf,UAAkC2C,KAAlC,EAA8C;AAC5C,QACEA,KAAK,CAACwB,cAAN,GAAuBC,YAAvB,MACA,CAACzB,KAAK,CAACwB,cAAN,GAAuBoE,SAAvB,EAFH,EAGE;AACA;AACA;AACA;AACA;AAAO;AAAsB5F,aAAK,CAAC6F,MAAN;AAA7B;AACD,KARD,MAQO;AACL,aAAO7F,KAAP;AACD;AACF,GAZc;AAcf;;;;;;;;;;AAQQ3C,sCAAR,UAAuB2C,KAAvB,EAAqCmC,IAArC,EAA+C;AAC7C,QAAM7E,IAAI,GAAG0C,KAAK,CAAC1C,IAAnB;AACA,QAAM+B,GAAG,GAAG,KAAK0E,YAAL,CAAkB/D,KAAlB,CAAZ;AACA,QAAM2D,QAAQ,GAAG,KAAKC,sBAAL,CAA4BzB,IAA5B,CAAjB;AAEA,QAAMF,MAAM,GAAG,KAAKhF,eAAL,CAAqB4G,cAArB,CACbxG,QAAQ,CAACyG,kBAAT,CAA4B9D,KAA5B,CADa,EAEbX,GAFa,EAGbsE,QAAQ,CAACK,MAHI,EAIbL,QAAQ,CAACM,UAJI,CAAf;AAOA,QAAMjD,OAAO,GAAG,KAAKZ,cAAL,CAAoBY,OAApB,CAA4B1D,IAA5B,CAAhB,CAZ6C,CAa7C;AACA;;AACA,QAAI+B,GAAJ,EAAS;AACPsC,oBACE,CAACX,OAAO,CAAC8E,KAAR,CAAcrF,eAAd,EADH,EAEE,mDAFF;AAID,KALD,MAKO;AACL;AACA,UAAMsF,aAAa,GAAG/E,OAAO,CAAC8D,IAAR,CAAsB,UAC1ClF,YAD0C,EAE1CmF,mBAF0C,EAG1CC,QAH0C,EAGlC;AAER,YACE,CAACpF,YAAY,CAACiD,OAAb,EAAD,IACAkC,mBADA,IAEAA,mBAAmB,CAACtE,eAApB,EAHF,EAIE;AACA,iBAAO,CAACsE,mBAAmB,CAACG,eAApB,GAAsCxB,QAAtC,EAAD,CAAP;AACD,SAND,MAMO;AACL;AACA,cAAIsC,SAAO,GAAY,EAAvB;;AACA,cAAIjB,mBAAJ,EAAyB;AACvBiB,qBAAO,GAAGA,SAAO,CAAC3D,MAAR,CACR0C,mBAAmB,CAACK,aAApB,GAAoCa,GAApC,CAAwC,gBAAI;AAAI,yBAAI,CAACvC,QAAL;AAAe,aAA/D,CADQ,CAAV;AAGD;;AACD5E,yBAAQkG,QAAR,EAAkB,UAASK,GAAT,EAAsBa,YAAtB,EAA2C;AAC3DF,qBAAO,GAAGA,SAAO,CAAC3D,MAAR,CAAe6D,YAAf,CAAV;AACD,WAFD;AAGA,iBAAOF,SAAP;AACD;AACF,OAxBqB,CAAtB;;AAyBA,WAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwC,aAAa,CAACvC,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,YAAM4C,WAAW,GAAGJ,aAAa,CAACxC,CAAD,CAAjC;AACA,aAAKtG,eAAL,CAAqBkH,aAArB,CACE9G,QAAQ,CAACyG,kBAAT,CAA4BqC,WAA5B,CADF,EAEE,KAAKpC,YAAL,CAAkBoC,WAAlB,CAFF;AAID;AACF;;AACD,WAAOlE,MAAP;AACD,GAxDO;AA0DR;;;;;;;;AAMQ5E,8CAAR,UACE8E,IADF,EACY;AADZ;;AAGE,QAAMnC,KAAK,GAAGmC,IAAI,CAACuB,QAAL,EAAd;AACA,QAAMrE,GAAG,GAAG,KAAK0E,YAAL,CAAkB/D,KAAlB,CAAZ;AAEA,WAAO;AACLgE,YAAM,EAAE;AACN,YAAMoC,KAAK,GAAGjE,IAAI,CAACkE,cAAL,MAAyBvF,4BAAaC,UAApD;AACA,eAAOqF,KAAK,CAACE,IAAN,EAAP;AACD,OAJI;AAKLrC,gBAAU,EAAE,UAACsC,MAAD,EAAe;AACzB,YAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,cAAIlH,GAAJ,EAAS;AACP,mBAAOkF,KAAI,CAACiC,yBAAL,CAA+BxG,KAAK,CAAC1C,IAArC,EAA2C+B,GAA3C,CAAP;AACD,WAFD,MAEO;AACL,mBAAOkF,KAAI,CAACkC,mBAAL,CAAyBzG,KAAK,CAAC1C,IAA/B,CAAP;AACD;AACF,SAND,MAMO;AACL;AACA;AACA,cAAMoJ,KAAK,GAAGC,0BAAmBJ,MAAnB,EAA2BvG,KAA3B,CAAd;AACA,iBAAOuE,KAAI,CAAC3B,uBAAL,CACL5C,KADK;AAEL;AAAsB,cAFjB,EAGL0G,KAHK,CAAP;AAKD;AACF;AAtBI,KAAP;AAwBD,GA9BO;AAgCR;;;;;;;;AAMerJ,2BAAf,UAA6B2C,KAA7B,EAAyC;AACvC,WAAOA,KAAK,CAAC1C,IAAN,CAAWsJ,QAAX,KAAwB,GAAxB,GAA8B5G,KAAK,CAAC0C,eAAN,EAArC;AACD,GAFc;AAIf;;;;;;;;AAMerF,4BAAf,UACEiC,QADF,EACkB;AAEhB,QAAMuH,UAAU,GAAGvH,QAAQ,CAACwH,OAAT,CAAiB,GAAjB,CAAnB;AACAnF,kBACEkF,UAAU,KAAK,CAAC,CAAhB,IAAqBA,UAAU,GAAGvH,QAAQ,CAACkE,MAAT,GAAkB,CADtD,EAEE,eAFF;AAIA,WAAO;AACL7D,aAAO,EAAEL,QAAQ,CAACyH,MAAT,CAAgBF,UAAU,GAAG,CAA7B,CADJ;AAELvJ,UAAI,EAAE,IAAIuB,WAAJ,CAASS,QAAQ,CAACyH,MAAT,CAAgB,CAAhB,EAAmBF,UAAnB,CAAT;AAFD,KAAP;AAID,GAZc;AAcf;;;;;;;;AAMQxJ,uCAAR,UAAwBgC,GAAxB,EAAmC;AACjC,WAAO,KAAKyC,cAAL,CAAoB,MAAMzC,GAA1B,CAAP;AACD,GAFO;AAIR;;;;;;;;AAMQhC,oCAAR,UAAqB2C,KAArB,EAAiC;AAC/B,QAAMV,QAAQ,GAAGjC,QAAQ,CAACqE,aAAT,CAAuB1B,KAAvB,CAAjB;AACA,WAAOlB,eAAQ,KAAK8C,cAAb,EAA6BtC,QAA7B,CAAP;AACD,GAHO;AAYR;;;;;;;AAKejC,8BAAf;AACE,WAAOA,QAAQ,CAAC2J,aAAT,EAAP;AACD,GAFc;AAIf;;;;;;;;;;AAQQ3J,6CAAR,UACEqC,SADF,EAEEuH,SAFF,EAEsB;AAEpB,QAAMvG,SAAS,GAAG,KAAKN,cAAL,CAAoBO,GAApB,CAAwBjB,SAAxB,CAAlB;AACAiC,kBAAOjB,SAAP,EAAkB,sDAAlB;AACA,QAAMqB,WAAW,GAAG,KAAKrE,iBAAL,CAAuBsE,WAAvB,CAAmCtC,SAAnC,CAApB;AACA,WAAOgB,SAAS,CAACwG,cAAV,CACLD,SADK,EAELlF,WAFK;AAGL;AAAiB,QAHZ,CAAP;AAKD,GAZO;AAcR;;;;;;;;;;;;;;;;;AAiBQ1E,mDAAR,UAAoC4J,SAApC,EAAwD;AACtD,WAAO,KAAKE,qBAAL,CACLF,SADK,EAEL,KAAK7G,cAFA;AAGL;AAAiB,QAHZ,EAIL,KAAK1C,iBAAL,CAAuBsE,WAAvB,CAAmCnD,YAAK1B,KAAxC,CAJK,CAAP;AAMD,GAPO;AASR;;;;;;;;;;;;AAUQE,6CAAR,UACE4J,SADF,EAEEG,aAFF,EAGElH,WAHF,EAIE6B,WAJF,EAI2B;AAEzB,QAAIkF,SAAS,CAAC3J,IAAV,CAAeuF,OAAf,EAAJ,EAA8B;AAC5B,aAAO,KAAKwE,gCAAL,CACLJ,SADK,EAELG,aAFK,EAGLlH,WAHK,EAIL6B,WAJK,CAAP;AAMD,KAPD,MAOO;AACL,UAAMrB,SAAS,GAAG0G,aAAa,CAACzG,GAAd,CAAkB9B,YAAK1B,KAAvB,CAAlB,CADK,CAGL;;AACA,UAAI+C,WAAW,IAAI,IAAf,IAAuBQ,SAAS,IAAI,IAAxC,EAA8C;AAC5CR,mBAAW,GAAGQ,SAAS,CAACF,sBAAV,CAAiC3B,YAAK1B,KAAtC,CAAd;AACD;;AAED,UAAI8E,MAAM,GAAY,EAAtB;AACA,UAAMf,SAAS,GAAG+F,SAAS,CAAC3J,IAAV,CAAegK,QAAf,EAAlB;AACA,UAAMC,cAAc,GAAGN,SAAS,CAACO,iBAAV,CAA4BtG,SAA5B,CAAvB;AACA,UAAMuG,SAAS,GAAGL,aAAa,CAACrI,QAAd,CAAuB4B,GAAvB,CAA2BO,SAA3B,CAAlB;;AACA,UAAIuG,SAAS,IAAIF,cAAjB,EAAiC;AAC/B,YAAMG,gBAAgB,GAAGxH,WAAW,GAChCA,WAAW,CAACyH,iBAAZ,CAA8BzG,SAA9B,CADgC,GAEhC,IAFJ;AAGA,YAAM0G,gBAAgB,GAAG7F,WAAW,CAAC8F,KAAZ,CAAkB3G,SAAlB,CAAzB;AACAe,cAAM,GAAGA,MAAM,CAACI,MAAP,CACP,KAAK8E,qBAAL,CACEI,cADF,EAEEE,SAFF,EAGEC,gBAHF,EAIEE,gBAJF,CADO,CAAT;AAQD;;AAED,UAAIlH,SAAJ,EAAe;AACbuB,cAAM,GAAGA,MAAM,CAACI,MAAP,CACP3B,SAAS,CAACwG,cAAV,CAAyBD,SAAzB,EAAoClF,WAApC,EAAiD7B,WAAjD,CADO,CAAT;AAGD;;AAED,aAAO+B,MAAP;AACD;AACF,GAhDO;AAkDR;;;;;;;;;;;;AAUQ5E,wDAAR,UACE4J,SADF,EAEEG,aAFF,EAGElH,WAHF,EAIE6B,WAJF,EAI2B;AAJ3B;;AAME,QAAMrB,SAAS,GAAG0G,aAAa,CAACzG,GAAd,CAAkB9B,YAAK1B,KAAvB,CAAlB,CAFyB,CAIzB;;AACA,QAAI+C,WAAW,IAAI,IAAf,IAAuBQ,SAAS,IAAI,IAAxC,EAA8C;AAC5CR,iBAAW,GAAGQ,SAAS,CAACF,sBAAV,CAAiC3B,YAAK1B,KAAtC,CAAd;AACD;;AAED,QAAI8E,MAAM,GAAY,EAAtB;AACAmF,iBAAa,CAACrI,QAAd,CAAuB+I,gBAAvB,CAAwC,UAAC5G,SAAD,EAAYuG,SAAZ,EAAqB;AAC3D,UAAMC,gBAAgB,GAAGxH,WAAW,GAChCA,WAAW,CAACyH,iBAAZ,CAA8BzG,SAA9B,CADgC,GAEhC,IAFJ;AAGA,UAAM0G,gBAAgB,GAAG7F,WAAW,CAAC8F,KAAZ,CAAkB3G,SAAlB,CAAzB;AACA,UAAMqG,cAAc,GAAGN,SAAS,CAACO,iBAAV,CAA4BtG,SAA5B,CAAvB;;AACA,UAAIqG,cAAJ,EAAoB;AAClBtF,cAAM,GAAGA,MAAM,CAACI,MAAP,CACPkC,KAAI,CAAC8C,gCAAL,CACEE,cADF,EAEEE,SAFF,EAGEC,gBAHF,EAIEE,gBAJF,CADO,CAAT;AAQD;AACF,KAhBD;;AAkBA,QAAIlH,SAAJ,EAAe;AACbuB,YAAM,GAAGA,MAAM,CAACI,MAAP,CACP3B,SAAS,CAACwG,cAAV,CAAyBD,SAAzB,EAAoClF,WAApC,EAAiD7B,WAAjD,CADO,CAAT;AAGD;;AAED,WAAO+B,MAAP;AACD,GAvCO;AAtIR;;;;;;;AAKe5E,2BAAgB,CAAhB;AAyKjB;AAt1BA;;AAAa0K","names":["listenProvider_","ImmutableTree_1","Empty","WriteTree_1","SyncTree","path","newData","writeId","visible","pendingWriteTree_","addOverwrite","applyOperationToSyncPoints_","Overwrite_1","Operation_1","User","changedChildren","addMerge","changeTree","fromObject","Merge_1","revert","write","getWrite","needToReevaluate","removeWrite","affectedTree_1","snap","set","Path_1","util_3","children","pathString","node","AckUserWrite_1","Server","ListenComplete_1","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","queryId","relativePath","op","forServerTaggedQuery","applyTaggedOperation_","query","eventRegistration","serverCache","foundAncestorDefaultView","syncPointTree_","foreachOnPath","pathToSyncPoint","sp","getCompleteServerCache","hasCompleteView","syncPoint","get","SyncPoint_1","serverCacheComplete","ChildrenNode_1","EMPTY_NODE","subtree","foreachChild","childName","childSyncPoint","completeCache","updateImmediateChild","viewAlreadyExists","viewExistsForQuery","getQueryParams","loadsAllData","makeQueryKey_","util_1","queryToTagMap_","getNextQueryTag_","tagToQueryMap_","writesCache","childWrites","events","addEventRegistration","view","viewForQuery","concat","setupListener_","cancelError","maybeSyncPoint","cancelEvents","queryIdentifier","removedAndEvents","removeEventRegistration","isEmpty","remove","removed","removingDefault","findIndex","covered","findOnPath","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","i","length","newQuery","getQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","onComplete","defaultTag","stopListening","forEach","queryToRemove","tagToRemove","_this","removeTags_","writeIdsToExclude","includeHiddenSets","writeTree","pathSoFar","calcCompleteEventCache","fold","maybeChildSyncPoint","childMap","completeView","getCompleteView","views_1","getQueryViews","key","childViews","queries","j","removedQuery","removedQueryKey","removedQueryTag","isDefault","getRef","value","queriesToStop","queries_1","map","childQueries","queryToStop","cache","getServerCache","hash","status","applyTaggedListenComplete","applyListenComplete","error","util_2","toString","splitIndex","indexOf","substr","nextQueryTag_","operation","applyOperation","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","getFront","childOperation","operationForChild","childTree","childServerCache","getImmediateChild","childWritesCache","child","inorderTraversal","exports"],"sources":["../src/core/SyncTree.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { forEach, safeGet } from '@firebase/util';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: any) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   * @type {!ImmutableTree.<!SyncPoint>}\n   * @private\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   * @type {!WriteTree}\n   * @private\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private tagToQueryMap_: { [k: string]: string } = {};\n  private queryToTagMap_: { [k: string]: number } = {};\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @param {number} writeId\n   * @param {boolean=} visible\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param {!number} writeId\n   * @param {boolean=} revert True if the given write failed and needs to be reverted\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        forEach(write.children, function(pathString: string, node: Node) {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @param {!Path} path\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @param {!Path} path\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function(childName, childSyncPoint) {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !(queryKey in this.queryToTagMap_),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap_[queryKey] = tag;\n      // Coerce to string to avoid sparse arrays.\n      this.tagToQueryMap_['_' + tag] = queryKey;\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(function(query) {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(path, function(\n        relativePath,\n        parentSyncPoint\n      ) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap_[\n              SyncTree.makeQueryKey_(queryToRemove)\n            ];\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   * @param {!Path} path The path to the data we want\n   * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    path: Path,\n    writeIdsToExclude?: number[]\n  ): Node | null {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(path, function(\n      pathSoFar,\n      syncPoint\n    ) {\n      const relativePath = Path.relativePath(pathSoFar, path);\n      const serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   *\n   * @param {!ImmutableTree.<!SyncPoint>} subtree\n   * @return {!Array.<!View>}\n   * @private\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          forEach(childMap, function(key: string, childViews: View[]) {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  /**\n   * @param {!Array.<!Query>} queries\n   * @private\n   */\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap_[removedQueryKey];\n        delete this.queryToTagMap_[removedQueryKey];\n        delete this.tagToQueryMap_['_' + removedQueryTag];\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   * @param {!Query} query\n   * @return {!Query} The normalized query\n   * @private\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return /** @type {!Query} */ query.getRef();\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @param {!Query} query\n   * @param {!View} view\n   * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n   * @private\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(function(\n        relativePath,\n        maybeChildSyncPoint,\n        childMap\n      ) {\n        if (\n          !relativePath.isEmpty() &&\n          maybeChildSyncPoint &&\n          maybeChildSyncPoint.hasCompleteView()\n        ) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: Query[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n            );\n          }\n          forEach(childMap, function(key: string, childQueries: Query[]) {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      });\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  /**\n   *\n   * @param {!View} view\n   * @return {{hashFn: function(), onComplete: function(!string, *)}}\n   * @private\n   */\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: any): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   * @private\n   * @param {!Query} query\n   * @return {string}\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   * @private\n   * @param {!string} queryKey\n   * @return {{queryId: !string, path: !Path}}\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   * @param {!number} tag\n   * @return {?string}\n   * @private\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap_['_' + tag];\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   * @param {!Query} query\n   * @return {?number}\n   * @private\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return safeGet(this.queryToTagMap_, queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   * @type {number}\n   * @private\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   * @return {number}\n   * @private\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   *\n   * @param {!Path} queryPath\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   *\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}