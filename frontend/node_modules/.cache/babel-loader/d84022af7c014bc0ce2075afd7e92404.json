{"ast":null,"code":"import * as type from './type';\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param var_args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nexport function getBlob() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n\n    for (var i = 0; i < var_args.length; i++) {\n      bb.append(var_args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(var_args);\n    } else {\n      throw Error(\"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\nexport function sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"AAqBA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;;AAMA;AACE,MAAI,OAAOC,WAAP,KAAuB,WAA3B,EAAwC;AACtC,WAAOA,WAAP;AACD,GAFD,MAEO,IAAI,OAAOC,iBAAP,KAA6B,WAAjC,EAA8C;AACnD,WAAOA,iBAAP;AACD,GAFM,MAEA;AACL,WAAOC,SAAP;AACD;AACF;AAED;;;;;;;;AAMA,OAAM;AAAkB;;OAAA,yCAA4C;AAA5CC;;;AACtB,MAAIH,WAAW,GAAGI,cAAc,EAAhC;;AACA,MAAIJ,WAAW,KAAKE,SAApB,EAA+B;AAC7B,QAAIG,EAAE,GAAG,IAAIL,WAAJ,EAAT;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCD,QAAE,CAACG,MAAH,CAAUL,QAAQ,CAACG,CAAD,CAAlB;AACD;;AACD,WAAOD,EAAE,CAACI,OAAH,EAAP;AACD,GAND,MAMO;AACL,QAAIV,IAAI,CAACW,mBAAL,EAAJ,EAAgC;AAC9B,aAAO,IAAIC,IAAJ,CAASR,QAAT,CAAP;AACD,KAFD,MAEO;AACL,YAAMS,KAAK,CAAC,qDAAD,CAAX;AACD;AACF;AACF;AAED;;;;;;;;;;AASA,OAAM,mBAAoBC,IAApB,EAAgCC,KAAhC,EAA+CC,GAA/C,EAA0D;AAC9D,MAAKF,IAAY,CAACG,WAAlB,EAA+B;AAC7B,WAAQH,IAAY,CAACG,WAAb,CAAyBF,KAAzB,EAAgCC,GAAhC,CAAR;AACD,GAFD,MAEO,IAAKF,IAAY,CAACI,QAAlB,EAA4B;AACjC,WAAQJ,IAAY,CAACI,QAAb,CAAsBH,KAAtB,EAA6BC,GAA7B,CAAR;AACD,GAFM,MAEA,IAAIF,IAAI,CAACK,KAAT,EAAgB;AACrB,WAAOL,IAAI,CAACK,KAAL,CAAWJ,KAAX,EAAkBC,GAAlB,CAAP;AACD;;AACD,SAAO,IAAP;AACD","names":["type","BlobBuilder","WebKitBlobBuilder","undefined","var_args","getBlobBuilder","bb","i","length","append","getBlob","isNativeBlobDefined","Blob","Error","blob","start","end","webkitSlice","mozSlice","slice"],"sources":["../src/implementation/fs.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as array from './array';\nimport * as type from './type';\n\ndeclare var IBlobBuilder;\ndeclare var BlobBuilder;\ndeclare var WebKitBlobBuilder;\n\nfunction getBlobBuilder(): (typeof IBlobBuilder) | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param var_args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...var_args: (string | Blob | ArrayBuffer)[]): Blob {\n  let BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    let bb = new BlobBuilder();\n    for (let i = 0; i < var_args.length; i++) {\n      bb.append(var_args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(var_args);\n    } else {\n      throw Error(\"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if ((blob as any).webkitSlice) {\n    return (blob as any).webkitSlice(start, end);\n  } else if ((blob as any).mozSlice) {\n    return (blob as any).mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}