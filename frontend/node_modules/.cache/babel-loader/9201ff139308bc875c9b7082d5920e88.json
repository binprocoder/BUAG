{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"../util/util\");\n\nvar util_3 = require(\"@firebase/util\");\n\nvar MAX_NODE;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n\nexports.setMaxNode = setMaxNode;\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\n\nexports.priorityHashText = function (priority) {\n  if (typeof priority === 'number') return 'number:' + util_2.doubleToIEEE754String(priority);else return 'string:' + priority;\n};\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\n\n\nexports.validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    util_1.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util_3.contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    util_1.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  util_1.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AAGA,IAAIA,QAAJ;;AAEA,oBAA2BC,GAA3B,EAAoC;AAClCD,UAAQ,GAAGC,GAAX;AACD;;AAFDC;AAIA;;;;;AAIaA,2BAAmB,UAASC,QAAT,EAAkC;AAChE,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EACE,OAAO,YAAYC,6BAAsBD,QAAtB,CAAnB,CADF,KAEK,OAAO,YAAYA,QAAnB;AACN,CAJY;AAMb;;;;;;;AAKaD,+BAAuB,UAASG,YAAT,EAA2B;AAC7D,MAAIA,YAAY,CAACC,UAAb,EAAJ,EAA+B;AAC7B,QAAML,GAAG,GAAGI,YAAY,CAACJ,GAAb,EAAZ;AACAM,kBACE,OAAON,GAAP,KAAe,QAAf,IACE,OAAOA,GAAP,KAAe,QADjB,IAEG,OAAOA,GAAP,KAAe,QAAf,IAA2BO,gBAASP,GAAT,EAAc,KAAd,CAHhC,EAIE,sCAJF;AAMD,GARD,MAQO;AACLM,kBACEF,YAAY,KAAKL,QAAjB,IAA6BK,YAAY,CAACI,OAAb,EAD/B,EAEE,8BAFF;AAID,GAd4D,CAe7D;;;AACAF,gBACEF,YAAY,KAAKL,QAAjB,IAA6BK,YAAY,CAACK,WAAb,GAA2BD,OAA3B,EAD/B,EAEE,oDAFF;AAID,CApBY","names":["MAX_NODE","val","exports","priority","util_2","priorityNode","isLeafNode","util_1","util_3","isEmpty","getPriority"],"sources":["../src/core/snap/snap.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\nimport { contains } from '@firebase/util';\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number')\n    return 'number:' + doubleToIEEE754String(priority);\n  else return 'string:' + priority;\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n"]},"metadata":{},"sourceType":"script"}