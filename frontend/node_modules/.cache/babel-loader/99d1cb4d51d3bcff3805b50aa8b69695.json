{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\n\nvar NetworkXhrIo =\n/** @class */\nfunction () {\n  function NetworkXhrIo() {\n    var _this = this;\n\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make(function (resolve, reject) {\n      _this.xhr_.addEventListener('abort', function (event) {\n        _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('error', function (event) {\n        _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('load', function (event) {\n        resolve(_this);\n      });\n    });\n  }\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {\n    var _this = this;\n\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (type.isDef(opt_headers)) {\n      var headers = opt_headers;\n      object.forEach(headers, function (key, val) {\n        _this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getResponseText() before sending');\n    }\n\n    return this.xhr_.responseText;\n  };\n  /**\n   * Aborts the request.\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\n   * @override\n   */\n\n\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n\n  return NetworkXhrIo;\n}();\n\nexport { NetworkXhrIo };","map":{"version":3,"mappings":"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","names":["errorsExports","object","promiseimpl","type","XhrIoExports","xhr_","XMLHttpRequest","errorCode_","ErrorCode","NO_ERROR","sendPromise_","make","resolve","reject","_this","addEventListener","ABORT","NETWORK_ERROR","NetworkXhrIo","url","method","opt_body","opt_headers","sent_","internalError","open","isDef","headers","forEach","key","val","setRequestHeader","toString","send","status","e","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener"],"sources":["../src/implementation/xhrio_network.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: XhrIoExports.ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make((resolve, reject) => {\n      this.xhr_.addEventListener('abort', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', event => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    opt_body?: ArrayBufferView | Blob | string | null,\n    opt_headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (type.isDef(opt_headers)) {\n      const headers = opt_headers as Headers;\n      object.forEach(headers, (key, val) => {\n        this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): XhrIoExports.ErrorCode {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getErrorCode() before sending'\n      );\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getResponseText() before sending'\n      );\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort() {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}