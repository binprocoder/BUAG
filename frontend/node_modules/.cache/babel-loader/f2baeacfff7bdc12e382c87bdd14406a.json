{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"../core/util/util\");\n\nvar parser_1 = require(\"../core/util/libs/parser\");\n\nvar Path_1 = require(\"../core/util/Path\");\n\nvar Reference_1 = require(\"./Reference\");\n\nvar Repo_1 = require(\"../core/Repo\");\n\nvar RepoManager_1 = require(\"../core/RepoManager\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar validation_1 = require(\"../core/util/validation\");\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n\n    if (!(repo_ instanceof Repo_1.Repo)) {\n      util_1.fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n\n\n    this.root_ = new Reference_1.Reference(repo_, Path_1.Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function () {\n      return this.repo_.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns a reference to the root or the path specified in opt_pathString.\n   * @param {string=} pathString\n   * @return {!Reference} Firebase reference.\n   */\n\n  Database.prototype.ref = function (pathString) {\n    this.checkDeleted_('ref');\n    util_2.validateArgCount('database.ref', 0, 1, arguments.length);\n    return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n  };\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util_2.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parser_1.parseRepoInfo(url);\n    validation_1.validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      util_1.fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\n   * @param {string} apiName\n   */\n\n\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      util_1.fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    util_2.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n\n  Database.prototype.goOnline = function () {\n    util_2.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n  return Database;\n}();\n\nexports.Database = Database;\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    this.database.checkDeleted_('delete');\n    RepoManager_1.RepoManager.getInstance().deleteRepo(this.database.repo_);\n    this.database.repo_ = null;\n    this.database.root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n    return Promise.resolve();\n  };\n\n  return DatabaseInternals;\n}();\n\nexports.DatabaseInternals = DatabaseInternals;","map":{"version":3,"mappings":"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","names":["repo_","Repo_1","util_1","root_","Reference_1","Path_1","Empty","INTERNAL","DatabaseInternals","Object","Database","app","pathString","checkDeleted_","util_2","arguments","length","undefined","child","url","apiName","parsedURL","parser_1","validation_1","repoInfo","host","repoInfo_","ref","path","toString","interrupt","resume","TIMESTAMP","exports","database","RepoManager_1","getInstance","deleteRepo","Promise","resolve"],"sources":["../src/api/Database.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp, FirebaseService } from '@firebase/app';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in opt_pathString.\n   * @param {string=} pathString\n   * @return {!Reference} Firebase reference.\n   */\n  ref(pathString?: string): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n    return Promise.resolve();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}