{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IndexedFilter_1 = require(\"./filter/IndexedFilter\");\n\nvar ViewProcessor_1 = require(\"./ViewProcessor\");\n\nvar ChildrenNode_1 = require(\"../snap/ChildrenNode\");\n\nvar CacheNode_1 = require(\"./CacheNode\");\n\nvar ViewCache_1 = require(\"./ViewCache\");\n\nvar EventGenerator_1 = require(\"./EventGenerator\");\n\nvar util_1 = require(\"@firebase/util\");\n\nvar Operation_1 = require(\"../operation/Operation\");\n\nvar Change_1 = require(\"./Change\");\n\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter_1.IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n\n    this.processor_ = new ViewProcessor_1.ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache(); // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode_1.CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode_1.CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n\n    this.viewCache_ = new ViewCache_1.ViewCache(newEventCache, newServerCache);\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n\n    this.eventGenerator_ = new EventGenerator_1.EventGenerator(this.query_);\n  }\n  /**\n   * @return {!Query}\n   */\n\n\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\n   * @return {?Node}\n   */\n\n\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n\n\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @return {boolean}\n   */\n\n\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n\n\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n\n\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n\n    if (cancelError) {\n      util_1.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError\n        /** @type {!Error} */\n        = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      var remaining = [];\n\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n\n    return cancelEvents;\n  };\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n\n\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === Operation_1.OperationType.MERGE && operation.source.queryId !== null) {\n      util_1.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      util_1.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    util_1.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n\n\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change_1.Change.childAddedChange(key, childNode));\n      });\n    }\n\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change_1.Change.valueChange(eventSnap.getNode()));\n    }\n\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n\n\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n\n  return View;\n}();\n\nexports.View = View;","map":{"version":3,"mappings":"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","names":["query_","initialViewCache","params","getQueryParams","indexFilter","IndexedFilter_1","getIndex","filter","getNodeFilter","processor_","ViewProcessor_1","initialServerCache","getServerCache","initialEventCache","getEventCache","serverSnap","updateFullNode","ChildrenNode_1","EMPTY_NODE","getNode","eventSnap","newServerCache","CacheNode_1","isFullyInitialized","filtersNodes","newEventCache","viewCache_","ViewCache_1","eventGenerator_","EventGenerator_1","View","path","cache","getCompleteServerSnap","loadsAllData","isEmpty","getImmediateChild","getFront","getChild","eventRegistrations_","length","eventRegistration","push","cancelError","cancelEvents","util_1","path_1","forEach","registration","maybeEvent","createCancelEvent","remaining","i","existing","matches","hasAnyCallback","concat","slice","operation","writesCache","completeServerCache","type","Operation_1","MERGE","source","queryId","getCompleteEventSnap","oldViewCache","result","applyOperation","assertIndexed","viewCache","generateEventsForChanges_","changes","initialChanges","isLeafNode","eventNode","forEachChild","PriorityIndex_1","key","childNode","Change_1","childAddedChange","valueChange","eventCache","registrations","generateEventsForChanges","exports"],"sources":["../src/core/view/View.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(function(registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}