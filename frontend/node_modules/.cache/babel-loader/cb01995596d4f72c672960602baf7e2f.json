{"ast":null,"code":"'use strict';\n\nmodule.exports = Models;\n\nconst isArray = require('lodash/isArray');\n\nconst isString = require('lodash/isString');\n\nconst isPlainObject = require('lodash/isPlainObject');\n\nconst includes = require('lodash/includes');\n\nconst defaults = require('lodash/defaults');\n\nconst cloneDeep = require('lodash/cloneDeep');\n\nconst request = require('./request').request;\n\nconst chain_requests = require('./request').chain_requests;\n\nconst MonkeyLearnError = require('./monkeylearn-error'); // base class for endpoints that are in extractors, classifiers and workflows\n\n\nfunction Models(ml, base_url) {\n  this.ml = ml;\n  this.base_url = base_url;\n\n  if (includes(base_url, 'classifiers')) {\n    this.run_action = 'classify';\n  } else if (includes(base_url, 'extractors')) {\n    this.run_action = 'extract';\n  } else {\n    this.run_action = undefined;\n  }\n}\n\nModels.prototype.run = function (model_id, data, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    if (!isArray(data)) {\n      throw new MonkeyLearnError('', null, `A ${this.run_action} data array is required.`);\n    }\n\n    params = params || {};\n\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'Extra parameters must be passed as a plain object.');\n    }\n\n    let batches = [];\n\n    if (this.ml.settings.auto_batch) {\n      for (let ii = 0; ii < data.length; ii += this.ml.settings.batch_size) {\n        // keep all the params except the data list, which will get overloaded\n        let batch = cloneDeep(params);\n        batch.data = data.slice(ii, ii + this.ml.settings.batch_size);\n        batches.push(batch);\n      }\n    } else {\n      batches = [params];\n    }\n\n    resolve(batches);\n  }).then(chain_requests(this.ml, `${this.base_url}${model_id}/${this.run_action}/`));\n};\n\nModels.prototype.detail = function (model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}${model_id}/`,\n    method: 'GET'\n  }));\n};\n\nModels.prototype.list = function (params) {\n  return new Promise((resolve, reject) => {\n    params = params || {};\n    defaults(params, {\n      page: 1,\n      per_page: 20,\n      order_by: '-created'\n    });\n\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'Query parameters must be passed as a plain object.');\n    }\n\n    resolve();\n  }).then(_ => request(this.ml, {\n    url: `${this.base_url}`,\n    method: 'GET',\n    query_params: params\n  }));\n};","map":{"version":3,"sources":["D:/Download/BUAG-tienPush/frontend/node_modules/monkeylearn/lib/models.js"],"names":["module","exports","Models","isArray","require","isString","isPlainObject","includes","defaults","cloneDeep","request","chain_requests","MonkeyLearnError","ml","base_url","run_action","undefined","prototype","run","model_id","data","params","Promise","resolve","reject","batches","settings","auto_batch","ii","length","batch_size","batch","slice","push","then","detail","_","url","method","list","page","per_page","order_by","query_params"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;;AAGA,MAAMC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,sBAAD,CAA7B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAzB;;AAEA,MAAMM,OAAO,GAAGN,OAAO,CAAC,WAAD,CAAP,CAAqBM,OAArC;;AACA,MAAMC,cAAc,GAAGP,OAAO,CAAC,WAAD,CAAP,CAAqBO,cAA5C;;AACA,MAAMC,gBAAgB,GAAGR,OAAO,CAAC,qBAAD,CAAhC,C,CAGA;;;AACA,SAASF,MAAT,CAAgBW,EAAhB,EAAoBC,QAApB,EAA8B;AAC5B,OAAKD,EAAL,GAAUA,EAAV;AACA,OAAKC,QAAL,GAAgBA,QAAhB;;AAEA,MAAIP,QAAQ,CAACO,QAAD,EAAW,aAAX,CAAZ,EAAuC;AACrC,SAAKC,UAAL,GAAkB,UAAlB;AACD,GAFD,MAEO,IAAIR,QAAQ,CAACO,QAAD,EAAW,YAAX,CAAZ,EAAsC;AAC3C,SAAKC,UAAL,GAAkB,SAAlB;AACD,GAFM,MAEA;AACL,SAAKA,UAAL,GAAkBC,SAAlB;AACD;AACF;;AAEDd,MAAM,CAACe,SAAP,CAAiBC,GAAjB,GAAuB,UAASC,QAAT,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;AACtD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAI,CAACnB,QAAQ,CAACc,QAAD,CAAb,EAAyB;AACvB,YAAM,IAAIP,gBAAJ,CAAqB,EAArB,EAAyB,IAAzB,EAA+B,gCAA/B,CAAN;AACD;;AACD,QAAI,CAACT,OAAO,CAACiB,IAAD,CAAZ,EAAmB;AACjB,YAAM,IAAIR,gBAAJ,CAAqB,EAArB,EAAyB,IAAzB,EAAgC,KAAI,KAAKG,UAAW,0BAApD,CAAN;AACD;;AAEDM,IAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,QAAI,CAACf,aAAa,CAACe,MAAD,CAAlB,EAA4B;AAC1B,YAAM,IAAIT,gBAAJ,CAAqB,EAArB,EAAyB,IAAzB,EAA+B,oDAA/B,CAAN;AACD;;AAED,QAAIa,OAAO,GAAG,EAAd;;AACA,QAAI,KAAKZ,EAAL,CAAQa,QAAR,CAAiBC,UAArB,EAAiC;AAC/B,WAAK,IAAIC,EAAE,GAAC,CAAZ,EAAeA,EAAE,GAAGR,IAAI,CAACS,MAAzB,EAAiCD,EAAE,IAAE,KAAKf,EAAL,CAAQa,QAAR,CAAiBI,UAAtD,EAAkE;AAChE;AACA,YAAIC,KAAK,GAAGtB,SAAS,CAACY,MAAD,CAArB;AACAU,QAAAA,KAAK,CAACX,IAAN,GAAaA,IAAI,CAACY,KAAL,CAAWJ,EAAX,EAAeA,EAAE,GAAC,KAAKf,EAAL,CAAQa,QAAR,CAAiBI,UAAnC,CAAb;AACAL,QAAAA,OAAO,CAACQ,IAAR,CAAaF,KAAb;AACD;AACF,KAPD,MAOO;AACLN,MAAAA,OAAO,GAAG,CAACJ,MAAD,CAAV;AACD;;AAEDE,IAAAA,OAAO,CAACE,OAAD,CAAP;AACD,GA1BM,EA4BNS,IA5BM,CA4BDvB,cAAc,CAAC,KAAKE,EAAN,EAAW,GAAE,KAAKC,QAAS,GAAEK,QAAS,IAAG,KAAKJ,UAAW,GAAzD,CA5Bb,CAAP;AA6BD,CA9BD;;AAiCAb,MAAM,CAACe,SAAP,CAAiBkB,MAAjB,GAA0B,UAAShB,QAAT,EAAmB;AAC3C,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAI,CAACnB,QAAQ,CAACc,QAAD,CAAb,EAAyB;AACvB,YAAM,IAAIP,gBAAJ,CAAqB,EAArB,EAAyB,IAAzB,EAA+B,gCAA/B,CAAN;AACD;;AACDW,IAAAA,OAAO;AACR,GALM,EAONW,IAPM,CAODE,CAAC,IACL1B,OAAO,CAAC,KAAKG,EAAN,EAAU;AACfwB,IAAAA,GAAG,EAAG,GAAE,KAAKvB,QAAS,GAAEK,QAAS,GADlB;AAEfmB,IAAAA,MAAM,EAAE;AAFO,GAAV,CARF,CAAP;AAaD,CAdD;;AAgBApC,MAAM,CAACe,SAAP,CAAiBsB,IAAjB,GAAwB,UAASlB,MAAT,EAAiB;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACAb,IAAAA,QAAQ,CAACa,MAAD,EAAS;AACfmB,MAAAA,IAAI,EAAE,CADS;AAEfC,MAAAA,QAAQ,EAAE,EAFK;AAGfC,MAAAA,QAAQ,EAAE;AAHK,KAAT,CAAR;;AAKA,QAAI,CAACpC,aAAa,CAACe,MAAD,CAAlB,EAA4B;AAC1B,YAAM,IAAIT,gBAAJ,CAAqB,EAArB,EAAyB,IAAzB,EAA+B,oDAA/B,CAAN;AACD;;AACDW,IAAAA,OAAO;AACR,GAXM,EAaNW,IAbM,CAaDE,CAAC,IACL1B,OAAO,CAAC,KAAKG,EAAN,EAAU;AACfwB,IAAAA,GAAG,EAAG,GAAE,KAAKvB,QAAS,EADP;AAEfwB,IAAAA,MAAM,EAAE,KAFO;AAGfK,IAAAA,YAAY,EAAEtB;AAHC,GAAV,CAdF,CAAP;AAoBD,CArBD","sourcesContent":["'use strict';\n\nmodule.exports = Models;\n\n\nconst isArray = require('lodash/isArray');\nconst isString = require('lodash/isString');\nconst isPlainObject = require('lodash/isPlainObject');\nconst includes = require('lodash/includes');\nconst defaults = require('lodash/defaults');\nconst cloneDeep = require('lodash/cloneDeep');\n\nconst request = require('./request').request;\nconst chain_requests = require('./request').chain_requests;\nconst MonkeyLearnError = require('./monkeylearn-error');\n\n\n// base class for endpoints that are in extractors, classifiers and workflows\nfunction Models(ml, base_url) {\n  this.ml = ml;\n  this.base_url = base_url;\n\n  if (includes(base_url, 'classifiers')) {\n    this.run_action = 'classify';\n  } else if (includes(base_url, 'extractors')) {\n    this.run_action = 'extract';\n  } else {\n    this.run_action = undefined;\n  }\n}\n\nModels.prototype.run = function(model_id, data, params) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    if (!isArray(data)){\n      throw new MonkeyLearnError('', null, `A ${this.run_action} data array is required.`);\n    }\n\n    params = params || {};\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'Extra parameters must be passed as a plain object.');\n    }\n\n    let batches = [];\n    if (this.ml.settings.auto_batch) {\n      for (let ii=0; ii < data.length; ii+=this.ml.settings.batch_size) {\n        // keep all the params except the data list, which will get overloaded\n        let batch = cloneDeep(params);\n        batch.data = data.slice(ii, ii+this.ml.settings.batch_size);\n        batches.push(batch)\n      }\n    } else {\n      batches = [params];\n    }\n\n    resolve(batches);\n  })\n\n  .then(chain_requests(this.ml, `${this.base_url}${model_id}/${this.run_action}/`))\n};\n\n\nModels.prototype.detail = function(model_id) {\n  return new Promise((resolve, reject) => {\n    if (!isString(model_id)) {\n      throw new MonkeyLearnError('', null, 'A model_id string is required.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}${model_id}/`,\n      method: 'GET',\n    })\n  )\n};\n\nModels.prototype.list = function(params) {\n  return new Promise((resolve, reject) => {\n    params = params || {};\n    defaults(params, {\n      page: 1,\n      per_page: 20,\n      order_by: '-created'\n    })\n    if (!isPlainObject(params)) {\n      throw new MonkeyLearnError('', null, 'Query parameters must be passed as a plain object.');\n    }\n    resolve();\n  })\n\n  .then(_ =>\n    request(this.ml, {\n      url: `${this.base_url}`,\n      method: 'GET',\n      query_params: params\n    })\n  )\n};\n"]},"metadata":{},"sourceType":"script"}