{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"../util/util\");\n\nvar KeyIndex_1 = require(\"../snap/indexes/KeyIndex\");\n\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\n\nvar ValueIndex_1 = require(\"../snap/indexes/ValueIndex\");\n\nvar PathIndex_1 = require(\"../snap/indexes/PathIndex\");\n\nvar IndexedFilter_1 = require(\"./filter/IndexedFilter\");\n\nvar LimitedFilter_1 = require(\"./filter/LimitedFilter\");\n\nvar RangedFilter_1 = require(\"./filter/RangedFilter\");\n\nvar util_3 = require(\"@firebase/util\");\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\n\n\nvar QueryParams =\n/** @class */\nfunction () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PriorityIndex_1.PRIORITY_INDEX;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  /**\r\n   * @return {boolean} True if it would return from left.\r\n   */\n\n\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartValue = function () {\n    util_1.assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartName = function () {\n    util_1.assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return util_2.MIN_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndValue = function () {\n    util_1.assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndName = function () {\n    util_1.assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return util_2.MAX_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   * @return {!number}\r\n   */\n\n\n  QueryParams.prototype.getLimit = function () {\n    util_1.assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\r\n   * @return {!Index}\r\n   */\n\n\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   * @private\r\n   */\n\n\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n\n    newParams.indexStartValue_ = indexValue;\n\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n\n    newParams.indexEndValue_ = indexValue;\n\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {!Index} index\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\r\n   * @return {!Object}\r\n   */\n\n\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    } // For now, priority index is the default, so we only specify if it's some other index\n\n\n    if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n\n    return obj;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;\n  };\n  /**\r\n   * @return {!NodeFilter}\r\n   */\n\n\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter_1.IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter_1.LimitedFilter(this);\n    } else {\n      return new RangedFilter_1.RangedFilter(this);\n    }\n  };\n  /**\r\n   * Returns a set of REST query string parameters representing this query.\r\n   *\r\n   * @return {!Object.<string,*>} query string parameters\r\n   */\n\n\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    var orderBy;\n\n    if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === ValueIndex_1.VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KeyIndex_1.KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n\n    qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);\n\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);\n\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  };\n  /**\r\n   * Wire Protocol Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\r\n   * REST Query Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\r\n   * Default, empty query parameters\r\n   * @type {!QueryParams}\r\n   * @const\r\n   */\n\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\n\nexports.QueryParams = QueryParams;","map":{"version":3,"mappings":"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","names":["PriorityIndex_1","QueryParams","startSet_","viewFrom_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","util_1","indexStartValue_","startNameSet_","indexStartName_","util_2","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","limit_","index_","copy","newLimit","newParams","copy_","VIEW_FROM_RIGHT","indexValue","key","undefined","index","WIRE_PROTOCOL_CONSTANTS","obj","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","isViewFromLeft","VIEW_FROM","INDEX","toString","loadsAllData","IndexedFilter_1","getIndex","hasLimit","LimitedFilter_1","RangedFilter_1","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","isDefault","orderBy","PRIORITY_INDEX","ValueIndex_1","VALUE_INDEX","KeyIndex_1","KEY_INDEX","PathIndex_1","ORDER_BY","util_3","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","exports"],"sources":["../src/core/view/QueryParams.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { stringify } from '@firebase/util';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: any | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: any | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): any {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): any {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): Object {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: any } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: any } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}