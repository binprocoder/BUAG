{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"../../util/util\");\n\nvar Index_1 = require(\"./Index\");\n\nvar ChildrenNode_1 = require(\"../ChildrenNode\");\n\nvar Node_1 = require(\"../Node\");\n\nvar nodeFromJSON_1 = require(\"../nodeFromJSON\");\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\n\n\nvar PathIndex =\n/** @class */\nfunction (_super) {\n  __extends(PathIndex, _super);\n\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n\n    _this.indexPath_ = indexPath_;\n    util_1.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n\n\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return util_2.nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);\n    var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new Node_1.NamedNode(name, node);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, ChildrenNode_1.MAX_NODE);\n    return new Node_1.NamedNode(util_2.MAX_NAME, node);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  PathIndex.prototype.toString = function () {\n    return this.indexPath_.slice().join('/');\n  };\n\n  return PathIndex;\n}(Index_1.Index);\n\nexports.PathIndex = PathIndex;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;;AACA;;AACA;AAGA;;;;;;;AAKA;AAAA;AAAA;AAA+BA;;AAC7B,qBAAoBC,UAApB,EAAoC;AAApC,gBACEC,qBAAO,IADT;;AAAoBC;AAGlBC,kBACE,CAACH,UAAU,CAACI,OAAX,EAAD,IAAyBJ,UAAU,CAACK,QAAX,OAA0B,WADrD,EAEE,yDAFF;;AAID;AAED;;;;;;;AAKUC,qCAAV,UAAuBC,IAAvB,EAAiC;AAC/B,WAAOA,IAAI,CAACC,QAAL,CAAc,KAAKR,UAAnB,CAAP;AACD,GAFS;AAIV;;;;;AAGAM,8CAAYG,IAAZ,EAAsB;AACpB,WAAO,CAACA,IAAI,CAACD,QAAL,CAAc,KAAKR,UAAnB,EAA+BI,OAA/B,EAAR;AACD,GAFD;AAIA;;;;;AAGAE,0CAAQI,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,QAAMC,MAAM,GAAG,KAAKC,YAAL,CAAkBH,CAAC,CAACD,IAApB,CAAf;AACA,QAAMK,MAAM,GAAG,KAAKD,YAAL,CAAkBF,CAAC,CAACF,IAApB,CAAf;AACA,QAAMM,QAAQ,GAAGH,MAAM,CAACI,SAAP,CAAiBF,MAAjB,CAAjB;;AACA,QAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAOE,mBAAYP,CAAC,CAACQ,IAAd,EAAoBP,CAAC,CAACO,IAAtB,CAAP;AACD,KAFD,MAEO;AACL,aAAOH,QAAP;AACD;AACF,GATD;AAWA;;;;;AAGAT,2CAASa,UAAT,EAA6BD,IAA7B,EAAyC;AACvC,QAAME,SAAS,GAAGC,4BAAaF,UAAb,CAAlB;AACA,QAAMV,IAAI,GAAGa,4BAAaC,UAAb,CAAwBC,WAAxB,CACX,KAAKxB,UADM,EAEXoB,SAFW,CAAb;AAIA,WAAO,IAAIK,gBAAJ,CAAcP,IAAd,EAAoBT,IAApB,CAAP;AACD,GAPD;AASA;;;;;AAGAH;AACE,QAAMG,IAAI,GAAGa,4BAAaC,UAAb,CAAwBC,WAAxB,CAAoC,KAAKxB,UAAzC,EAAqDsB,uBAArD,CAAb;AACA,WAAO,IAAIG,gBAAJ,CAAcR,eAAd,EAAwBR,IAAxB,CAAP;AACD,GAHD;AAKA;;;;;AAGAH;AACE,WAAO,KAAKN,UAAL,CAAgB0B,KAAhB,GAAwBC,IAAxB,CAA6B,GAA7B,CAAP;AACD,GAFD;;AAGF;AAlEA,EAA+BC,aAA/B;;AAAaC","names":["__extends","indexPath_","_super","_this","util_1","isEmpty","getFront","PathIndex","snap","getChild","node","a","b","aChild","extractChild","bChild","indexCmp","compareTo","util_2","name","indexValue","valueNode","nodeFromJSON_1","ChildrenNode_1","EMPTY_NODE","updateChild","Node_1","slice","join","Index_1","exports"],"sources":["../src/core/snap/indexes/PathIndex.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}