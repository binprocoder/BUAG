{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Index_1 = require(\"./Index\");\n\nvar util_1 = require(\"../../util/util\");\n\nvar Node_1 = require(\"../Node\");\n\nvar LeafNode_1 = require(\"../LeafNode\");\n\nvar nodeFromJSON;\nvar MAX_NODE;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\n\nexports.setNodeFromJSON = setNodeFromJSON;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n\nexports.setMaxNode = setMaxNode;\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\nvar PriorityIndex =\n/** @class */\nfunction (_super) {\n  __extends(PriorityIndex, _super);\n\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return util_1.nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.minPost = function () {\n    return Node_1.NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.maxPost = function () {\n    return new Node_1.NamedNode(util_1.MAX_NAME, new LeafNode_1.LeafNode('[PRIORITY-POST]', MAX_NODE));\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new Node_1.NamedNode(name, new LeafNode_1.LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n\n  return PriorityIndex;\n}(Index_1.Index);\n\nexports.PriorityIndex = PriorityIndex;\nexports.PRIORITY_INDEX = new PriorityIndex();","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;;AAEA,IAAIA,YAAJ;AACA,IAAIC,QAAJ;;AAEA,yBAAgCC,GAAhC,EAAqD;AACnDF,cAAY,GAAGE,GAAf;AACD;;AAFDC;;AAIA,oBAA2BD,GAA3B,EAAoC;AAClCD,UAAQ,GAAGC,GAAX;AACD;;AAFDC;AAIA;;;;;;AAKA;AAAA;AAAA;AAAmCC;;AAAnC;;AA2DC;AA1DC;;;;;AAGAC,8CAAQC,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,QAAMC,SAAS,GAAGF,CAAC,CAACG,IAAF,CAAOC,WAAP,EAAlB;AACA,QAAMC,SAAS,GAAGJ,CAAC,CAACE,IAAF,CAAOC,WAAP,EAAlB;AACA,QAAME,QAAQ,GAAGJ,SAAS,CAACK,SAAV,CAAoBF,SAApB,CAAjB;;AACA,QAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAOE,mBAAYR,CAAC,CAACS,IAAd,EAAoBR,CAAC,CAACQ,IAAtB,CAAP;AACD,KAFD,MAEO;AACL,aAAOH,QAAP;AACD;AACF,GATD;AAWA;;;;;AAGAP,kDAAYI,IAAZ,EAAsB;AACpB,WAAO,CAACA,IAAI,CAACC,WAAL,GAAmBM,OAAnB,EAAR;AACD,GAFD;AAIA;;;;;AAGAX,0DAAoBY,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,WAAO,CAACD,OAAO,CAACP,WAAR,GAAsBS,MAAtB,CAA6BD,OAAO,CAACR,WAAR,EAA7B,CAAR;AACD,GAFD;AAIA;;;;;AAGAL;AACE,WAAQe,iBAAkBC,GAA1B;AACD,GAFD;AAIA;;;;;AAGAhB;AACE,WAAO,IAAIe,gBAAJ,CAAcN,eAAd,EAAwB,IAAIQ,mBAAJ,CAAa,iBAAb,EAAgCrB,QAAhC,CAAxB,CAAP;AACD,GAFD;AAIA;;;;;;;AAKAI,+CAASkB,UAAT,EAA0BR,IAA1B,EAAsC;AACpC,QAAMS,YAAY,GAAGxB,YAAY,CAACuB,UAAD,CAAjC;AACA,WAAO,IAAIH,gBAAJ,CAAcL,IAAd,EAAoB,IAAIO,mBAAJ,CAAa,iBAAb,EAAgCE,YAAhC,CAApB,CAAP;AACD,GAHD;AAKA;;;;;AAGAnB;AACE,WAAO,WAAP;AACD,GAFD;;AAGF;AA3DA,EAAmCoB,aAAnC;;AAAatB;AA6DAA,yBAAiB,IAAIE,aAAJ,EAAjB","names":["nodeFromJSON","MAX_NODE","val","exports","__extends","PriorityIndex","a","b","aPriority","node","getPriority","bPriority","indexCmp","compareTo","util_1","name","isEmpty","oldNode","newNode","equals","Node_1","MIN","LeafNode_1","indexValue","priorityNode","Index_1"],"sources":["../src/core/snap/indexes/PriorityIndex.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: any) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: any) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: any, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n"]},"metadata":{},"sourceType":"script"}