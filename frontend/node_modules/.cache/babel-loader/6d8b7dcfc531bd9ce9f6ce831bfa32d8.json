{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport DefaultSW from '../models/default-sw';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport { createSubscribe } from '@firebase/util';\n\nvar WindowController =\n/** @class */\nfunction (_super) {\n  __extends(WindowController, _super);\n  /**\n   * A service that provides a MessagingService instance.\n   * @param {!firebase.app.App} app\n   */\n\n\n  function WindowController(app) {\n    var _this = _super.call(this, app) || this;\n    /**\n     * @private\n     * @type {ServiceWorkerRegistration}\n     */\n\n\n    _this.registrationToUse_;\n    /**\n     * @private\n     * @type {Promise}\n     */\n\n    _this.manifestCheckPromise_;\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n\n    _this.messageObserver_ = null;\n    /**\n     * @private {!firebase.Subscribe} The subscribe function to the onMessage\n     * observer.\n     */\n\n    _this.onMessage_ = createSubscribe(function (observer) {\n      _this.messageObserver_ = observer;\n    });\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n\n    _this.tokenRefreshObserver_ = null;\n    _this.onTokenRefresh_ = createSubscribe(function (observer) {\n      _this.tokenRefreshObserver_ = observer;\n    });\n\n    _this.setupSWMessageListener_();\n\n    return _this;\n  }\n  /**\n   * This method returns an FCM token if it can be generated.\n   * The return promise will reject if the browser doesn't support\n   * FCM, if permission is denied for notifications or it's not\n   * possible to generate a token.\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise the\n   * resolves to an FCM token or null if permission isn't granted.\n   */\n\n\n  WindowController.prototype.getToken = function () {\n    var _this = this; // Check that the required API's are available\n\n\n    if (!this.isSupported_()) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.UNSUPPORTED_BROWSER));\n    }\n\n    return this.manifestCheck_().then(function () {\n      return _super.prototype.getToken.call(_this);\n    });\n  };\n  /**\n   * The method checks that a manifest is defined and has the correct GCM\n   * sender ID.\n   * @private\n   * @return {Promise} Returns a promise that resolves if the manifest matches\n   * our required sender ID\n   */\n\n\n  WindowController.prototype.manifestCheck_ = function () {\n    var _this = this;\n\n    if (this.manifestCheckPromise_) {\n      return this.manifestCheckPromise_;\n    }\n\n    var manifestTag = document.querySelector('link[rel=\"manifest\"]');\n\n    if (!manifestTag) {\n      this.manifestCheckPromise_ = Promise.resolve();\n    } else {\n      this.manifestCheckPromise_ = fetch(manifestTag.href).then(function (response) {\n        return response.json();\n      }).catch(function () {\n        // If the download or parsing fails allow check.\n        // We only want to error if we KNOW that the gcm_sender_id is incorrect.\n        return Promise.resolve();\n      }).then(function (manifestContent) {\n        if (!manifestContent) {\n          return;\n        }\n\n        if (!manifestContent['gcm_sender_id']) {\n          return;\n        }\n\n        if (manifestContent['gcm_sender_id'] !== '103953800507') {\n          throw _this.errorFactory_.create(Errors.codes.INCORRECT_GCM_SENDER_ID);\n        }\n      });\n    }\n\n    return this.manifestCheckPromise_;\n  };\n  /**\n   * Request permission if it is not currently granted\n   * @export\n   * @returns {Promise} Resolves if the permission was granted, otherwise\n   * rejects\n   */\n\n\n  WindowController.prototype.requestPermission = function () {\n    var _this = this;\n\n    if (Notification.permission === NOTIFICATION_PERMISSION.granted) {\n      return Promise.resolve();\n    }\n\n    return new Promise(function (resolve, reject) {\n      var managePermissionResult = function (result) {\n        if (result === NOTIFICATION_PERMISSION.granted) {\n          return resolve();\n        } else if (result === NOTIFICATION_PERMISSION.denied) {\n          return reject(_this.errorFactory_.create(Errors.codes.PERMISSION_BLOCKED));\n        } else {\n          return reject(_this.errorFactory_.create(Errors.codes.PERMISSION_DEFAULT));\n        }\n      }; // The Notification.requestPermission API was changed to\n      // return a promise so now have to handle both in case\n      // browsers stop support callbacks for promised version\n\n\n      var permissionPromise = Notification.requestPermission(function (result) {\n        if (permissionPromise) {\n          // Let the promise manage this\n          return;\n        }\n\n        managePermissionResult(result);\n      });\n\n      if (permissionPromise) {\n        // Prefer the promise version as it's the future API.\n        permissionPromise.then(managePermissionResult);\n      }\n    });\n  };\n  /**\n   * This method allows a developer to override the default service worker and\n   * instead use a custom service worker.\n   * @export\n   * @param {!ServiceWorkerRegistration} registration The service worker\n   * registration that should be used to receive the push messages.\n   */\n\n\n  WindowController.prototype.useServiceWorker = function (registration) {\n    if (!(registration instanceof ServiceWorkerRegistration)) {\n      throw this.errorFactory_.create(Errors.codes.SW_REGISTRATION_EXPECTED);\n    }\n\n    if (typeof this.registrationToUse_ !== 'undefined') {\n      throw this.errorFactory_.create(Errors.codes.USE_SW_BEFORE_GET_TOKEN);\n    }\n\n    this.registrationToUse_ = registration;\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver An observer object\n   * or a function triggered on message.\n   * @param {function(!Error)=} optError Optional A function triggered on\n   * message error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n\n\n  WindowController.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {\n    return this.onMessage_(nextOrObserver, optError, optCompleted);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n\n\n  WindowController.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {\n    return this.onTokenRefresh_(nextOrObserver, optError, optCompleted);\n  };\n  /**\n   * Given a registration, wait for the service worker it relates to\n   * become activer\n   * @private\n   * @param  {ServiceWorkerRegistration} registration Registration to wait\n   * for service worker to become active\n   * @return {Promise<!ServiceWorkerRegistration>} Wait for service worker\n   * registration to become active\n   */\n\n\n  WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {\n    var _this = this;\n\n    var serviceWorker = registration.installing || registration.waiting || registration.active;\n    return new Promise(function (resolve, reject) {\n      if (!serviceWorker) {\n        // This is a rare scenario but has occured in firefox\n        reject(_this.errorFactory_.create(Errors.codes.NO_SW_IN_REG));\n        return;\n      } // Because the Promise function is called on next tick there is a\n      // small chance that the worker became active or redundant already.\n\n\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n        return;\n      }\n\n      if (serviceWorker.state === 'redundant') {\n        reject(_this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        return;\n      }\n\n      var stateChangeListener = function () {\n        if (serviceWorker.state === 'activated') {\n          resolve(registration);\n        } else if (serviceWorker.state === 'redundant') {\n          reject(_this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        } else {\n          // Return early and wait to next state change\n          return;\n        }\n\n        serviceWorker.removeEventListener('statechange', stateChangeListener);\n      };\n\n      serviceWorker.addEventListener('statechange', stateChangeListener);\n    });\n  };\n  /**\n   * This will regiater the default service worker and return the registration\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n\n\n  WindowController.prototype.getSWRegistration_ = function () {\n    var _this = this;\n\n    if (this.registrationToUse_) {\n      return this.waitForRegistrationToActivate_(this.registrationToUse_);\n    } // Make the registration null so we know useServiceWorker will not\n    // use a new service worker as registrationToUse_ is no longer undefined\n\n\n    this.registrationToUse_ = null;\n    return navigator.serviceWorker.register(DefaultSW.path, {\n      scope: DefaultSW.scope\n    }).catch(function (err) {\n      throw _this.errorFactory_.create(Errors.codes.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: err.message\n      });\n    }).then(function (registration) {\n      return _this.waitForRegistrationToActivate_(registration).then(function () {\n        _this.registrationToUse_ = registration; // We update after activation due to an issue with Firefox v49 where\n        // a race condition occassionally causes the service work to not\n        // install\n\n        registration.update();\n        return registration;\n      });\n    });\n  };\n  /**\n   * This method will set up a message listener to handle\n   * events from the service worker that should trigger\n   * events in the page.\n   *\n   * @private\n   */\n\n\n  WindowController.prototype.setupSWMessageListener_ = function () {\n    var _this = this;\n\n    if (!('serviceWorker' in navigator)) {\n      return;\n    }\n\n    navigator.serviceWorker.addEventListener('message', function (event) {\n      if (!event.data || !event.data[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n        // Not a message from FCM\n        return;\n      }\n\n      var workerPageMessage = event.data;\n\n      switch (workerPageMessage[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n        case WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED:\n        case WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED:\n          var pushMessage = workerPageMessage[WorkerPageMessage.PARAMS.DATA];\n\n          _this.messageObserver_.next(pushMessage);\n\n          break;\n\n        default:\n          // Noop.\n          break;\n      }\n    }, false);\n  };\n  /**\n   * Checks to see if the required API's are valid or not.\n   * @private\n   * @return {boolean} Returns true if the desired APIs are available.\n   */\n\n\n  WindowController.prototype.isSupported_ = function () {\n    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n  };\n\n  return WindowController;\n}(ControllerInterface);\n\nexport default WindowController;","map":{"version":3,"mappings":"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","names":["ControllerInterface","Errors","WorkerPageMessage","DefaultSW","NOTIFICATION_PERMISSION","createSubscribe","__extends","app","_super","_this","registrationToUse_","manifestCheckPromise_","messageObserver_","onMessage_","observer","tokenRefreshObserver_","onTokenRefresh_","setupSWMessageListener_","WindowController","isSupported_","Promise","reject","errorFactory_","create","codes","UNSUPPORTED_BROWSER","manifestCheck_","then","getToken","call","manifestTag","document","querySelector","resolve","fetch","href","response","json","catch","manifestContent","INCORRECT_GCM_SENDER_ID","Notification","permission","granted","managePermissionResult","result","denied","PERMISSION_BLOCKED","PERMISSION_DEFAULT","permissionPromise","requestPermission","registration","ServiceWorkerRegistration","SW_REGISTRATION_EXPECTED","USE_SW_BEFORE_GET_TOKEN","nextOrObserver","optError","optCompleted","serviceWorker","installing","waiting","active","NO_SW_IN_REG","state","SW_REG_REDUNDANT","stateChangeListener","removeEventListener","addEventListener","waitForRegistrationToActivate_","navigator","register","path","scope","FAILED_DEFAULT_REGISTRATION","browserErrorMessage","err","message","update","event","data","PARAMS","TYPE_OF_MSG","workerPageMessage","TYPES_OF_MSG","PUSH_MSG_RECEIVED","NOTIFICATION_CLICKED","pushMessage","DATA","next","window","prototype","hasOwnProperty","PushSubscription"],"sources":["../src/controllers/window-controller.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport DefaultSW from '../models/default-sw';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport { createSubscribe } from '@firebase/util';\n\ndeclare const firebase: any;\n\nexport default class WindowController extends ControllerInterface {\n  private registrationToUse_;\n  private manifestCheckPromise_;\n  private messageObserver_;\n  private onMessage_;\n  private tokenRefreshObserver_;\n  private onTokenRefresh_;\n\n  /**\n   * A service that provides a MessagingService instance.\n   * @param {!firebase.app.App} app\n   */\n  constructor(app) {\n    super(app);\n\n    /**\n     * @private\n     * @type {ServiceWorkerRegistration}\n     */\n    this.registrationToUse_;\n\n    /**\n     * @private\n     * @type {Promise}\n     */\n    this.manifestCheckPromise_;\n\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n    this.messageObserver_ = null;\n    /**\n     * @private {!firebase.Subscribe} The subscribe function to the onMessage\n     * observer.\n     */\n    this.onMessage_ = createSubscribe(observer => {\n      this.messageObserver_ = observer;\n    });\n\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n    this.tokenRefreshObserver_ = null;\n    this.onTokenRefresh_ = createSubscribe(observer => {\n      this.tokenRefreshObserver_ = observer;\n    });\n\n    this.setupSWMessageListener_();\n  }\n\n  /**\n   * This method returns an FCM token if it can be generated.\n   * The return promise will reject if the browser doesn't support\n   * FCM, if permission is denied for notifications or it's not\n   * possible to generate a token.\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise the\n   * resolves to an FCM token or null if permission isn't granted.\n   */\n  getToken() {\n    // Check that the required API's are available\n    if (!this.isSupported_()) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.UNSUPPORTED_BROWSER)\n      );\n    }\n\n    return this.manifestCheck_().then(() => {\n      return super.getToken();\n    });\n  }\n\n  /**\n   * The method checks that a manifest is defined and has the correct GCM\n   * sender ID.\n   * @private\n   * @return {Promise} Returns a promise that resolves if the manifest matches\n   * our required sender ID\n   */\n  manifestCheck_() {\n    if (this.manifestCheckPromise_) {\n      return this.manifestCheckPromise_;\n    }\n\n    const manifestTag = <HTMLAnchorElement>document.querySelector(\n      'link[rel=\"manifest\"]'\n    );\n    if (!manifestTag) {\n      this.manifestCheckPromise_ = Promise.resolve();\n    } else {\n      this.manifestCheckPromise_ = fetch(manifestTag.href)\n        .then(response => {\n          return response.json();\n        })\n        .catch(() => {\n          // If the download or parsing fails allow check.\n          // We only want to error if we KNOW that the gcm_sender_id is incorrect.\n          return Promise.resolve();\n        })\n        .then(manifestContent => {\n          if (!manifestContent) {\n            return;\n          }\n\n          if (!manifestContent['gcm_sender_id']) {\n            return;\n          }\n\n          if (manifestContent['gcm_sender_id'] !== '103953800507') {\n            throw this.errorFactory_.create(\n              Errors.codes.INCORRECT_GCM_SENDER_ID\n            );\n          }\n        });\n    }\n\n    return this.manifestCheckPromise_;\n  }\n\n  /**\n   * Request permission if it is not currently granted\n   * @export\n   * @returns {Promise} Resolves if the permission was granted, otherwise\n   * rejects\n   */\n  requestPermission() {\n    if ((Notification as any).permission === NOTIFICATION_PERMISSION.granted) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      const managePermissionResult = result => {\n        if (result === NOTIFICATION_PERMISSION.granted) {\n          return resolve();\n        } else if (result === NOTIFICATION_PERMISSION.denied) {\n          return reject(\n            this.errorFactory_.create(Errors.codes.PERMISSION_BLOCKED)\n          );\n        } else {\n          return reject(\n            this.errorFactory_.create(Errors.codes.PERMISSION_DEFAULT)\n          );\n        }\n      };\n\n      // The Notification.requestPermission API was changed to\n      // return a promise so now have to handle both in case\n      // browsers stop support callbacks for promised version\n      const permissionPromise = Notification.requestPermission(result => {\n        if (permissionPromise) {\n          // Let the promise manage this\n          return;\n        }\n\n        managePermissionResult(result);\n      });\n\n      if (permissionPromise) {\n        // Prefer the promise version as it's the future API.\n        permissionPromise.then(managePermissionResult);\n      }\n    });\n  }\n\n  /**\n   * This method allows a developer to override the default service worker and\n   * instead use a custom service worker.\n   * @export\n   * @param {!ServiceWorkerRegistration} registration The service worker\n   * registration that should be used to receive the push messages.\n   */\n  useServiceWorker(registration) {\n    if (!(registration instanceof ServiceWorkerRegistration)) {\n      throw this.errorFactory_.create(Errors.codes.SW_REGISTRATION_EXPECTED);\n    }\n\n    if (typeof this.registrationToUse_ !== 'undefined') {\n      throw this.errorFactory_.create(Errors.codes.USE_SW_BEFORE_GET_TOKEN);\n    }\n\n    this.registrationToUse_ = registration;\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver An observer object\n   * or a function triggered on message.\n   * @param {function(!Error)=} optError Optional A function triggered on\n   * message error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver, optError, optCompleted) {\n    return this.onMessage_(nextOrObserver, optError, optCompleted);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onTokenRefresh(nextOrObserver, optError, optCompleted) {\n    return this.onTokenRefresh_(nextOrObserver, optError, optCompleted);\n  }\n\n  /**\n   * Given a registration, wait for the service worker it relates to\n   * become activer\n   * @private\n   * @param  {ServiceWorkerRegistration} registration Registration to wait\n   * for service worker to become active\n   * @return {Promise<!ServiceWorkerRegistration>} Wait for service worker\n   * registration to become active\n   */\n  waitForRegistrationToActivate_(registration) {\n    const serviceWorker =\n      registration.installing || registration.waiting || registration.active;\n\n    return new Promise<ServiceWorkerRegistration>((resolve, reject) => {\n      if (!serviceWorker) {\n        // This is a rare scenario but has occured in firefox\n        reject(this.errorFactory_.create(Errors.codes.NO_SW_IN_REG));\n        return;\n      }\n      // Because the Promise function is called on next tick there is a\n      // small chance that the worker became active or redundant already.\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n        return;\n      }\n\n      if (serviceWorker.state === 'redundant') {\n        reject(this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        return;\n      }\n\n      let stateChangeListener = () => {\n        if (serviceWorker.state === 'activated') {\n          resolve(registration);\n        } else if (serviceWorker.state === 'redundant') {\n          reject(this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        } else {\n          // Return early and wait to next state change\n          return;\n        }\n        serviceWorker.removeEventListener('statechange', stateChangeListener);\n      };\n      serviceWorker.addEventListener('statechange', stateChangeListener);\n    });\n  }\n\n  /**\n   * This will regiater the default service worker and return the registration\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n  getSWRegistration_() {\n    if (this.registrationToUse_) {\n      return this.waitForRegistrationToActivate_(this.registrationToUse_);\n    }\n\n    // Make the registration null so we know useServiceWorker will not\n    // use a new service worker as registrationToUse_ is no longer undefined\n    this.registrationToUse_ = null;\n\n    return navigator.serviceWorker\n      .register(DefaultSW.path, {\n        scope: DefaultSW.scope\n      })\n      .catch(err => {\n        throw this.errorFactory_.create(\n          Errors.codes.FAILED_DEFAULT_REGISTRATION,\n          {\n            browserErrorMessage: err.message\n          }\n        );\n      })\n      .then(registration => {\n        return this.waitForRegistrationToActivate_(registration).then(() => {\n          this.registrationToUse_ = registration;\n\n          // We update after activation due to an issue with Firefox v49 where\n          // a race condition occassionally causes the service work to not\n          // install\n          registration.update();\n\n          return registration;\n        });\n      });\n  }\n\n  /**\n   * This method will set up a message listener to handle\n   * events from the service worker that should trigger\n   * events in the page.\n   *\n   * @private\n   */\n  setupSWMessageListener_() {\n    if (!('serviceWorker' in navigator)) {\n      return;\n    }\n\n    navigator.serviceWorker.addEventListener(\n      'message',\n      event => {\n        if (!event.data || !event.data[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n          // Not a message from FCM\n          return;\n        }\n\n        const workerPageMessage = event.data;\n        switch (workerPageMessage[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n          case WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED:\n          case WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED:\n            const pushMessage =\n              workerPageMessage[WorkerPageMessage.PARAMS.DATA];\n            this.messageObserver_.next(pushMessage);\n            break;\n          default:\n            // Noop.\n            break;\n        }\n      },\n      false\n    );\n  }\n\n  /**\n   * Checks to see if the required API's are valid or not.\n   * @private\n   * @return {boolean} Returns true if the desired APIs are available.\n   */\n  isSupported_() {\n    return (\n      'serviceWorker' in navigator &&\n      'PushManager' in window &&\n      'Notification' in window &&\n      'fetch' in window &&\n      ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n      PushSubscription.prototype.hasOwnProperty('getKey')\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}