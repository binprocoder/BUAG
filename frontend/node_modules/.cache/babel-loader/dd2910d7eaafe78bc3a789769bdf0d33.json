{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar obj_1 = require(\"./obj\");\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\n\n\nexports.querystring = function (querystringParams) {\n  var params = [];\n  obj_1.forEach(querystringParams, function (key, value) {\n    if (Array.isArray(value)) {\n      value.forEach(function (arrayVal) {\n        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  });\n  return params.length ? '&' + params.join('&') : '';\n};\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\n\n\nexports.querystringDecode = function (querystring) {\n  var obj = {};\n  var tokens = querystring.replace(/^\\?/, '').split('&');\n  tokens.forEach(function (token) {\n    if (token) {\n      var key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;;;;;;AAQaA,sBAAc,UAASC,iBAAT,EAA0B;AACnD,MAAIC,MAAM,GAAG,EAAb;AACAC,gBAAQF,iBAAR,EAA2B,UAASG,GAAT,EAAcC,KAAd,EAAmB;AAC5C,QAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBA,WAAK,CAACG,OAAN,CAAc,UAASC,QAAT,EAAiB;AAC7BP,cAAM,CAACQ,IAAP,CACEC,kBAAkB,CAACP,GAAD,CAAlB,GAA0B,GAA1B,GAAgCO,kBAAkB,CAACF,QAAD,CADpD;AAGD,OAJD;AAKD,KAND,MAMO;AACLP,YAAM,CAACQ,IAAP,CAAYC,kBAAkB,CAACP,GAAD,CAAlB,GAA0B,GAA1B,GAAgCO,kBAAkB,CAACN,KAAD,CAA9D;AACD;AACF,GAVD;AAWA,SAAOH,MAAM,CAACU,MAAP,GAAgB,MAAMV,MAAM,CAACW,IAAP,CAAY,GAAZ,CAAtB,GAAyC,EAAhD;AACD,CAdY;AAgBb;;;;;;;;AAMab,4BAAoB,UAASc,WAAT,EAAoB;AACnD,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,MAAM,GAAGF,WAAW,CAACG,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,EAA+BC,KAA/B,CAAqC,GAArC,CAAb;AAEAF,QAAM,CAACR,OAAP,CAAe,UAASW,KAAT,EAAc;AAC3B,QAAIA,KAAJ,EAAW;AACT,UAAIf,GAAG,GAAGe,KAAK,CAACD,KAAN,CAAY,GAAZ,CAAV;AACAH,SAAG,CAACX,GAAG,CAAC,CAAD,CAAJ,CAAH,GAAcA,GAAG,CAAC,CAAD,CAAjB;AACD;AACF,GALD;AAMA,SAAOW,GAAP;AACD,CAXY","names":["exports","querystringParams","params","obj_1","key","value","Array","isArray","forEach","arrayVal","push","encodeURIComponent","length","join","querystring","obj","tokens","replace","split","token"],"sources":["../src/query.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { forEach } from './obj';\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\n * object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n *\n * @param {!Object} querystringParams\n * @return {string}\n */\nexport const querystring = function(querystringParams) {\n  var params = [];\n  forEach(querystringParams, function(key, value) {\n    if (Array.isArray(value)) {\n      value.forEach(function(arrayVal) {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  });\n  return params.length ? '&' + params.join('&') : '';\n};\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\n *\n * @param {string} querystring\n * @return {!Object}\n */\nexport const querystringDecode = function(querystring) {\n  var obj = {};\n  var tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(function(token) {\n    if (token) {\n      var key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n};\n"]},"metadata":{},"sourceType":"script"}