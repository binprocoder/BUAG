{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\n\nfunction deepCopy(value) {\n  return deepExtend(undefined, value);\n}\n\nexports.deepCopy = deepCopy;\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\n\nfunction deepExtend(target, source) {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      var dateValue = source;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (var prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n\n    target[prop] = deepExtend(target[prop], source[prop]);\n  }\n\n  return target;\n}\n\nexports.deepExtend = deepExtend; // TODO: Really needed (for JSCompiler type checking)?\n\nfunction patchProperty(obj, prop, value) {\n  obj[prop] = value;\n}\n\nexports.patchProperty = patchProperty;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;;;AAGA,kBAA4BA,KAA5B,EAAoC;AAClC,SAAOC,UAAU,CAACC,SAAD,EAAYF,KAAZ,CAAjB;AACD;;AAFDG;AAIA;;;;;;;;;;;;;AAYA,oBAA2BC,MAA3B,EAAwCC,MAAxC,EAAmD;AACjD,MAAI,EAAEA,MAAM,YAAYC,MAApB,CAAJ,EAAiC;AAC/B,WAAOD,MAAP;AACD;;AAED,UAAQA,MAAM,CAACE,WAAf;AACE,SAAKC,IAAL;AACE;AACA;AACA,UAAIC,SAAS,GAAIJ,MAAjB;AACA,aAAO,IAAIG,IAAJ,CAASC,SAAS,CAACC,OAAV,EAAT,CAAP;;AAEF,SAAKJ,MAAL;AACE,UAAIF,MAAM,KAAKF,SAAf,EAA0B;AACxBE,cAAM,GAAG,EAAT;AACD;;AACD;;AAEF,SAAKO,KAAL;AACE;AACAP,YAAM,GAAG,EAAT;AACA;;AAEF;AACE;AACA,aAAOC,MAAP;AApBJ;;AAuBA,OAAK,IAAIO,IAAT,IAAiBP,MAAjB,EAAyB;AACvB,QAAI,CAACA,MAAM,CAACQ,cAAP,CAAsBD,IAAtB,CAAL,EAAkC;AAChC;AACD;;AACDR,UAAM,CAACQ,IAAD,CAAN,GAAeX,UAAU,CAACG,MAAM,CAACQ,IAAD,CAAP,EAAeP,MAAM,CAACO,IAAD,CAArB,CAAzB;AACD;;AAED,SAAOR,MAAP;AACD;;AApCDD,gC,CAsCA;;AACA,uBAA8BW,GAA9B,EAAwCF,IAAxC,EAAsDZ,KAAtD,EAAgE;AAC9Dc,KAAG,CAACF,IAAD,CAAH,GAAYZ,KAAZ;AACD;;AAFDG","names":["value","deepExtend","undefined","exports","target","source","Object","constructor","Date","dateValue","getTime","Array","prop","hasOwnProperty","obj"],"sources":["../src/deepCopy.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value);\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nexport function deepExtend(target: any, source: any): any {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      let dateValue = (source as any) as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (let prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    target[prop] = deepExtend(target[prop], source[prop]);\n  }\n\n  return target;\n}\n\n// TODO: Really needed (for JSCompiler type checking)?\nexport function patchProperty(obj: any, prop: string, value: any) {\n  obj[prop] = value;\n}\n"]},"metadata":{},"sourceType":"script"}