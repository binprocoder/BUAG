{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Array.<string>} allowedEvents_\r\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    util_1.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   * @param {!string} eventType\r\n   * @param {...*} var_args\r\n   */\n\n\n  EventEmitter.prototype.trigger = function (eventType) {\n    var var_args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      var_args[_i - 1] = arguments[_i];\n    }\n\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = this.listeners_[eventType].slice();\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  };\n\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    util_1.assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n\n  return EventEmitter;\n}();\n\nexports.EventEmitter = EventEmitter;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;;AAIA;AAAA;AAAA;AAQE;;;AAGA,wBAAoBA,cAApB,EAAiD;AAA7B;AAVZ,sBAKJ,EALI;AAWNC,kBACEC,KAAK,CAACC,OAAN,CAAcH,cAAd,KAAiCA,cAAc,CAACI,MAAf,GAAwB,CAD3D,EAEE,4BAFF;AAID;AAWD;;;;;;;AAKUC,mCAAV,UAAkBC,SAAlB,EAAmC;AAAE;;SAAA,yCAAkB;AAAlBC;;;AACnC,QAAIL,KAAK,CAACC,OAAN,CAAc,KAAKK,UAAL,CAAgBF,SAAhB,CAAd,CAAJ,EAA+C;AAC7C;AACA,UAAMG,SAAS,GAAO,KAAKD,UAAL,CAAgBF,SAAhB,EAA0BI,KAA1B,EAAtB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACL,MAA9B,EAAsCO,CAAC,EAAvC,EAA2C;AACzCF,iBAAS,CAACE,CAAD,CAAT,CAAaC,QAAb,CAAsBC,KAAtB,CAA4BJ,SAAS,CAACE,CAAD,CAAT,CAAaG,OAAzC,EAAkDP,QAAlD;AACD;AACF;AACF,GATS;;AAWVF,wCAAGC,SAAH,EAAsBM,QAAtB,EAAkDE,OAAlD,EAA8D;AAC5D,SAAKC,kBAAL,CAAwBT,SAAxB;AACA,SAAKE,UAAL,CAAgBF,SAAhB,IAA6B,KAAKE,UAAL,CAAgBF,SAAhB,KAA8B,EAA3D;AACA,SAAKE,UAAL,CAAgBF,SAAhB,EAA2BU,IAA3B,CAAgC;AAAEJ,cAAQ,UAAV;AAAYE,aAAO;AAAnB,KAAhC;AAEA,QAAMG,SAAS,GAAG,KAAKC,eAAL,CAAqBZ,SAArB,CAAlB;;AACA,QAAIW,SAAJ,EAAe;AACbL,cAAQ,CAACC,KAAT,CAAeC,OAAf,EAAwBG,SAAxB;AACD;AACF,GATD;;AAWAZ,yCAAIC,SAAJ,EAAuBM,QAAvB,EAAmDE,OAAnD,EAA+D;AAC7D,SAAKC,kBAAL,CAAwBT,SAAxB;AACA,QAAMG,SAAS,GAAG,KAAKD,UAAL,CAAgBF,SAAhB,KAA8B,EAAhD;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACL,MAA9B,EAAsCO,CAAC,EAAvC,EAA2C;AACzC,UACEF,SAAS,CAACE,CAAD,CAAT,CAAaC,QAAb,KAA0BA,QAA1B,KACC,CAACE,OAAD,IAAYA,OAAO,KAAKL,SAAS,CAACE,CAAD,CAAT,CAAaG,OADtC,CADF,EAGE;AACAL,iBAAS,CAACU,MAAV,CAAiBR,CAAjB,EAAoB,CAApB;AACA;AACD;AACF;AACF,GAZD;;AAcQN,8CAAR,UAA2BC,SAA3B,EAA4C;AAC1CL,kBACE,KAAKD,cAAL,CAAoBoB,IAApB,CAAyB,UAASC,EAAT,EAAW;AAClC,aAAOA,EAAE,KAAKf,SAAd;AACD,KAFD,CADF,EAIE,oBAAoBA,SAJtB;AAMD,GAPO;;AAQV;AA5EA;;AAAsBgB","names":["allowedEvents_","util_1","Array","isArray","length","EventEmitter","eventType","var_args","listeners_","listeners","slice","i","callback","apply","context","validateEventType_","push","eventData","getInitialEvent","splice","find","et","exports"],"sources":["../src/core/util/EventEmitter.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: any[]): void;\n      context: any;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: Array<string>) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): any[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  protected trigger(eventType: string, ...var_args: any[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(function(et) {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}