{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ChildrenNode_1 = require(\"./ChildrenNode\");\n\nvar LeafNode_1 = require(\"./LeafNode\");\n\nvar Node_1 = require(\"./Node\");\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar childSet_1 = require(\"./childSet\");\n\nvar comparators_1 = require(\"./comparators\");\n\nvar IndexMap_1 = require(\"./IndexMap\");\n\nvar PriorityIndex_1 = require(\"./indexes/PriorityIndex\");\n\nvar USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\n\nfunction nodeFromJSON(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n\n  if (json === null) {\n    return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  util_2.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode_1.LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj_1 = json;\n    util_1.forEach(hinzeJsonObj_1, function (key, child) {\n      if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON(hinzeJsonObj_1[key]);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new Node_1.NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children_1.length == 0) {\n      return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = childSet_1.buildChildSet(children_1, comparators_1.NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, comparators_1.NAME_COMPARATOR);\n\n    if (childrenHavePriority_1) {\n      var sortedChildSet = childSet_1.buildChildSet(children_1, PriorityIndex_1.PRIORITY_INDEX.getCompare());\n      return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap_1.IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PriorityIndex_1.PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), IndexMap_1.IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n    var jsonObj_1 = json;\n    util_1.forEach(jsonObj_1, function (key, childData) {\n      if (util_1.contains(jsonObj_1, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) node_1 = node_1.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nexports.nodeFromJSON = nodeFromJSON;\nPriorityIndex_1.setNodeFromJSON(nodeFromJSON);","map":{"version":3,"mappings":"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","names":["USE_HINZE","json","priority","ChildrenNode_1","EMPTY_NODE","util_2","jsonLeaf","LeafNode_1","nodeFromJSON","Array","children_1","childrenHavePriority_1","hinzeJsonObj_1","util_1","key","child","substring","childNode","isEmpty","getPriority","push","Node_1","length","childSet","childSet_1","comparators_1","name","sortedChildSet","PriorityIndex_1","getCompare","IndexMap_1","Default","node_1","jsonObj_1","childData","isLeafNode","updateImmediateChild","updatePriority","exports"],"sources":["../src/core/snap/nodeFromJSON.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { forEach, contains } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: any | null,\n  priority: string | number | null = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | object;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj: { [k: string]: any } = json as object;\n    forEach(hinzeJsonObj, (key: string, child: any) => {\n      if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(hinzeJsonObj[key]);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    const jsonObj = json as object;\n    forEach(jsonObj, (key: string, childData: any) => {\n      if (contains(jsonObj, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty())\n            node = node.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n"]},"metadata":{},"sourceType":"script"}