{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar storage_1 = require(\"./storage/storage\");\n\nvar Constants_1 = require(\"../realtime/Constants\");\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\n\n\nvar RepoInfo =\n/** @class */\nfunction () {\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.persistenceKey = persistenceKey;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = storage_1.PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost;\n  };\n\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        storage_1.PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n\n\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    util_1.assert(typeof type === 'string', 'typeof type must == string');\n    util_1.assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n\n    if (type === Constants_1.WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === Constants_1.LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    var pairs = [];\n    util_2.forEach(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toURLString = function () {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  };\n\n  return RepoInfo;\n}();\n\nexports.RepoInfo = RepoInfo;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AAKE;;;;;;;AAOA,oBACEA,IADF,EAESC,MAFT,EAGSC,SAHT,EAISC,aAJT,EAKSC,cALT,EAKoC;AAA3B;AAAAA;AAA2B;;AAH3B;AACA;AACA;AACA;AAEP,SAAKJ,IAAL,GAAYA,IAAI,CAACK,WAAL,EAAZ;AACA,SAAKC,MAAL,GAAc,KAAKN,IAAL,CAAUO,MAAV,CAAiB,KAAKP,IAAL,CAAUQ,OAAV,CAAkB,GAAlB,IAAyB,CAA1C,CAAd;AACA,SAAKC,YAAL,GAAoBC,4BAAkBC,GAAlB,CAAsB,UAAUX,IAAhC,KAAyC,KAAKA,IAAlE;AACD;;AAEDY;AACE,WAAO,KAAKZ,IAAL,KAAc,KAAKS,YAA1B;AACD,GAFD;;AAIAG;AACE,WAAO,KAAKH,YAAL,CAAkBF,MAAlB,CAAyB,CAAzB,EAA4B,CAA5B,MAAmC,IAA1C;AACD,GAFD;;AAIAK;AACE,WAAO,KAAKN,MAAL,KAAgB,qBAAvB;AACD,GAFD;;AAIAM;AACE,WACE,KAAKN,MAAL,KAAgB,gBAAhB,IAAoC,KAAKA,MAAL,KAAgB,qBADtD;AAGD,GAJD;;AAMAM,4CAAWC,OAAX,EAA0B;AACxB,QAAIA,OAAO,KAAK,KAAKJ,YAArB,EAAmC;AACjC,WAAKA,YAAL,GAAoBI,OAApB;;AACA,UAAI,KAAKC,eAAL,EAAJ,EAA4B;AAC1BJ,oCAAkBK,GAAlB,CAAsB,UAAU,KAAKf,IAArC,EAA2C,KAAKS,YAAhD;AACD;AACF;AACF,GAPD;AASA;;;;;;;;AAMAG,+CAAcI,IAAd,EAA4BC,MAA5B,EAA2D;AACzDC,kBAAO,OAAOF,IAAP,KAAgB,QAAvB,EAAiC,4BAAjC;AACAE,kBAAO,OAAOD,MAAP,KAAkB,QAAzB,EAAmC,8BAAnC;AAEA,QAAIE,OAAJ;;AACA,QAAIH,IAAI,KAAKI,qBAAb,EAAwB;AACtBD,aAAO,GACL,CAAC,KAAKlB,MAAL,GAAc,QAAd,GAAyB,OAA1B,IAAqC,KAAKQ,YAA1C,GAAyD,OAD3D;AAED,KAHD,MAGO,IAAIO,IAAI,KAAKI,wBAAb,EAA2B;AAChCD,aAAO,GACL,CAAC,KAAKlB,MAAL,GAAc,UAAd,GAA2B,SAA5B,IAAyC,KAAKQ,YAA9C,GAA6D,OAD/D;AAED,KAHM,MAGA;AACL,YAAM,IAAIY,KAAJ,CAAU,8BAA8BL,IAAxC,CAAN;AACD;;AACD,QAAI,KAAKM,eAAL,EAAJ,EAA4B;AAC1BL,YAAM,CAAC,IAAD,CAAN,GAAe,KAAKf,SAApB;AACD;;AAED,QAAMqB,KAAK,GAAa,EAAxB;AAEAC,mBAAQP,MAAR,EAAgB,UAACQ,GAAD,EAAcC,KAAd,EAA2B;AACzCH,WAAK,CAACI,IAAN,CAAWF,GAAG,GAAG,GAAN,GAAYC,KAAvB;AACD,KAFD;AAIA,WAAOP,OAAO,GAAGI,KAAK,CAACK,IAAN,CAAW,GAAX,CAAjB;AACD,GAzBD;AA2BA;;;AACAhB;AACE,QAAIiB,GAAG,GAAG,KAAKC,WAAL,EAAV;;AACA,QAAI,KAAK1B,cAAT,EAAyB;AACvByB,SAAG,IAAI,MAAM,KAAKzB,cAAX,GAA4B,GAAnC;AACD;;AACD,WAAOyB,GAAP;AACD,GAND;AAQA;;;AACAjB;AACE,WAAO,CAAC,KAAKX,MAAL,GAAc,UAAd,GAA2B,SAA5B,IAAyC,KAAKD,IAArD;AACD,GAFD;;AAGF;AAjGA;;AAAa+B","names":["host","secure","namespace","webSocketOnly","persistenceKey","toLowerCase","domain","substr","indexOf","internalHost","storage_1","get","RepoInfo","newHost","isCacheableHost","set","type","params","util_1","connURL","Constants_1","Error","needsQueryParam","pairs","util_2","key","value","push","join","str","toURLString","exports"],"sources":["../src/core/RepoInfo.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { forEach } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = ''\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return this.host !== this.internalHost;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    forEach(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}