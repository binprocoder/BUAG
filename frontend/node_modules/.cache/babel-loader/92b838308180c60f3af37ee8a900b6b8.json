{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nvar semver = require('semver');\n/**\n * Module of mixed-in functions shared between node and client code\n */\n\n\nvar _require = require('./utils'),\n    isObject = _require.isObject,\n    hasOwn = _require.hasOwn;\n/**\n * Expose `RequestBase`.\n */\n\n\nmodule.exports = RequestBase;\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase() {}\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequestBase.prototype.clearTimeout = function () {\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  clearTimeout(this._uploadTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  delete this._uploadTimeoutTimer;\n  return this;\n};\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\n\nRequestBase.prototype.parse = function (fn) {\n  this._parser = fn;\n  return this;\n};\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequestBase.prototype.responseType = function (value) {\n  this._responseType = value;\n  return this;\n};\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\n\nRequestBase.prototype.serialize = function (fn) {\n  this._serializer = fn;\n  return this;\n};\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n * - upload is the time  since last bit of data was sent or received. This timeout works only if deadline timeout is off\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequestBase.prototype.timeout = function (options) {\n  if (!options || _typeof(options) !== 'object') {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    this._uploadTimeout = 0;\n    return this;\n  }\n\n  for (var option in options) {\n    if (hasOwn(options, option)) {\n      switch (option) {\n        case 'deadline':\n          this._timeout = options.deadline;\n          break;\n\n        case 'response':\n          this._responseTimeout = options.response;\n          break;\n\n        case 'upload':\n          this._uploadTimeout = options.upload;\n          break;\n\n        default:\n          console.warn('Unknown timeout option', option);\n      }\n    }\n  }\n\n  return this;\n};\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequestBase.prototype.retry = function (count, fn) {\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n}; //\n// NOTE: we do not include ESOCKETTIMEDOUT because that is from `request` package\n//       <https://github.com/sindresorhus/got/pull/537>\n//\n// NOTE: we do not include EADDRINFO because it was removed from libuv in 2014\n//       <https://github.com/libuv/libuv/commit/02e1ebd40b807be5af46343ea873331b2ee4e9c1>\n//       <https://github.com/request/request/search?q=ESOCKETTIMEDOUT&unscoped_q=ESOCKETTIMEDOUT>\n//\n//\n// TODO: expose these as configurable defaults\n//\n\n\nvar ERROR_CODES = new Set(['ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND', 'ENETUNREACH', 'EAI_AGAIN']);\nvar STATUS_CODES = new Set([408, 413, 429, 500, 502, 503, 504, 521, 522, 524]); // TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n// const METHODS = new Set(['GET', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE']);\n\n/**\n * Determine if a request should be retried.\n * (Inspired by https://github.com/sindresorhus/got#retry)\n *\n * @param {Error} err an error\n * @param {Response} [res] response\n * @returns {Boolean} if segment should be retried\n */\n\nRequestBase.prototype._shouldRetry = function (error, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n\n  if (this._retryCallback) {\n    try {\n      var override = this._retryCallback(error, res);\n\n      if (override === true) return true;\n      if (override === false) return false; // undefined falls back to defaults\n    } catch (err) {\n      console.error(err);\n    }\n  } // TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n\n  /*\n  if (\n    this.req &&\n    this.req.method &&\n    !METHODS.has(this.req.method.toUpperCase())\n  )\n    return false;\n  */\n\n\n  if (res && res.status && STATUS_CODES.has(res.status)) return true;\n\n  if (error) {\n    if (error.code && ERROR_CODES.has(error.code)) return true; // Superagent timeout\n\n    if (error.timeout && error.code === 'ECONNABORTED') return true;\n    if (error.crossDomain) return true;\n  }\n\n  return false;\n};\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\n\nRequestBase.prototype._retry = function () {\n  this.clearTimeout(); // node\n\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n  this.timedoutError = null;\n  return this._end();\n};\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\n\nRequestBase.prototype.then = function (resolve, reject) {\n  var _this = this;\n\n  if (!this._fullfilledPromise) {\n    var self = this;\n\n    if (this._endCalled) {\n      console.warn('Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises');\n    }\n\n    this._fullfilledPromise = new Promise(function (resolve, reject) {\n      self.on('abort', function () {\n        if (_this._maxRetries && _this._maxRetries > _this._retries) {\n          return;\n        }\n\n        if (_this.timedout && _this.timedoutError) {\n          reject(_this.timedoutError);\n          return;\n        }\n\n        var error = new Error('Aborted');\n        error.code = 'ABORTED';\n        error.status = _this.status;\n        error.method = _this.method;\n        error.url = _this.url;\n        reject(error);\n      });\n      self.end(function (error, res) {\n        if (error) reject(error);else resolve(res);\n      });\n    });\n  }\n\n  return this._fullfilledPromise.then(resolve, reject);\n};\n\nRequestBase.prototype.catch = function (callback) {\n  return this.then(undefined, callback);\n};\n/**\n * Allow for extension\n */\n\n\nRequestBase.prototype.use = function (fn) {\n  fn(this);\n  return this;\n};\n\nRequestBase.prototype.ok = function (callback) {\n  if (typeof callback !== 'function') throw new Error('Callback required');\n  this._okCallback = callback;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function (res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\n\nRequestBase.prototype.get = function (field) {\n  return this._header[field.toLowerCase()];\n};\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function (field, value) {\n  if (isObject(field)) {\n    for (var key in field) {\n      if (hasOwn(field, key)) this.set(key, field[key]);\n    }\n\n    return this;\n  }\n\n  this._header[field.toLowerCase()] = value;\n  this.header[field] = value;\n  return this;\n};\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field field name\n */\n\n\nRequestBase.prototype.unset = function (field) {\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name name of field\n * @param {String|Blob|File|Buffer|fs.ReadStream} val value of field\n * @param {String} options extra options, e.g. 'blob'\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequestBase.prototype.field = function (name, value, options) {\n  // name should be either a string or an object.\n  if (name === null || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    throw new Error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      if (hasOwn(name, key)) this.field(key, name[key]);\n    }\n\n    return this;\n  }\n\n  if (Array.isArray(value)) {\n    for (var i in value) {\n      if (hasOwn(value, i)) this.field(name, value[i]);\n    }\n\n    return this;\n  } // val should be defined now\n\n\n  if (value === null || undefined === value) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  this._getFormData().append(name, value, options);\n\n  return this;\n};\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request} request\n * @api public\n */\n\n\nRequestBase.prototype.abort = function () {\n  if (this._aborted) {\n    return this;\n  }\n\n  this._aborted = true;\n  if (this.xhr) this.xhr.abort(); // browser\n\n  if (this.req) {\n    // Node v13 has major differences in `abort()`\n    // https://github.com/nodejs/node/blob/v12.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v13.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v14.x/lib/internal/streams/end-of-stream.js\n    // (if you run a diff across these you will see the differences)\n    //\n    // References:\n    // <https://github.com/nodejs/node/issues/31630>\n    // <https://github.com/visionmedia/superagent/pull/1084/commits/dc18679a7c5ccfc6046d882015e5126888973bc8>\n    //\n    // Thanks to @shadowgate15 and @niftylettuce\n    if (semver.gte(process.version, 'v13.0.0') && semver.lt(process.version, 'v14.0.0')) {\n      // Note that the reason this doesn't work is because in v13 as compared to v14\n      // there is no `callback = nop` set in end-of-stream.js above\n      throw new Error('Superagent does not work in v13 properly with abort() due to Node.js core changes');\n    } else if (semver.gte(process.version, 'v14.0.0')) {\n      // We have to manually set `destroyed` to `true` in order for this to work\n      // (see core internals of end-of-stream.js above in v14 branch as compared to v12)\n      this.req.destroyed = true;\n    }\n\n    this.req.abort(); // node\n  }\n\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\nRequestBase.prototype._auth = function (user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', \"Basic \".concat(base64Encoder(\"\".concat(user, \":\").concat(pass))));\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n\n    case 'bearer':\n      // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', \"Bearer \".concat(user));\n      break;\n\n    default:\n      break;\n  }\n\n  return this;\n};\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\n\nRequestBase.prototype.withCredentials = function (on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on === undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n/**\n * Set the max redirects to `n`. Does nothing in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequestBase.prototype.redirects = function (n) {\n  this._maxRedirects = n;\n  return this;\n};\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n number of bytes\n * @return {Request} for chaining\n */\n\n\nRequestBase.prototype.maxResponseSize = function (n) {\n  if (typeof n !== 'number') {\n    throw new TypeError('Invalid argument');\n  }\n\n  this._maxResponseSize = n;\n  return this;\n};\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\n\nRequestBase.prototype.toJSON = function () {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n// eslint-disable-next-line complexity\n\n\nRequestBase.prototype.send = function (data) {\n  var isObject_ = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    throw new Error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject_ && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw new Error(\"Can't merge these send calls\");\n  } // merge\n\n\n  if (isObject_ && isObject(this._data)) {\n    for (var key in data) {\n      if (hasOwn(data, key)) this._data[key] = data[key];\n    }\n  } else if (typeof data === 'string') {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if (type) type = type.toLowerCase().trim();\n\n    if (type === 'application/x-www-form-urlencoded') {\n      this._data = this._data ? \"\".concat(this._data, \"&\").concat(data) : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObject_ || this._isHost(data)) {\n    return this;\n  } // default to json\n\n\n  if (!type) this.type('json');\n  return this;\n};\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequestBase.prototype.sortQuery = function (sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\n\n\nRequestBase.prototype._finalizeQueryString = function () {\n  var query = this._query.join('&');\n\n  if (query) {\n    this.url += (this.url.includes('?') ? '&' : '?') + query;\n  }\n\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n\n    if (index >= 0) {\n      var queryArray = this.url.slice(index + 1).split('&');\n\n      if (typeof this._sort === 'function') {\n        queryArray.sort(this._sort);\n      } else {\n        queryArray.sort();\n      }\n\n      this.url = this.url.slice(0, index) + '?' + queryArray.join('&');\n    }\n  }\n}; // For backwards compat only\n\n\nRequestBase.prototype._appendQueryString = function () {\n  console.warn('Unsupported');\n};\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\n\nRequestBase.prototype._timeoutError = function (reason, timeout, errno) {\n  if (this._aborted) {\n    return;\n  }\n\n  var error = new Error(\"\".concat(reason + timeout, \"ms exceeded\"));\n  error.timeout = timeout;\n  error.code = 'ECONNABORTED';\n  error.errno = errno;\n  this.timedout = true;\n  this.timedoutError = error;\n  this.abort();\n  this.callback(error);\n};\n\nRequestBase.prototype._setTimeouts = function () {\n  var self = this; // deadline\n\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function () {\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  } // response timeout\n\n\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function () {\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};","map":{"version":3,"sources":["../src/request-base.js"],"names":["semver","require","isObject","hasOwn","module","RequestBase","clearTimeout","options","console","arguments","count","ERROR_CODES","STATUS_CODES","override","res","error","self","reject","resolve","fn","field","name","undefined","Array","value","String","process","base64Encoder","on","method","url","data","headers","_header","isObject_","type","query","index","queryArray","reason","setTimeout"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAtB,QAAsB,CAAtB;AAEA;AACA;AACA;;;AACA,IAAA,QAAA,GAA6BA,OAAO,CAApC,SAAoC,CAApC;AAAA,IAAQC,QAAR,GAAA,QAAA,CAAA,QAAA;AAAA,IAAkBC,MAAlB,GAAA,QAAA,CAAA,MAAA;AAEA;AACA;AACA;;;AAEAC,MAAM,CAANA,OAAAA,GAAAA,WAAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAA,WAAA,GAAuB,CAAE;AAEzB;AACA;AACA;AACA;AACA;AACA;;;AAEAC,WAAW,CAAXA,SAAAA,CAAAA,YAAAA,GAAqC,YAAY;AAC/CC,EAAAA,YAAY,CAAC,KAAbA,MAAY,CAAZA;AACAA,EAAAA,YAAY,CAAC,KAAbA,qBAAY,CAAZA;AACAA,EAAAA,YAAY,CAAC,KAAbA,mBAAY,CAAZA;AACA,SAAO,KAAP,MAAA;AACA,SAAO,KAAP,qBAAA;AACA,SAAO,KAAP,mBAAA;AACA,SAAA,IAAA;AAPFD,CAAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,UAAA,EAAA,EAAc;AAC1C,OAAA,OAAA,GAAA,EAAA;AACA,SAAA,IAAA;AAFFA,CAAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,YAAAA,GAAqC,UAAA,KAAA,EAAiB;AACpD,OAAA,aAAA,GAAA,KAAA;AACA,SAAA,IAAA;AAFFA,CAAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,SAAAA,GAAkC,UAAA,EAAA,EAAc;AAC9C,OAAA,WAAA,GAAA,EAAA;AACA,SAAA,IAAA;AAFFA,CAAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,OAAAA,GAAgC,UAAA,OAAA,EAAmB;AACjD,MAAI,CAAA,OAAA,IAAY,OAAA,CAAA,OAAA,CAAA,KAAhB,QAAA,EAA6C;AAC3C,SAAA,QAAA,GAAA,OAAA;AACA,SAAA,gBAAA,GAAA,CAAA;AACA,SAAA,cAAA,GAAA,CAAA;AACA,WAAA,IAAA;AACD;;AAED,OAAK,IAAL,MAAA,IAAA,OAAA,EAA8B;AAC5B,QAAIF,MAAM,CAAA,OAAA,EAAV,MAAU,CAAV,EAA6B;AAC3B,cAAA,MAAA;AACE,aAAA,UAAA;AACE,eAAA,QAAA,GAAgBI,OAAO,CAAvB,QAAA;AACA;;AACF,aAAA,UAAA;AACE,eAAA,gBAAA,GAAwBA,OAAO,CAA/B,QAAA;AACA;;AACF,aAAA,QAAA;AACE,eAAA,cAAA,GAAsBA,OAAO,CAA7B,MAAA;AACA;;AACF;AACEC,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,wBAAAA,EAAAA,MAAAA;AAXJ;AAaD;AACF;;AAED,SAAA,IAAA;AA1BFH,CAAAA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,UAAA,KAAA,EAAA,EAAA,EAAqB;AACjD;AACA,MAAII,SAAS,CAATA,MAAAA,KAAAA,CAAAA,IAA0BC,KAAK,KAAnC,IAAA,EAA8CA,KAAK,GAALA,CAAAA;AAC9C,MAAIA,KAAK,IAAT,CAAA,EAAgBA,KAAK,GAALA,CAAAA;AAChB,OAAA,WAAA,GAAA,KAAA;AACA,OAAA,QAAA,GAAA,CAAA;AACA,OAAA,cAAA,GAAA,EAAA;AACA,SAAA,IAAA;AAPFL,CAAAA,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMM,WAAW,GAAG,IAAA,GAAA,CAAQ,CAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,OAAA,EAAA,WAAA,EAAA,aAAA,EAA5B,WAA4B,CAAR,CAApB;AAWA,IAAMC,YAAY,GAAG,IAAA,GAAA,CAAQ,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAA7B,GAA6B,CAAR,CAArB,C,CAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAP,WAAW,CAAXA,SAAAA,CAAAA,YAAAA,GAAqC,UAAA,KAAA,EAAA,GAAA,EAAsB;AACzD,MAAI,CAAC,KAAD,WAAA,IAAqB,KAAA,QAAA,MAAmB,KAA5C,WAAA,EAA8D;AAC5D,WAAA,KAAA;AACD;;AAED,MAAI,KAAJ,cAAA,EAAyB;AACvB,QAAI;AACF,UAAMQ,QAAQ,GAAG,KAAA,cAAA,CAAA,KAAA,EAAjB,GAAiB,CAAjB;;AACA,UAAIA,QAAQ,KAAZ,IAAA,EAAuB,OAAA,IAAA;AACvB,UAAIA,QAAQ,KAAZ,KAAA,EAAwB,OAHtB,KAGsB,CAHtB,CAIF;AAJF,KAAA,CAKE,OAAA,GAAA,EAAY;AACZL,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,GAAAA;AACD;AAbsD,GAAA,CAgBzD;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAIM,GAAG,IAAIA,GAAG,CAAVA,MAAAA,IAAqBF,YAAY,CAAZA,GAAAA,CAAiBE,GAAG,CAA7C,MAAyBF,CAAzB,EAAuD,OAAA,IAAA;;AACvD,MAAA,KAAA,EAAW;AACT,QAAIG,KAAK,CAALA,IAAAA,IAAcJ,WAAW,CAAXA,GAAAA,CAAgBI,KAAK,CAAvC,IAAkBJ,CAAlB,EAA+C,OADtC,IACsC,CADtC,CAET;;AACA,QAAII,KAAK,CAALA,OAAAA,IAAiBA,KAAK,CAALA,IAAAA,KAArB,cAAA,EAAoD,OAAA,IAAA;AACpD,QAAIA,KAAK,CAAT,WAAA,EAAuB,OAAA,IAAA;AACxB;;AAED,SAAA,KAAA;AAjCFV,CAAAA;AAoCA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,MAAAA,GAA+B,YAAY;AACzC,OADyC,YACzC,GADyC,CAGzC;;AACA,MAAI,KAAJ,GAAA,EAAc;AACZ,SAAA,GAAA,GAAA,IAAA;AACA,SAAA,GAAA,GAAW,KAAX,OAAW,EAAX;AACD;;AAED,OAAA,QAAA,GAAA,KAAA;AACA,OAAA,QAAA,GAAA,KAAA;AACA,OAAA,aAAA,GAAA,IAAA;AAEA,SAAO,KAAP,IAAO,EAAP;AAbFA,CAAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,IAAAA,GAA6B,UAAA,OAAA,EAAA,MAAA,EAA2B;AAAA,MAAA,KAAA,GAAA,IAAA;;AACtD,MAAI,CAAC,KAAL,kBAAA,EAA8B;AAC5B,QAAMW,IAAI,GAAV,IAAA;;AACA,QAAI,KAAJ,UAAA,EAAqB;AACnBR,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,gIAAAA;AAGD;;AAED,SAAA,kBAAA,GAA0B,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACzDQ,MAAAA,IAAI,CAAJA,EAAAA,CAAAA,OAAAA,EAAiB,YAAM;AACrB,YAAI,KAAI,CAAJ,WAAA,IAAoB,KAAI,CAAJ,WAAA,GAAmB,KAAI,CAA/C,QAAA,EAA0D;AACxD;AACD;;AAED,YAAI,KAAI,CAAJ,QAAA,IAAiB,KAAI,CAAzB,aAAA,EAAyC;AACvCC,UAAAA,MAAM,CAAC,KAAI,CAAXA,aAAM,CAANA;AACA;AACD;;AAED,YAAMF,KAAK,GAAG,IAAA,KAAA,CAAd,SAAc,CAAd;AACAA,QAAAA,KAAK,CAALA,IAAAA,GAAAA,SAAAA;AACAA,QAAAA,KAAK,CAALA,MAAAA,GAAe,KAAI,CAAnBA,MAAAA;AACAA,QAAAA,KAAK,CAALA,MAAAA,GAAe,KAAI,CAAnBA,MAAAA;AACAA,QAAAA,KAAK,CAALA,GAAAA,GAAY,KAAI,CAAhBA,GAAAA;AACAE,QAAAA,MAAM,CAANA,KAAM,CAANA;AAfFD,OAAAA;AAiBAA,MAAAA,IAAI,CAAJA,GAAAA,CAAS,UAAA,KAAA,EAAA,GAAA,EAAgB;AACvB,YAAA,KAAA,EAAWC,MAAM,CAAjB,KAAiB,CAANA,CAAX,KACKC,OAAO,CAAPA,GAAO,CAAPA;AAFPF,OAAAA;AAlBF,KAA0B,CAA1B;AAuBD;;AAED,SAAO,KAAA,kBAAA,CAAA,IAAA,CAAA,OAAA,EAAP,MAAO,CAAP;AAlCFX,CAAAA;;AAqCAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,UAAA,QAAA,EAAoB;AAChD,SAAO,KAAA,IAAA,CAAA,SAAA,EAAP,QAAO,CAAP;AADFA,CAAAA;AAIA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,GAAAA,GAA4B,UAAA,EAAA,EAAc;AACxCc,EAAAA,EAAE,CAAFA,IAAE,CAAFA;AACA,SAAA,IAAA;AAFFd,CAAAA;;AAKAA,WAAW,CAAXA,SAAAA,CAAAA,EAAAA,GAA2B,UAAA,QAAA,EAAoB;AAC7C,MAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC,MAAM,IAAA,KAAA,CAAN,mBAAM,CAAN;AACpC,OAAA,WAAA,GAAA,QAAA;AACA,SAAA,IAAA;AAHFA,CAAAA;;AAMAA,WAAW,CAAXA,SAAAA,CAAAA,aAAAA,GAAsC,UAAA,GAAA,EAAe;AACnD,MAAI,CAAJ,GAAA,EAAU;AACR,WAAA,KAAA;AACD;;AAED,MAAI,KAAJ,WAAA,EAAsB;AACpB,WAAO,KAAA,WAAA,CAAP,GAAO,CAAP;AACD;;AAED,SAAOS,GAAG,CAAHA,MAAAA,IAAAA,GAAAA,IAAqBA,GAAG,CAAHA,MAAAA,GAA5B,GAAA;AATFT,CAAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,GAAAA,GAA4B,UAAA,KAAA,EAAiB;AAC3C,SAAO,KAAA,OAAA,CAAae,KAAK,CAAzB,WAAoBA,EAAb,CAAP;AADFf,CAAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,SAAAA,GAAkCA,WAAW,CAAXA,SAAAA,CAAlCA,GAAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,GAAAA,GAA4B,UAAA,KAAA,EAAA,KAAA,EAAwB;AAClD,MAAIH,QAAQ,CAAZ,KAAY,CAAZ,EAAqB;AACnB,SAAK,IAAL,GAAA,IAAA,KAAA,EAAyB;AACvB,UAAIC,MAAM,CAAA,KAAA,EAAV,GAAU,CAAV,EAAwB,KAAA,GAAA,CAAA,GAAA,EAAciB,KAAK,CAAnB,GAAmB,CAAnB;AACzB;;AAED,WAAA,IAAA;AACD;;AAED,OAAA,OAAA,CAAaA,KAAK,CAAlB,WAAaA,EAAb,IAAA,KAAA;AACA,OAAA,MAAA,CAAA,KAAA,IAAA,KAAA;AACA,SAAA,IAAA;AAXFf,CAAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,UAAA,KAAA,EAAiB;AAC7C,SAAO,KAAA,OAAA,CAAae,KAAK,CAAzB,WAAoBA,EAAb,CAAP;AACA,SAAO,KAAA,MAAA,CAAP,KAAO,CAAP;AACA,SAAA,IAAA;AAHFf,CAAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,UAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAAgC;AAC5D;AACA,MAAIgB,IAAI,KAAJA,IAAAA,IAAiBC,SAAS,KAA9B,IAAA,EAAyC;AACvC,UAAM,IAAA,KAAA,CAAN,yCAAM,CAAN;AACD;;AAED,MAAI,KAAJ,KAAA,EAAgB;AACd,UAAM,IAAA,KAAA,CAAN,iGAAM,CAAN;AAGD;;AAED,MAAIpB,QAAQ,CAAZ,IAAY,CAAZ,EAAoB;AAClB,SAAK,IAAL,GAAA,IAAA,IAAA,EAAwB;AACtB,UAAIC,MAAM,CAAA,IAAA,EAAV,GAAU,CAAV,EAAuB,KAAA,KAAA,CAAA,GAAA,EAAgBkB,IAAI,CAApB,GAAoB,CAApB;AACxB;;AAED,WAAA,IAAA;AACD;;AAED,MAAIE,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxB,SAAK,IAAL,CAAA,IAAA,KAAA,EAAuB;AACrB,UAAIpB,MAAM,CAAA,KAAA,EAAV,CAAU,CAAV,EAAsB,KAAA,KAAA,CAAA,IAAA,EAAiBqB,KAAK,CAAtB,CAAsB,CAAtB;AACvB;;AAED,WAAA,IAAA;AAzB0D,GAAA,CA4B5D;;;AACA,MAAIA,KAAK,KAALA,IAAAA,IAAkBF,SAAS,KAA/B,KAAA,EAA2C;AACzC,UAAM,IAAA,KAAA,CAAN,wCAAM,CAAN;AACD;;AAED,MAAI,OAAA,KAAA,KAAJ,SAAA,EAAgC;AAC9BE,IAAAA,KAAK,GAAGC,MAAM,CAAdD,KAAc,CAAdA;AACD;;AAED,OAAA,YAAA,GAAA,MAAA,CAAA,IAAA,EAAA,KAAA,EAAA,OAAA;;AACA,SAAA,IAAA;AAtCFnB,CAAAA;AAyCA;AACA;AACA;AACA;AACA;AACA;;;AACAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,YAAY;AACxC,MAAI,KAAJ,QAAA,EAAmB;AACjB,WAAA,IAAA;AACD;;AAED,OAAA,QAAA,GAAA,IAAA;AACA,MAAI,KAAJ,GAAA,EAAc,KAAA,GAAA,CAN0B,KAM1B,GAN0B,CAMR;;AAChC,MAAI,KAAJ,GAAA,EAAc;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QACEL,MAAM,CAANA,GAAAA,CAAW0B,OAAO,CAAlB1B,OAAAA,EAAAA,SAAAA,KACAA,MAAM,CAANA,EAAAA,CAAU0B,OAAO,CAAjB1B,OAAAA,EAFF,SAEEA,CAFF,EAGE;AACA;AACA;AACA,YAAM,IAAA,KAAA,CAAN,mFAAM,CAAN;AANF,KAAA,MASO,IAAIA,MAAM,CAANA,GAAAA,CAAW0B,OAAO,CAAlB1B,OAAAA,EAAJ,SAAIA,CAAJ,EAA4C;AACjD;AACA;AACA,WAAA,GAAA,CAAA,SAAA,GAAA,IAAA;AACD;;AAED,SAAA,GAAA,CA3BY,KA2BZ,GA3BY,CA2BM;AACnB;;AAED,OAAA,YAAA;AACA,OAAA,IAAA,CAAA,OAAA;AACA,SAAA,IAAA;AAvCFK,CAAAA;;AA0CAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,UAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,aAAA,EAA8C;AAC1E,UAAQE,OAAO,CAAf,IAAA;AACE,SAAA,OAAA;AACE,WAAA,GAAA,CAAA,eAAA,EAAA,SAAA,MAAA,CAAmCoB,aAAa,CAAA,GAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAAA,MAAA,CAAhD,IAAgD,CAAA,CAAhD,CAAA;AACA;;AAEF,SAAA,MAAA;AACE,WAAA,QAAA,GAAA,IAAA;AACA,WAAA,QAAA,GAAA,IAAA;AACA;;AAEF,SAAA,QAAA;AAAe;AACb,WAAA,GAAA,CAAA,eAAA,EAAA,UAAA,MAAA,CAAA,IAAA,CAAA;AACA;;AACF;AACE;AAdJ;;AAiBA,SAAA,IAAA;AAlBFtB,CAAAA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,eAAAA,GAAwC,UAAA,EAAA,EAAc;AACpD;AACA,MAAIuB,EAAE,KAAN,SAAA,EAAsBA,EAAE,GAAFA,IAAAA;AACtB,OAAA,gBAAA,GAAA,EAAA;AACA,SAAA,IAAA;AAJFvB,CAAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,SAAAA,GAAkC,UAAA,CAAA,EAAa;AAC7C,OAAA,aAAA,GAAA,CAAA;AACA,SAAA,IAAA;AAFFA,CAAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,WAAW,CAAXA,SAAAA,CAAAA,eAAAA,GAAwC,UAAA,CAAA,EAAa;AACnD,MAAI,OAAA,CAAA,KAAJ,QAAA,EAA2B;AACzB,UAAM,IAAA,SAAA,CAAN,kBAAM,CAAN;AACD;;AAED,OAAA,gBAAA,GAAA,CAAA;AACA,SAAA,IAAA;AANFA,CAAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,MAAAA,GAA+B,YAAY;AACzC,SAAO;AACLwB,IAAAA,MAAM,EAAE,KADH,MAAA;AAELC,IAAAA,GAAG,EAAE,KAFA,GAAA;AAGLC,IAAAA,IAAI,EAAE,KAHD,KAAA;AAILC,IAAAA,OAAO,EAAE,KAAKC;AAJT,GAAP;AADF5B,CAAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAA,WAAW,CAAXA,SAAAA,CAAAA,IAAAA,GAA6B,UAAA,IAAA,EAAgB;AAC3C,MAAM6B,SAAS,GAAGhC,QAAQ,CAA1B,IAA0B,CAA1B;AACA,MAAIiC,IAAI,GAAG,KAAA,OAAA,CAAX,cAAW,CAAX;;AAEA,MAAI,KAAJ,SAAA,EAAoB;AAClB,UAAM,IAAA,KAAA,CAAN,8GAAM,CAAN;AAGD;;AAED,MAAID,SAAS,IAAI,CAAC,KAAlB,KAAA,EAA8B;AAC5B,QAAIX,KAAK,CAALA,OAAAA,CAAJ,IAAIA,CAAJ,EAAyB;AACvB,WAAA,KAAA,GAAA,EAAA;AADF,KAAA,MAEO,IAAI,CAAC,KAAA,OAAA,CAAL,IAAK,CAAL,EAAyB;AAC9B,WAAA,KAAA,GAAA,EAAA;AACD;AALH,GAAA,MAMO,IAAIQ,IAAI,IAAI,KAARA,KAAAA,IAAsB,KAAA,OAAA,CAAa,KAAvC,KAA0B,CAA1B,EAAoD;AACzD,UAAM,IAAA,KAAA,CAAN,8BAAM,CAAN;AAjByC,GAAA,CAoB3C;;;AACA,MAAIG,SAAS,IAAIhC,QAAQ,CAAC,KAA1B,KAAyB,CAAzB,EAAuC;AACrC,SAAK,IAAL,GAAA,IAAA,IAAA,EAAwB;AACtB,UAAIC,MAAM,CAAA,IAAA,EAAV,GAAU,CAAV,EAAuB,KAAA,KAAA,CAAA,GAAA,IAAkB4B,IAAI,CAAtB,GAAsB,CAAtB;AACxB;AAHH,GAAA,MAIO,IAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AACnC;AACA,QAAI,CAAJ,IAAA,EAAW,KAAA,IAAA,CAAA,MAAA;AACXI,IAAAA,IAAI,GAAG,KAAA,OAAA,CAAPA,cAAO,CAAPA;AACA,QAAA,IAAA,EAAUA,IAAI,GAAGA,IAAI,CAAJA,WAAAA,GAAPA,IAAOA,EAAPA;;AACV,QAAIA,IAAI,KAAR,mCAAA,EAAkD;AAChD,WAAA,KAAA,GAAa,KAAA,KAAA,GAAA,GAAA,MAAA,CAAgB,KAAhB,KAAA,EAAA,GAAA,EAAA,MAAA,CAAA,IAAA,CAAA,GAAb,IAAA;AADF,KAAA,MAEO;AACL,WAAA,KAAA,GAAa,CAAC,KAAA,KAAA,IAAD,EAAA,IAAb,IAAA;AACD;AATI,GAAA,MAUA;AACL,SAAA,KAAA,GAAA,IAAA;AACD;;AAED,MAAI,CAAA,SAAA,IAAc,KAAA,OAAA,CAAlB,IAAkB,CAAlB,EAAsC;AACpC,WAAA,IAAA;AAxCyC,GAAA,CA2C3C;;;AACA,MAAI,CAAJ,IAAA,EAAW,KAAA,IAAA,CAAA,MAAA;AACX,SAAA,IAAA;AA7CF9B,CAAAA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,SAAAA,GAAkC,UAAA,IAAA,EAAgB;AAChD;AACA,OAAA,KAAA,GAAa,OAAA,IAAA,KAAA,WAAA,GAAA,IAAA,GAAb,IAAA;AACA,SAAA,IAAA;AAHFA,CAAAA;AAMA;AACA;AACA;AACA;AACA;;;AACAA,WAAW,CAAXA,SAAAA,CAAAA,oBAAAA,GAA6C,YAAY;AACvD,MAAM+B,KAAK,GAAG,KAAA,MAAA,CAAA,IAAA,CAAd,GAAc,CAAd;;AACA,MAAA,KAAA,EAAW;AACT,SAAA,GAAA,IAAY,CAAC,KAAA,GAAA,CAAA,QAAA,CAAA,GAAA,IAAA,GAAA,GAAD,GAAA,IAAZ,KAAA;AACD;;AAED,OAAA,MAAA,CAAA,MAAA,GANuD,CAMvD,CANuD,CAM/B;;AAExB,MAAI,KAAJ,KAAA,EAAgB;AACd,QAAMC,KAAK,GAAG,KAAA,GAAA,CAAA,OAAA,CAAd,GAAc,CAAd;;AACA,QAAIA,KAAK,IAAT,CAAA,EAAgB;AACd,UAAMC,UAAU,GAAG,KAAA,GAAA,CAAA,KAAA,CAAeD,KAAK,GAApB,CAAA,EAAA,KAAA,CAAnB,GAAmB,CAAnB;;AACA,UAAI,OAAO,KAAP,KAAA,KAAJ,UAAA,EAAsC;AACpCC,QAAAA,UAAU,CAAVA,IAAAA,CAAgB,KAAhBA,KAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,UAAU,CAAVA,IAAAA;AACD;;AAED,WAAA,GAAA,GAAW,KAAA,GAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,IAAA,GAAA,GAAiCA,UAAU,CAAVA,IAAAA,CAA5C,GAA4CA,CAA5C;AACD;AACF;AApBHjC,CAAAA,C,CAuBA;;;AACAA,WAAW,CAAXA,SAAAA,CAAAA,kBAAAA,GAA2C,YAAM;AAC/CG,EAAAA,OAAO,CAAPA,IAAAA,CAAAA,aAAAA;AADFH,CAAAA;AAIA;AACA;AACA;AACA;AACA;;;AAEAA,WAAW,CAAXA,SAAAA,CAAAA,aAAAA,GAAsC,UAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAkC;AACtE,MAAI,KAAJ,QAAA,EAAmB;AACjB;AACD;;AAED,MAAMU,KAAK,GAAG,IAAA,KAAA,CAAA,GAAA,MAAA,CAAawB,MAAM,GAAnB,OAAA,EAAd,aAAc,CAAA,CAAd;AACAxB,EAAAA,KAAK,CAALA,OAAAA,GAAAA,OAAAA;AACAA,EAAAA,KAAK,CAALA,IAAAA,GAAAA,cAAAA;AACAA,EAAAA,KAAK,CAALA,KAAAA,GAAAA,KAAAA;AACA,OAAA,QAAA,GAAA,IAAA;AACA,OAAA,aAAA,GAAA,KAAA;AACA,OAAA,KAAA;AACA,OAAA,QAAA,CAAA,KAAA;AAZFV,CAAAA;;AAeAA,WAAW,CAAXA,SAAAA,CAAAA,YAAAA,GAAqC,YAAY;AAC/C,MAAMW,IAAI,GADqC,IAC/C,CAD+C,CAG/C;;AACA,MAAI,KAAA,QAAA,IAAiB,CAAC,KAAtB,MAAA,EAAmC;AACjC,SAAA,MAAA,GAAcwB,UAAU,CAAC,YAAM;AAC7BxB,MAAAA,IAAI,CAAJA,aAAAA,CAAAA,aAAAA,EAAkCA,IAAI,CAAtCA,QAAAA,EAAAA,OAAAA;AADsB,KAAA,EAErB,KAFH,QAAwB,CAAxB;AAL6C,GAAA,CAU/C;;;AACA,MAAI,KAAA,gBAAA,IAAyB,CAAC,KAA9B,qBAAA,EAA0D;AACxD,SAAA,qBAAA,GAA6BwB,UAAU,CAAC,YAAM;AAC5CxB,MAAAA,IAAI,CAAJA,aAAAA,CAAAA,sBAAAA,EAEEA,IAAI,CAFNA,gBAAAA,EAAAA,WAAAA;AADqC,KAAA,EAMpC,KANH,gBAAuC,CAAvC;AAOD;AAnBHX,CAAAA","sourcesContent":["const semver = require('semver');\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nconst { isObject, hasOwn } = require('./utils');\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase() {}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function () {\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  clearTimeout(this._uploadTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  delete this._uploadTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function (fn) {\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function (value) {\n  this._responseType = value;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function (fn) {\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n * - upload is the time  since last bit of data was sent or received. This timeout works only if deadline timeout is off\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function (options) {\n  if (!options || typeof options !== 'object') {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    this._uploadTimeout = 0;\n    return this;\n  }\n\n  for (const option in options) {\n    if (hasOwn(options, option)) {\n      switch (option) {\n        case 'deadline':\n          this._timeout = options.deadline;\n          break;\n        case 'response':\n          this._responseTimeout = options.response;\n          break;\n        case 'upload':\n          this._uploadTimeout = options.upload;\n          break;\n        default:\n          console.warn('Unknown timeout option', option);\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function (count, fn) {\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\n//\n// NOTE: we do not include ESOCKETTIMEDOUT because that is from `request` package\n//       <https://github.com/sindresorhus/got/pull/537>\n//\n// NOTE: we do not include EADDRINFO because it was removed from libuv in 2014\n//       <https://github.com/libuv/libuv/commit/02e1ebd40b807be5af46343ea873331b2ee4e9c1>\n//       <https://github.com/request/request/search?q=ESOCKETTIMEDOUT&unscoped_q=ESOCKETTIMEDOUT>\n//\n//\n// TODO: expose these as configurable defaults\n//\nconst ERROR_CODES = new Set([\n  'ETIMEDOUT',\n  'ECONNRESET',\n  'EADDRINUSE',\n  'ECONNREFUSED',\n  'EPIPE',\n  'ENOTFOUND',\n  'ENETUNREACH',\n  'EAI_AGAIN'\n]);\n\nconst STATUS_CODES = new Set([\n  408, 413, 429, 500, 502, 503, 504, 521, 522, 524\n]);\n\n// TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n// const METHODS = new Set(['GET', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE']);\n\n/**\n * Determine if a request should be retried.\n * (Inspired by https://github.com/sindresorhus/got#retry)\n *\n * @param {Error} err an error\n * @param {Response} [res] response\n * @returns {Boolean} if segment should be retried\n */\nRequestBase.prototype._shouldRetry = function (error, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n\n  if (this._retryCallback) {\n    try {\n      const override = this._retryCallback(error, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  // TODO: we would need to make this easily configurable before adding it in (e.g. some might want to add POST)\n  /*\n  if (\n    this.req &&\n    this.req.method &&\n    !METHODS.has(this.req.method.toUpperCase())\n  )\n    return false;\n  */\n  if (res && res.status && STATUS_CODES.has(res.status)) return true;\n  if (error) {\n    if (error.code && ERROR_CODES.has(error.code)) return true;\n    // Superagent timeout\n    if (error.timeout && error.code === 'ECONNABORTED') return true;\n    if (error.crossDomain) return true;\n  }\n\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function () {\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n  this.timedoutError = null;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function (resolve, reject) {\n  if (!this._fullfilledPromise) {\n    const self = this;\n    if (this._endCalled) {\n      console.warn(\n        'Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises'\n      );\n    }\n\n    this._fullfilledPromise = new Promise((resolve, reject) => {\n      self.on('abort', () => {\n        if (this._maxRetries && this._maxRetries > this._retries) {\n          return;\n        }\n\n        if (this.timedout && this.timedoutError) {\n          reject(this.timedoutError);\n          return;\n        }\n\n        const error = new Error('Aborted');\n        error.code = 'ABORTED';\n        error.status = this.status;\n        error.method = this.method;\n        error.url = this.url;\n        reject(error);\n      });\n      self.end((error, res) => {\n        if (error) reject(error);\n        else resolve(res);\n      });\n    });\n  }\n\n  return this._fullfilledPromise.then(resolve, reject);\n};\n\nRequestBase.prototype.catch = function (callback) {\n  return this.then(undefined, callback);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function (fn) {\n  fn(this);\n  return this;\n};\n\nRequestBase.prototype.ok = function (callback) {\n  if (typeof callback !== 'function') throw new Error('Callback required');\n  this._okCallback = callback;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function (res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function (field) {\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function (field, value) {\n  if (isObject(field)) {\n    for (const key in field) {\n      if (hasOwn(field, key)) this.set(key, field[key]);\n    }\n\n    return this;\n  }\n\n  this._header[field.toLowerCase()] = value;\n  this.header[field] = value;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field field name\n */\nRequestBase.prototype.unset = function (field) {\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name name of field\n * @param {String|Blob|File|Buffer|fs.ReadStream} val value of field\n * @param {String} options extra options, e.g. 'blob'\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function (name, value, options) {\n  // name should be either a string or an object.\n  if (name === null || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    throw new Error(\n      \".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\"\n    );\n  }\n\n  if (isObject(name)) {\n    for (const key in name) {\n      if (hasOwn(name, key)) this.field(key, name[key]);\n    }\n\n    return this;\n  }\n\n  if (Array.isArray(value)) {\n    for (const i in value) {\n      if (hasOwn(value, i)) this.field(name, value[i]);\n    }\n\n    return this;\n  }\n\n  // val should be defined now\n  if (value === null || undefined === value) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  this._getFormData().append(name, value, options);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request} request\n * @api public\n */\nRequestBase.prototype.abort = function () {\n  if (this._aborted) {\n    return this;\n  }\n\n  this._aborted = true;\n  if (this.xhr) this.xhr.abort(); // browser\n  if (this.req) {\n    // Node v13 has major differences in `abort()`\n    // https://github.com/nodejs/node/blob/v12.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v13.x/lib/internal/streams/end-of-stream.js\n    // https://github.com/nodejs/node/blob/v14.x/lib/internal/streams/end-of-stream.js\n    // (if you run a diff across these you will see the differences)\n    //\n    // References:\n    // <https://github.com/nodejs/node/issues/31630>\n    // <https://github.com/visionmedia/superagent/pull/1084/commits/dc18679a7c5ccfc6046d882015e5126888973bc8>\n    //\n    // Thanks to @shadowgate15 and @niftylettuce\n    if (\n      semver.gte(process.version, 'v13.0.0') &&\n      semver.lt(process.version, 'v14.0.0')\n    ) {\n      // Note that the reason this doesn't work is because in v13 as compared to v14\n      // there is no `callback = nop` set in end-of-stream.js above\n      throw new Error(\n        'Superagent does not work in v13 properly with abort() due to Node.js core changes'\n      );\n    } else if (semver.gte(process.version, 'v14.0.0')) {\n      // We have to manually set `destroyed` to `true` in order for this to work\n      // (see core internals of end-of-stream.js above in v14 branch as compared to v12)\n      this.req.destroyed = true;\n    }\n\n    this.req.abort(); // node\n  }\n\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\nRequestBase.prototype._auth = function (user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', `Basic ${base64Encoder(`${user}:${pass}`)}`);\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n\n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', `Bearer ${user}`);\n      break;\n    default:\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function (on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on === undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does nothing in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function (n) {\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n number of bytes\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function (n) {\n  if (typeof n !== 'number') {\n    throw new TypeError('Invalid argument');\n  }\n\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function () {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\n// eslint-disable-next-line complexity\nRequestBase.prototype.send = function (data) {\n  const isObject_ = isObject(data);\n  let type = this._header['content-type'];\n\n  if (this._formData) {\n    throw new Error(\n      \".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\"\n    );\n  }\n\n  if (isObject_ && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw new Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObject_ && isObject(this._data)) {\n    for (const key in data) {\n      if (hasOwn(data, key)) this._data[key] = data[key];\n    }\n  } else if (typeof data === 'string') {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if (type) type = type.toLowerCase().trim();\n    if (type === 'application/x-www-form-urlencoded') {\n      this._data = this._data ? `${this._data}&${data}` : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObject_ || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function (sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function () {\n  const query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.includes('?') ? '&' : '?') + query;\n  }\n\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    const index = this.url.indexOf('?');\n    if (index >= 0) {\n      const queryArray = this.url.slice(index + 1).split('&');\n      if (typeof this._sort === 'function') {\n        queryArray.sort(this._sort);\n      } else {\n        queryArray.sort();\n      }\n\n      this.url = this.url.slice(0, index) + '?' + queryArray.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = () => {\n  console.warn('Unsupported');\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function (reason, timeout, errno) {\n  if (this._aborted) {\n    return;\n  }\n\n  const error = new Error(`${reason + timeout}ms exceeded`);\n  error.timeout = timeout;\n  error.code = 'ECONNABORTED';\n  error.errno = errno;\n  this.timedout = true;\n  this.timedoutError = error;\n  this.abort();\n  this.callback(error);\n};\n\nRequestBase.prototype._setTimeouts = function () {\n  const self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(() => {\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(() => {\n      self._timeoutError(\n        'Response timeout of ',\n        self._responseTimeout,\n        'ETIMEDOUT'\n      );\n    }, this._responseTimeout);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}