{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from '../models/errors';\nimport TokenManager from '../models/token-manager';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nvar SENDER_ID_OPTION_NAME = 'messagingSenderId';\n\nvar ControllerInterface =\n/** @class */\nfunction () {\n  /**\n   * An interface of the Messaging Service API\n   * @param {!firebase.app.App} app\n   */\n  function ControllerInterface(app) {\n    var _this = this;\n\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n\n    if (!app.options[SENDER_ID_OPTION_NAME] || typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {\n      throw this.errorFactory_.create(Errors.codes.BAD_SENDER_ID);\n    }\n\n    this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];\n    this.tokenManager_ = new TokenManager();\n    this.app = app;\n    this.INTERNAL = {};\n\n    this.INTERNAL.delete = function () {\n      return _this.delete;\n    };\n  }\n  /**\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise that\n   * resolves to an FCM token.\n   */\n\n\n  ControllerInterface.prototype.getToken = function () {\n    var _this = this; // Check with permissions\n\n\n    var currentPermission = this.getNotificationPermission_();\n\n    if (currentPermission !== NOTIFICATION_PERMISSION.granted) {\n      if (currentPermission === NOTIFICATION_PERMISSION.denied) {\n        return Promise.reject(this.errorFactory_.create(Errors.codes.NOTIFICATIONS_BLOCKED));\n      } // We must wait for permission to be granted\n\n\n      return Promise.resolve(null);\n    }\n\n    return this.getSWRegistration_().then(function (registration) {\n      return _this.tokenManager_.getSavedToken(_this.messagingSenderId_, registration).then(function (token) {\n        if (token) {\n          return token;\n        }\n\n        return _this.tokenManager_.createToken(_this.messagingSenderId_, registration);\n      });\n    });\n  };\n  /**\n   * This method deletes tokens that the token manager looks after and then\n   * unregisters the push subscription if it exists.\n   * @export\n   * @param {string} token\n   * @return {Promise<void>}\n   */\n\n\n  ControllerInterface.prototype.deleteToken = function (token) {\n    var _this = this;\n\n    return this.tokenManager_.deleteToken(token).then(function () {\n      return _this.getSWRegistration_().then(function (registration) {\n        if (registration) {\n          return registration.pushManager.getSubscription();\n        }\n      }).then(function (subscription) {\n        if (subscription) {\n          return subscription.unsubscribe();\n        }\n      });\n    });\n  };\n\n  ControllerInterface.prototype.getSWRegistration_ = function () {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }; //\n  // The following methods should only be available in the window.\n  //\n\n\n  ControllerInterface.prototype.requestPermission = function () {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!ServiceWorkerRegistration} registration\n   */\n\n\n  ControllerInterface.prototype.useServiceWorker = function (registration) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver\n   * @param {function(!Error)=} optError\n   * @param {function()=} optCompleted\n   * @return {!function()}\n   */\n\n\n  ControllerInterface.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n\n\n  ControllerInterface.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }; //\n  // The following methods are used by the service worker only.\n  //\n\n  /**\n   * @export\n   * @param {function(Object)} callback\n   */\n\n\n  ControllerInterface.prototype.setBackgroundMessageHandler = function (callback) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_SW);\n  }; //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n\n  /**\n   * This method is required to adhere to the Firebase interface.\n   * It closes any currently open indexdb database connections.\n   */\n\n\n  ControllerInterface.prototype.delete = function () {\n    return this.tokenManager_.closeDatabase();\n  };\n  /**\n   * Returns the current Notification Permission state.\n   * @private\n   * @return {string} The currenct permission state.\n   */\n\n\n  ControllerInterface.prototype.getNotificationPermission_ = function () {\n    return Notification.permission;\n  };\n  /**\n   * @protected\n   * @returns {TokenManager}\n   */\n\n\n  ControllerInterface.prototype.getTokenManager = function () {\n    return this.tokenManager_;\n  };\n\n  return ControllerInterface;\n}();\n\nexport default ControllerInterface;","map":{"version":3,"mappings":"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","names":["ErrorFactory","Errors","TokenManager","NOTIFICATION_PERMISSION","SENDER_ID_OPTION_NAME","app","errorFactory_","map","options","create","codes","BAD_SENDER_ID","messagingSenderId_","tokenManager_","INTERNAL","delete","ControllerInterface","currentPermission","getNotificationPermission_","granted","denied","Promise","reject","NOTIFICATIONS_BLOCKED","resolve","getSWRegistration_","then","_this","getSavedToken","registration","token","createToken","deleteToken","pushManager","getSubscription","subscription","unsubscribe","SHOULD_BE_INHERITED","AVAILABLE_IN_WINDOW","nextOrObserver","optError","optCompleted","callback","AVAILABLE_IN_SW","closeDatabase","Notification","permission"],"sources":["../src/controllers/controller-interface.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from '../models/errors';\nimport TokenManager from '../models/token-manager';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\n\nconst SENDER_ID_OPTION_NAME = 'messagingSenderId';\n\nexport default class ControllerInterface {\n  public app;\n  public INTERNAL;\n  protected errorFactory_;\n  private messagingSenderId_: string;\n  private tokenManager_: TokenManager;\n\n  /**\n   * An interface of the Messaging Service API\n   * @param {!firebase.app.App} app\n   */\n  constructor(app) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n\n    if (\n      !app.options[SENDER_ID_OPTION_NAME] ||\n      typeof app.options[SENDER_ID_OPTION_NAME] !== 'string'\n    ) {\n      throw this.errorFactory_.create(Errors.codes.BAD_SENDER_ID);\n    }\n\n    this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];\n\n    this.tokenManager_ = new TokenManager();\n\n    this.app = app;\n    this.INTERNAL = {};\n    this.INTERNAL.delete = () => this.delete;\n  }\n\n  /**\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise that\n   * resolves to an FCM token.\n   */\n  getToken() {\n    // Check with permissions\n    const currentPermission = this.getNotificationPermission_();\n    if (currentPermission !== NOTIFICATION_PERMISSION.granted) {\n      if (currentPermission === NOTIFICATION_PERMISSION.denied) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.NOTIFICATIONS_BLOCKED)\n        );\n      }\n\n      // We must wait for permission to be granted\n      return Promise.resolve(null);\n    }\n\n    return this.getSWRegistration_().then(registration => {\n      return this.tokenManager_\n        .getSavedToken(this.messagingSenderId_, registration)\n        .then(token => {\n          if (token) {\n            return token;\n          }\n\n          return this.tokenManager_.createToken(\n            this.messagingSenderId_,\n            registration\n          );\n        });\n    });\n  }\n\n  /**\n   * This method deletes tokens that the token manager looks after and then\n   * unregisters the push subscription if it exists.\n   * @export\n   * @param {string} token\n   * @return {Promise<void>}\n   */\n  deleteToken(token) {\n    return this.tokenManager_.deleteToken(token).then(() => {\n      return this.getSWRegistration_()\n        .then(registration => {\n          if (registration) {\n            return registration.pushManager.getSubscription();\n          }\n        })\n        .then(subscription => {\n          if (subscription) {\n            return subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  getSWRegistration_(): Promise<ServiceWorkerRegistration> {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n\n  //\n  // The following methods should only be available in the window.\n  //\n\n  requestPermission() {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!ServiceWorkerRegistration} registration\n   */\n  useServiceWorker(registration) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver\n   * @param {function(!Error)=} optError\n   * @param {function()=} optCompleted\n   * @return {!function()}\n   */\n  onMessage(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onTokenRefresh(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  //\n  // The following methods are used by the service worker only.\n  //\n\n  /**\n   * @export\n   * @param {function(Object)} callback\n   */\n  setBackgroundMessageHandler(callback) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_SW);\n  }\n\n  //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n\n  /**\n   * This method is required to adhere to the Firebase interface.\n   * It closes any currently open indexdb database connections.\n   */\n  delete() {\n    return this.tokenManager_.closeDatabase();\n  }\n\n  /**\n   * Returns the current Notification Permission state.\n   * @private\n   * @return {string} The currenct permission state.\n   */\n  getNotificationPermission_() {\n    return (Notification as any).permission;\n  }\n\n  /**\n   * @protected\n   * @returns {TokenManager}\n   */\n  getTokenManager() {\n    return this.tokenManager_;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}