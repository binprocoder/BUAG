{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\n\nexports.validateArgCount = function (fnName, minCount, maxCount, argCount) {\n  var argError;\n\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n\n  if (argError) {\n    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';\n    throw new Error(error);\n  }\n};\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\n\n\nfunction errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n\n    default:\n      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\n  }\n\n  var error = fnName + ' failed: ';\n  error += argName + ' argument ';\n  return error;\n}\n\nexports.errorPrefix = errorPrefix;\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\n\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\n  if (optional && !namespace) return;\n\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');\n  }\n}\n\nexports.validateNamespace = validateNamespace;\n\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\n  if (optional && !callback) return;\n  if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');\n}\n\nexports.validateCallback = validateCallback;\n\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\n  if (optional && !context) return;\n  if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');\n}\n\nexports.validateContextObject = validateContextObject;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AASaA,2BAAmB,UAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA6C;AAC3E,MAAIC,QAAJ;;AACA,MAAID,QAAQ,GAAGF,QAAf,EAAyB;AACvBG,YAAQ,GAAG,cAAcH,QAAzB;AACD,GAFD,MAEO,IAAIE,QAAQ,GAAGD,QAAf,EAAyB;AAC9BE,YAAQ,GAAGF,QAAQ,KAAK,CAAb,GAAiB,MAAjB,GAA0B,kBAAkBA,QAAvD;AACD;;AACD,MAAIE,QAAJ,EAAc;AACZ,QAAIC,KAAK,GACPL,MAAM,GACN,2BADA,GAEAG,QAFA,IAGCA,QAAQ,KAAK,CAAb,GAAiB,YAAjB,GAAgC,aAHjC,IAIA,WAJA,GAKAC,QALA,GAMA,GAPF;AAQA,UAAM,IAAIE,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,CAlBY;AAoBb;;;;;;;;;;AAQA,qBAA4BL,MAA5B,EAAoCO,cAApC,EAAoDC,QAApD,EAA4D;AAC1D,MAAIC,OAAO,GAAG,EAAd;;AACA,UAAQF,cAAR;AACE,SAAK,CAAL;AACEE,aAAO,GAAGD,QAAQ,GAAG,OAAH,GAAa,OAA/B;AACA;;AACF,SAAK,CAAL;AACEC,aAAO,GAAGD,QAAQ,GAAG,QAAH,GAAc,QAAhC;AACA;;AACF,SAAK,CAAL;AACEC,aAAO,GAAGD,QAAQ,GAAG,OAAH,GAAa,OAA/B;AACA;;AACF,SAAK,CAAL;AACEC,aAAO,GAAGD,QAAQ,GAAG,QAAH,GAAc,QAAhC;AACA;;AACF;AACE,YAAM,IAAIF,KAAJ,CACJ,iEADI,CAAN;AAdJ;;AAmBA,MAAID,KAAK,GAAGL,MAAM,GAAG,WAArB;AAEAK,OAAK,IAAII,OAAO,GAAG,YAAnB;AACA,SAAOJ,KAAP;AACD;;AAzBDN;AA2BA;;;;;;;AAMA,2BAAkCC,MAAlC,EAA0CO,cAA1C,EAA0DG,SAA1D,EAAqEF,QAArE,EAA6E;AAC3E,MAAIA,QAAQ,IAAI,CAACE,SAAjB,EAA4B;;AAC5B,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACA,UAAM,IAAIJ,KAAJ,CACJK,WAAW,CAACX,MAAD,EAASO,cAAT,EAAyBC,QAAzB,CAAX,GACE,qCAFE,CAAN;AAID;AACF;;AATDT;;AAWA,0BAAiCC,MAAjC,EAAyCO,cAAzC,EAAyDK,QAAzD,EAAmEJ,QAAnE,EAA2E;AACzE,MAAIA,QAAQ,IAAI,CAACI,QAAjB,EAA2B;AAC3B,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EACE,MAAM,IAAIN,KAAJ,CACJK,WAAW,CAACX,MAAD,EAASO,cAAT,EAAyBC,QAAzB,CAAX,GACE,2BAFE,CAAN;AAIH;;AAPDT;;AASA,+BACEC,MADF,EAEEO,cAFF,EAGEM,OAHF,EAIEL,QAJF,EAIU;AAER,MAAIA,QAAQ,IAAI,CAACK,OAAjB,EAA0B;AAC1B,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EACE,MAAM,IAAIP,KAAJ,CACJK,WAAW,CAACX,MAAD,EAASO,cAAT,EAAyBC,QAAzB,CAAX,GACE,iCAFE,CAAN;AAIH;;AAZDT","names":["exports","fnName","minCount","maxCount","argCount","argError","error","Error","argumentNumber","optional","argName","namespace","errorPrefix","callback","context"],"sources":["../src/validation.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param {!string} fnName The function name\n * @param {!number} minCount The minimum number of arguments to allow for the function call\n * @param {!number} maxCount The maximum number of argument to allow for the function call\n * @param {!number} argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(fnName, minCount, maxCount, argCount) {\n  var argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    var error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param {!string} fnName The function name\n * @param {!number} argumentNumber The index of the argument\n * @param {boolean} optional Whether or not the argument is optional\n * @return {!string} The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  var error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param {!string} fnName\n * @param {!number} argumentNumber\n * @param {!string} namespace\n * @param {boolean} optional\n */\nexport function validateNamespace(fnName, argumentNumber, namespace, optional) {\n  if (optional && !namespace) return;\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(fnName, argumentNumber, callback, optional) {\n  if (optional && !callback) return;\n  if (typeof callback !== 'function')\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n}\n\nexport function validateContextObject(\n  fnName,\n  argumentNumber,\n  context,\n  optional\n) {\n  if (optional && !context) return;\n  if (typeof context !== 'object' || context === null)\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n}\n"]},"metadata":{},"sourceType":"script"}