{"ast":null,"code":"import inforApi from \"../../../api/inforApi\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n\nexport const inforData = createAsyncThunk('infors/inforData', async () => {\n  const infor = await inforApi.infor();\n  return infor;\n});\nconst Infor = createSlice({\n  name: \"infors\",\n  initialState: {\n    infor: [],\n    loading: true,\n    error: ''\n  },\n  reducers: {\n    addinfor: (state, action) => {\n      inforApi.postinfor(action.payload);\n    },\n    removeinfor: (state, action) => {\n      inforApi.deleteinfor(action.payload);\n    },\n    updateinfor: (state, action) => {\n      inforApi.editinfor(action.payload);\n    }\n  },\n  extraReducers: {\n    [inforData.pending]: state => {\n      state.loading = true;\n    },\n    [inforData.rejected]: (state, action) => {\n      state.loading = true;\n      state.error = action.error;\n    },\n    [inforData.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.infor = action.payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = Infor;\nexport const {\n  addinfor,\n  removeinfor,\n  updateinfor\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Trang Tran/Desktop/Project M/frontend/src/features/container/dangnhap/dangnhapSlice.js"],"names":["inforApi","createSlice","createAsyncThunk","require","inforData","infor","Infor","name","initialState","loading","error","reducers","addinfor","state","action","postinfor","payload","removeinfor","deleteinfor","updateinfor","editinfor","extraReducers","pending","rejected","fulfilled","reducer","actions"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,uBAArB;;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AACtE,QAAMG,KAAK,GAAG,MAAML,QAAQ,CAACK,KAAT,EAApB;AACA,SAAOA,KAAP;AACH,CAHwC,CAAlC;AAIP,MAAMC,KAAK,GAAGL,WAAW,CAAC;AACtBM,EAAAA,IAAI,EAAE,QADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVH,IAAAA,KAAK,EAAE,EADG;AAEVI,IAAAA,OAAO,EAAE,IAFC;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFQ;AAOtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBd,MAAAA,QAAQ,CAACe,SAAT,CAAmBD,MAAM,CAACE,OAA1B;AACH,KAHK;AAINC,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5Bd,MAAAA,QAAQ,CAACkB,WAAT,CAAqBJ,MAAM,CAACE,OAA5B;AACH,KANK;AAONG,IAAAA,WAAW,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC5Bd,MAAAA,QAAQ,CAACoB,SAAT,CAAmBN,MAAM,CAACE,OAA1B;AACH;AATK,GAPY;AAkBtBK,EAAAA,aAAa,EAAE;AACX,KAACjB,SAAS,CAACkB,OAAX,GAAsBT,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACL,SAAS,CAACmB,QAAX,GAAsB,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAArB;AACH,KAPU;AAQX,KAACN,SAAS,CAACoB,SAAX,GAAuB,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACE,OAArB;AACH;AAXU;AAlBO,CAAD,CAAzB;AAgCA,MAAM;AAAES,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBpB,KAA7B;AACA,OAAO,MAAM;AAAEM,EAAAA,QAAF;AAAYK,EAAAA,WAAZ;AAAyBE,EAAAA;AAAzB,IAAyCO,OAA/C;AAEP,eAAeD,OAAf","sourcesContent":["import inforApi from \"../../../api/inforApi\";\r\n\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\nexport const inforData = createAsyncThunk('infors/inforData', async () => {\r\n    const infor = await inforApi.infor();\r\n    return infor;\r\n})\r\nconst Infor = createSlice({\r\n    name: \"infors\",\r\n    initialState: {\r\n        infor: [],\r\n        loading: true,\r\n        error: ''\r\n    },\r\n    reducers: {\r\n        addinfor: (state, action) => {\r\n            inforApi.postinfor(action.payload);\r\n        },\r\n        removeinfor: (state, action) => {\r\n            inforApi.deleteinfor(action.payload);\r\n        },\r\n        updateinfor: (state, action) => {\r\n            inforApi.editinfor(action.payload);\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [inforData.pending]: (state) => {\r\n            state.loading = true;\r\n        },\r\n        [inforData.rejected]: (state, action) => {\r\n            state.loading = true;\r\n            state.error = action.error;\r\n        },\r\n        [inforData.fulfilled]: (state, action) => {\r\n            state.loading = false;\r\n            state.infor = action.payload;\r\n        }\r\n    }\r\n});\r\nconst { reducer, actions } = Infor;\r\nexport const { addinfor, removeinfor, updateinfor } = actions;\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}