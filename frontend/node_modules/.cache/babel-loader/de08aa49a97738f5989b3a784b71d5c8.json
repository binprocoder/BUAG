{"ast":null,"code":"import responsecommentApi from \"../../../../api/responsecommentApi\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n\nexport const responsecommentData = createAsyncThunk('responsecomments/responsecommentData', async () => {\n  const responsecomment = await responsecommentApi.getAll();\n  return responsecomment;\n});\nconst Responsecomment = createSlice({\n  name: \"responsecomments\",\n  initialState: {\n    responsecomment: [],\n    loading: true,\n    error: ''\n  },\n  reducers: {\n    addresponsecomment: (state, action) => {\n      responsecommentApi.postresponsecomment(action.payload);\n    },\n    removeresponsecomment: (state, action) => {\n      responsecommentApi.deleteresponsecomment(action.payload);\n    },\n    updateresponsecomment: (state, action) => {\n      responsecommentApi.editresponsecomment(action.payload);\n    }\n  },\n  extraReducers: {\n    [responsecommentData.pending]: state => {\n      state.loading = true;\n    },\n    [responsecommentData.rejected]: (state, action) => {\n      state.loading = true;\n      state.error = action.error;\n    },\n    [responsecommentData.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.hoadon = action.payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = Responsecomment;\nexport const {\n  addresponsecomment,\n  removeresponsecomment,\n  updateresponsecomment\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Bin Tran/Desktop/BUAG/BUAG/frontend/src/features/container/admin/PhanHoi/PhanhoiSlice.js"],"names":["responsecommentApi","createSlice","createAsyncThunk","require","responsecommentData","responsecomment","getAll","Responsecomment","name","initialState","loading","error","reducers","addresponsecomment","state","action","postresponsecomment","payload","removeresponsecomment","deleteresponsecomment","updateresponsecomment","editresponsecomment","extraReducers","pending","rejected","fulfilled","hoadon","reducer","actions"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,oCAA/B;;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,OAAO,MAAMC,mBAAmB,GAAGF,gBAAgB,CAAC,sCAAD,EAAyC,YAAY;AACpG,QAAMG,eAAe,GAAG,MAAML,kBAAkB,CAACM,MAAnB,EAA9B;AACA,SAAOD,eAAP;AACH,CAHkD,CAA5C;AAIP,MAAME,eAAe,GAAGN,WAAW,CAAC;AAChCO,EAAAA,IAAI,EAAE,kBAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACVJ,IAAAA,eAAe,EAAE,EADP;AAEVK,IAAAA,OAAO,EAAE,IAFC;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFkB;AAOhCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnCf,MAAAA,kBAAkB,CAACgB,mBAAnB,CAAuCD,MAAM,CAACE,OAA9C;AACH,KAHK;AAINC,IAAAA,qBAAqB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACtCf,MAAAA,kBAAkB,CAACmB,qBAAnB,CAAyCJ,MAAM,CAACE,OAAhD;AACH,KANK;AAONG,IAAAA,qBAAqB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACtCf,MAAAA,kBAAkB,CAACqB,mBAAnB,CAAuCN,MAAM,CAACE,OAA9C;AACH;AATK,GAPsB;AAkBhCK,EAAAA,aAAa,EAAE;AACX,KAAClB,mBAAmB,CAACmB,OAArB,GAAgCT,KAAD,IAAW;AACtCA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACN,mBAAmB,CAACoB,QAArB,GAAgC,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAArB;AACH,KAPU;AAQX,KAACP,mBAAmB,CAACqB,SAArB,GAAiC,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACY,MAAN,GAAeX,MAAM,CAACE,OAAtB;AACH;AAXU;AAlBiB,CAAD,CAAnC;AAgCA,MAAM;AAAEU,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBrB,eAA7B;AACA,OAAO,MAAM;AAAEM,EAAAA,kBAAF;AAAsBK,EAAAA,qBAAtB;AAA6CE,EAAAA;AAA7C,IAAuEQ,OAA7E;AAEP,eAAeD,OAAf","sourcesContent":["import responsecommentApi from \"../../../../api/responsecommentApi\";\r\n\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\nexport const responsecommentData = createAsyncThunk('responsecomments/responsecommentData', async () => {\r\n    const responsecomment = await responsecommentApi.getAll();\r\n    return responsecomment;\r\n})\r\nconst Responsecomment = createSlice({\r\n    name: \"responsecomments\",\r\n    initialState: {\r\n        responsecomment: [],\r\n        loading: true,\r\n        error: ''\r\n    },\r\n    reducers: {\r\n        addresponsecomment: (state, action) => {\r\n            responsecommentApi.postresponsecomment(action.payload);\r\n        },\r\n        removeresponsecomment: (state, action) => {\r\n            responsecommentApi.deleteresponsecomment(action.payload);\r\n        },\r\n        updateresponsecomment: (state, action) => {\r\n            responsecommentApi.editresponsecomment(action.payload);\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [responsecommentData.pending]: (state) => {\r\n            state.loading = true;\r\n        },\r\n        [responsecommentData.rejected]: (state, action) => {\r\n            state.loading = true;\r\n            state.error = action.error;\r\n        },\r\n        [responsecommentData.fulfilled]: (state, action) => {\r\n            state.loading = false;\r\n            state.hoadon = action.payload;\r\n        }\r\n    }\r\n});\r\nconst { reducer, actions } = Responsecomment;\r\nexport const { addresponsecomment, removeresponsecomment, updateresponsecomment } = actions;\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}