{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"./util/util\");\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\n\n\nvar AuthTokenProvider =\n/** @class */\nfunction () {\n  /**\n   * @param {!FirebaseApp} app_\n   */\n  function AuthTokenProvider(app_) {\n    this.app_ = app_;\n  }\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n\n\n  AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, // .catch\n    function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        util_1.log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n\n  AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  };\n\n  AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  };\n\n  AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.app_.options) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    util_1.warn(errorMessage);\n  };\n\n  return AuthTokenProvider;\n}();\n\nexports.AuthTokenProvider = AuthTokenProvider;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAiBA;AAEA;;;;;AAGA;AAAA;AAAA;AACE;;;AAGA,6BAAoBA,IAApB,EAAqC;AAAjB;AAAqB;AAEzC;;;;;;AAIAC,mDAASC,YAAT,EAA8B;AAC5B,WAAO,KAAKF,IAAL,CAAU,UAAV,EAAsB,UAAtB,EAAkCE,YAAlC,EAAgDC,IAAhD,CACL,IADK,EAEL;AACA,cAASC,KAAT,EAAc;AACZ;AACA;AACA,UAAIA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,4BAA5B,EAA0D;AACxDC,mBAAI,gEAAJ;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACL,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;AACF,KAZI,CAAP;AAcD,GAfD;;AAiBAH,iEAAuBQ,QAAvB,EAA+D;AAC7D;AACA;AACA,SAAKT,IAAL,CAAU,UAAV,EAAsB,sBAAtB,EAA8CS,QAA9C;AACD,GAJD;;AAMAR,oEAA0BQ,QAA1B,EAAkE;AAChE,SAAKT,IAAL,CAAU,UAAV,EAAsB,yBAAtB,EAAiDS,QAAjD;AACD,GAFD;;AAIAR;AACE,QAAIS,YAAY,GACd,4DACA,KAAKV,IAAL,CAAUW,IADV,GAEA,yDAFA,GAGA,yBAJF;;AAKA,QAAI,gBAAgB,KAAKX,IAAL,CAAUY,OAA9B,EAAuC;AACrCF,kBAAY,IACV,qEACA,8EADA,GAEA,UAHF;AAID,KALD,MAKO,IAAI,oBAAoB,KAAKV,IAAL,CAAUY,OAAlC,EAA2C;AAChDF,kBAAY,IACV,yEACA,8EADA,GAEA,UAHF;AAID,KALM,MAKA;AACLA,kBAAY,IACV,qEACA,4DADA,GAEA,uCAHF;AAID;;AACDJ,gBAAKI,YAAL;AACD,GAvBD;;AAwBF;AA7DA;;AAAaG","names":["app_","AuthTokenProvider","forceRefresh","then","error","code","util_1","Promise","reject","listener","errorMessage","name","options","exports"],"sources":["../src/core/AuthTokenProvider.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseAuthTokenData } from '@firebase/app';\nimport { log, warn } from './util/util';\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class AuthTokenProvider {\n  /**\n   * @param {!FirebaseApp} app_\n   */\n  constructor(private app_: FirebaseApp) {}\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(\n      null,\n      // .catch\n      function(error) {\n        // TODO: Need to figure out all the cases this is raised and whether\n        // this makes sense.\n        if (error && error.code === 'auth/token-not-initialized') {\n          log('Got auth/token-not-initialized error.  Treating as null token.');\n          return null;\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    );\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}