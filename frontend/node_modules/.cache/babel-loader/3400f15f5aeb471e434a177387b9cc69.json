{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar validation_1 = require(\"../core/util/validation\");\n\nvar util_2 = require(\"../core/util/util\");\n\nvar util_3 = require(\"@firebase/util\");\n/**\n * @constructor\n */\n\n\nvar OnDisconnect =\n/** @class */\nfunction () {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n\n\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    util_1.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    util_1.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n\n\n  OnDisconnect.prototype.remove = function (onComplete) {\n    util_1.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.remove', this.path_);\n    util_1.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n\n\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    util_1.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.set', this.path_);\n    validation_1.validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    util_1.validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    util_1.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validation_1.validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validation_1.validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    util_1.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n\n\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    util_1.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validation_1.validateWritablePath('OnDisconnect.update', this.path_);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      util_2.warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validation_1.validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    util_1.validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new util_3.Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n\n  return OnDisconnect;\n}();\n\nexports.OnDisconnect = OnDisconnect;","map":{"version":3,"mappings":"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","names":["repo_","path_","OnDisconnect","onComplete","util_1","arguments","length","deferred","util_3","onDisconnectCancel","wrapCallback","promise","validation_1","onDisconnectSet","value","priority","onDisconnectSetWithPriority","objectToMerge","Array","isArray","newObjectToMerge","i","util_2","onDisconnectUpdate","exports"],"sources":["../src/api/onDisconnect.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: any, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: any,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}