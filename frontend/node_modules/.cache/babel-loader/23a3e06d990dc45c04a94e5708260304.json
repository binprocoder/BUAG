{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar util_3 = require(\"@firebase/util\");\n\nvar util_4 = require(\"@firebase/util\");\n\nvar util_5 = require(\"@firebase/util\");\n\nvar util_6 = require(\"@firebase/util\");\n\nvar storage_1 = require(\"../storage/storage\");\n\nvar util_7 = require(\"@firebase/util\");\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\n\n\nexports.LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\n\n\nexports.sha1 = function (str) {\n  var utf8Bytes = util_5.stringToByteArray(str);\n  var sha1 = new util_4.Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return util_3.base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\n\n\nvar buildLogMessage_ = function () {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = '';\n\n  for (var i = 0; i < var_args.length; i++) {\n    if (Array.isArray(var_args[i]) || var_args[i] && typeof var_args[i] === 'object' && typeof var_args[i].length === 'number') {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += util_6.stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\n\n\nexports.logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\n\nexports.enableLogging = function (logger_, persistent) {\n  util_1.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    if (typeof console !== 'undefined') {\n      if (typeof console.log === 'function') {\n        exports.logger = console.log.bind(console);\n      } else if (typeof console.log === 'object') {\n        // IE does this.\n        exports.logger = function (message) {\n          console.log(message);\n        };\n      }\n    }\n\n    if (persistent) storage_1.SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    exports.logger = logger_;\n  } else {\n    exports.logger = null;\n    storage_1.SessionStorage.remove('logging_enabled');\n  }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\n\n\nexports.log = function () {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (exports.logger === null && storage_1.SessionStorage.get('logging_enabled') === true) exports.enableLogging(true);\n  }\n\n  if (exports.logger) {\n    var message = buildLogMessage_.apply(null, var_args);\n    exports.logger(message);\n  }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\n\n\nexports.logWrapper = function (prefix) {\n  return function () {\n    var var_args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      var_args[_i] = arguments[_i];\n    }\n\n    exports.log.apply(void 0, [prefix].concat(var_args));\n  };\n};\n/**\r\n * @param {...string} var_args\r\n */\n\n\nexports.error = function () {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  if (typeof console !== 'undefined') {\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\n\n    if (typeof console.error !== 'undefined') {\n      console.error(message);\n    } else {\n      console.log(message);\n    }\n  }\n};\n/**\r\n * @param {...string} var_args\r\n */\n\n\nexports.fatal = function () {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = buildLogMessage_.apply(void 0, var_args);\n  throw new Error('FIREBASE FATAL ERROR: ' + message);\n};\n/**\r\n * @param {...*} var_args\r\n */\n\n\nexports.warn = function () {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  if (typeof console !== 'undefined') {\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\n\n    if (typeof console.warn !== 'undefined') {\n      console.warn(message);\n    } else {\n      console.log(message);\n    }\n  }\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nexports.warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    exports.warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * @param {!String} methodName\r\n */\n\n\nexports.warnAboutUnsupportedMethod = function (methodName) {\n  exports.warn(methodName + ' is unsupported and will likely change soon.  ' + 'Please do not use.');\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\n\n\nexports.isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data != data || // NaN\n  data == Number.POSITIVE_INFINITY || data == Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\n\n\nexports.executeWhenDOMReady = function (fn) {\n  if (util_7.isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n\n    var wrappedFn_1 = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn_1, false);\n    } else if (document.attachEvent) {\n      // IE.\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') wrappedFn_1();\n      }); // fallback to onload.\n\n      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\n\n\nexports.MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\n\nexports.MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\n\nexports.nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === exports.MIN_NAME || b === exports.MAX_NAME) {\n    return -1;\n  } else if (b === exports.MIN_NAME || a === exports.MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = exports.tryParseInt(a),\n        bAsInt = exports.tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\n\n\nexports.stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\n\n\nexports.requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + util_6.stringify(obj));\n  }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\n\n\nexports.ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) return util_6.stringify(obj);\n  var keys = [];\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += util_6.stringify(keys[i]);\n    key += ':';\n    key += exports.ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\n\n\nexports.splitStringBySize = function (str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\n\n\nexports.each = function (obj, fn) {\n  if (Array.isArray(obj)) {\n    for (var i = 0; i < obj.length; ++i) {\n      fn(i, obj[i]);\n    }\n  } else {\n    /**\r\n     * in the conversion of code we removed the goog.object.forEach\r\n     * function which did a value,key callback. We standardized on\r\n     * a single impl that does a key, value callback. So we invert\r\n     * to not have to touch the `each` code points\r\n     */\n    util_2.forEach(obj, function (key, val) {\n      return fn(val, key);\n    });\n  }\n};\n/**\r\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\r\n * @param {function(*)} callback Callback function.\r\n * @param {?Object=} context Optional context to bind to.\r\n * @return {function(*)}\r\n */\n\n\nexports.bindCallback = function (callback, context) {\n  return context ? callback.bind(context) : callback;\n};\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\n\n\nexports.doubleToIEEE754String = function (v) {\n  util_1.assert(!exports.isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1,\n      s,\n      e,\n      f,\n      ln,\n      i,\n      bits,\n      str; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\n\n\nexports.isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\n\n\nexports.isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\n\n\nexports.errorForServerCode = function (code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\n  error.code = code.toUpperCase();\n  return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nexports.INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\n\nexports.tryParseInt = function (str) {\n  if (exports.INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\n\n\nexports.exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      exports.warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * Helper function to safely call opt_callback with the specified arguments.  It:\r\n * 1. Turns into a no-op if opt_callback is null or undefined.\r\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\r\n *\r\n * @param {?Function=} callback Optional onComplete callback.\r\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\r\n */\n\n\nexports.callUserCallback = function (callback) {\n  var var_args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    var_args[_i - 1] = arguments[_i];\n  }\n\n  if (typeof callback === 'function') {\n    exports.exceptionGuard(function () {\n      callback.apply(void 0, var_args);\n    });\n  }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\n\n\nexports.beingCrawled = function () {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Export a property of an object using a getter function.\r\n *\r\n * @param {!Object} object\r\n * @param {string} name\r\n * @param {!function(): *} fnGet\r\n */\n\n\nexports.exportPropGetter = function (object, name, fnGet) {\n  Object.defineProperty(object, name, {\n    get: fnGet\n  });\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\n\n\nexports.setTimeoutNonBlocking = function (fn, time) {\n  var timeout = setTimeout(fn, time);\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    timeout['unref']();\n  }\n\n  return timeout;\n};","map":{"version":3,"mappings":"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","names":["exports","id","str","utf8Bytes","util_5","sha1","util_4","update","sha1Bytes","digest","util_3","encodeByteArray","buildLogMessage_","var_args","message","i","length","Array","isArray","apply","util_6","firstLog_","logger_","persistent","util_1","console","log","bind","storage_1","set","remove","get","prefix","concat","error","Error","warn","window","location","protocol","indexOf","methodName","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","fn","util_7","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","a","b","aAsInt","bAsInt","key","obj","keys","k","push","sort","segsize","len","dataSegs","c","substring","util_2","val","callback","context","v","ebits","fbits","bias","s","e","f","ln","bits","Infinity","abs","pow","min","LN2","round","reverse","join","hexByteString","hexByte","parseInt","substr","toString","toLowerCase","test","href","Windows","UI","code","query","reason","path","toUpperCase","RegExp","intVal","stack","userAgent","search","object","name","fnGet","Object","defineProperty","time","timeout"],"sources":["../src/core/util/util.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\n\ndeclare const window: any;\ndeclare const Windows: any;\n\nimport { assert } from '@firebase/util';\nimport { forEach } from '@firebase/util';\nimport { base64 } from '@firebase/util';\nimport { Sha1 } from '@firebase/util';\nimport { stringToByteArray } from '@firebase/util';\nimport { stringify } from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { isNodeSdk } from '@firebase/util';\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: (() => number) = (function() {\n  let id = 1;\n  return function() {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} var_args\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function(...var_args: any[]): string {\n  let message = '';\n  for (let i = 0; i < var_args.length; i++) {\n    if (\n      Array.isArray(var_args[i]) ||\n      (var_args[i] &&\n        typeof var_args[i] === 'object' &&\n        typeof var_args[i].length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function(\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || (logger_ === true || logger_ === false),\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    if (typeof console !== 'undefined') {\n      if (typeof console.log === 'function') {\n        logger = console.log.bind(console);\n      } else if (typeof console.log === 'object') {\n        // IE does this.\n        logger = function(message) {\n          console.log(message);\n        };\n      }\n    }\n    if (persistent) SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} var_args\n */\nexport const log = function(...var_args: string[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true)\n      enableLogging(true);\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, var_args);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function(\n  prefix: string\n): (...var_args: any[]) => void {\n  return function(...var_args: any[]) {\n    log(prefix, ...var_args);\n  };\n};\n\n/**\n * @param {...string} var_args\n */\nexport const error = function(...var_args: string[]) {\n  if (typeof console !== 'undefined') {\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...var_args);\n    if (typeof console.error !== 'undefined') {\n      console.error(message);\n    } else {\n      console.log(message);\n    }\n  }\n};\n\n/**\n * @param {...string} var_args\n */\nexport const fatal = function(...var_args: string[]) {\n  const message = buildLogMessage_(...var_args);\n  throw new Error('FIREBASE FATAL ERROR: ' + message);\n};\n\n/**\n * @param {...*} var_args\n */\nexport const warn = function(...var_args: any[]) {\n  if (typeof console !== 'undefined') {\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...var_args);\n    if (typeof console.warn !== 'undefined') {\n      console.warn(message);\n    } else {\n      console.log(message);\n    }\n  }\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function(methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function(data: any): boolean {\n  return (\n    typeof data === 'number' &&\n    (data != data || // NaN\n      data == Number.POSITIVE_INFINITY ||\n      data == Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function(fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    let wrappedFn = function() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n    } else if ((document as any).attachEvent) {\n      // IE.\n      (document as any).attachEvent('onreadystatechange', function() {\n        if (document.readyState === 'complete') wrappedFn();\n      });\n      // fallback to onload.\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function(\n  key: string,\n  obj: { [k: string]: any }\n): any {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function(obj: any): string {\n  if (typeof obj !== 'object' || obj === null) return stringify(obj);\n\n  const keys = [];\n  for (let k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function(\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param {!(Object|Array)} obj The object or array to iterate over\n * @param {function(?, ?)} fn The function to apply\n */\nexport const each = function(\n  obj: Object | Array<any>,\n  fn: (v?: any, k?: any) => void\n) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; ++i) {\n      fn(i, obj[i]);\n    }\n  } else {\n    /**\n     * in the conversion of code we removed the goog.object.forEach\n     * function which did a value,key callback. We standardized on\n     * a single impl that does a key, value callback. So we invert\n     * to not have to touch the `each` code points\n     */\n    forEach(obj, (key: any, val: any) => fn(val, key));\n  }\n};\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function(\n  callback: (a: any) => void,\n  context?: object | null\n): Function {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function(v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  let bias = (1 << (ebits - 1)) - 1,\n    s,\n    e,\n    f,\n    ln,\n    i,\n    bits,\n    str;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function(): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function(): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function(code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function(str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function(fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function() {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function(\n  callback?: Function | null,\n  ...var_args: any[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(function() {\n      callback(...var_args);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function(): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function(\n  object: Object,\n  name: string,\n  fnGet: () => any\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function(\n  fn: Function,\n  time: number\n): number | Object {\n  const timeout: number | Object = setTimeout(fn, time);\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n"]},"metadata":{},"sourceType":"script"}