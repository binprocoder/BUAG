{"ast":null,"code":"import tourApi from \"../../../../api/tourApi\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n\nexport const tourData = createAsyncThunk('tours/tourData', async () => {\n  const tour = await tourApi.getAll();\n  return tour;\n});\nvar datatour = [];\nconst Tour = createSlice({\n  name: \"tours\",\n  initialState: {\n    tour: [],\n    Loading: true,\n    error: ''\n  },\n  reducers: {\n    addtour: (state, action) => {\n      tourApi.posttour(action.payload);\n    },\n    removetour: (state, action) => {\n      tourApi.deletetour(action.payload);\n    },\n    updatetour: (state, action) => {\n      tourApi.edittour(action.payload);\n    }\n  },\n  extraReducers: {\n    [tourData.pending]: state => {\n      state.Loading = true;\n    },\n    [tourData.rejected]: (state, action) => {\n      state.Loading = true;\n      state.error = action.error;\n    },\n    [tourData.fulfilled]: (state, action) => {\n      state.Loading = false;\n      state.tour = action.payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = Tour;\nexport const {\n  addtour,\n  removetour,\n  updatetour\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Trang Tran/Desktop/Project/frontend/src/features/container/admin/Tour/tourSlice.js"],"names":["tourApi","createSlice","createAsyncThunk","require","tourData","tour","getAll","datatour","Tour","name","initialState","Loading","error","reducers","addtour","state","action","posttour","payload","removetour","deletetour","updatetour","edittour","extraReducers","pending","rejected","fulfilled","reducer","actions"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,yBAApB;;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACnE,QAAMG,IAAI,GAAG,MAAML,OAAO,CAACM,MAAR,EAAnB;AACA,SAAOD,IAAP;AACH,CAHuC,CAAjC;AAIP,IAAIE,QAAQ,GAAG,EAAf;AACA,MAAMC,IAAI,GAAGP,WAAW,CAAC;AACrBQ,EAAAA,IAAI,EAAE,OADe;AAErBC,EAAAA,YAAY,EAAE;AACVL,IAAAA,IAAI,EAAE,EADI;AAEVM,IAAAA,OAAO,EAAE,IAFC;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFO;AAOrBC,EAAAA,QAAQ,EAAE;AAENC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxBhB,MAAAA,OAAO,CAACiB,QAAR,CAAiBD,MAAM,CAACE,OAAxB;AACH,KAJK;AAKNC,IAAAA,UAAU,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC3BhB,MAAAA,OAAO,CAACoB,UAAR,CAAmBJ,MAAM,CAACE,OAA1B;AACH,KAPK;AAQNG,IAAAA,UAAU,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC3BhB,MAAAA,OAAO,CAACsB,QAAR,CAAiBN,MAAM,CAACE,OAAxB;AACH;AAVK,GAPW;AAmBrBK,EAAAA,aAAa,EAAE;AACX,KAACnB,QAAQ,CAACoB,OAAV,GAAqBT,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACP,QAAQ,CAACqB,QAAV,GAAqB,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAArB;AACH,KAPU;AAQX,KAACR,QAAQ,CAACsB,SAAV,GAAsB,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACV,IAAN,GAAaW,MAAM,CAACE,OAApB;AACH;AAXU;AAnBM,CAAD,CAAxB;AAiCA,MAAM;AAAES,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBpB,IAA7B;AACA,OAAO,MAAM;AAAEM,EAAAA,OAAF;AAAWK,EAAAA,UAAX;AAAuBE,EAAAA;AAAvB,IAAsCO,OAA5C;AAEP,eAAeD,OAAf","sourcesContent":["import tourApi from \"../../../../api/tourApi\";\r\n\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\nexport const tourData = createAsyncThunk('tours/tourData', async () => {\r\n    const tour = await tourApi.getAll();\r\n    return tour;\r\n})\r\nvar datatour = [];\r\nconst Tour = createSlice({\r\n    name: \"tours\",\r\n    initialState: {\r\n        tour: [],\r\n        Loading: true,\r\n        error: ''\r\n    },\r\n    reducers: {\r\n\r\n        addtour: (state, action) => {\r\n            tourApi.posttour(action.payload);\r\n        },\r\n        removetour: (state, action) => {\r\n            tourApi.deletetour(action.payload);\r\n        },\r\n        updatetour: (state, action) => {\r\n            tourApi.edittour(action.payload);\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [tourData.pending]: (state) => {\r\n            state.Loading = true;\r\n        },\r\n        [tourData.rejected]: (state, action) => {\r\n            state.Loading = true;\r\n            state.error = action.error;\r\n        },\r\n        [tourData.fulfilled]: (state, action) => {\r\n            state.Loading = false;\r\n            state.tour = action.payload;\r\n        }\r\n    }\r\n});\r\nconst { reducer, actions } = Tour;\r\nexport const { addtour, removetour, updatetour } = actions;\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}