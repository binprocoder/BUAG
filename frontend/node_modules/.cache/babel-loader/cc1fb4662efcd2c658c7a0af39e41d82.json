{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\n\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n\n  MemoryStorage.prototype.get = function (key) {\n    if (util_1.contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  };\n\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n\n  return MemoryStorage;\n}();\n\nexports.MemoryStorage = MemoryStorage;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AACU,kBAA+B,EAA/B;AAqBR,6BAAoB,IAApB;AACD;;AApBCA,0CAAIC,GAAJ,EAAiBC,KAAjB,EAAkC;AAChC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,KAAKC,MAAL,CAAYF,GAAZ,CAAP;AACD,KAFD,MAEO;AACL,WAAKE,MAAL,CAAYF,GAAZ,IAAmBC,KAAnB;AACD;AACF,GAND;;AAQAF,0CAAIC,GAAJ,EAAe;AACb,QAAIG,gBAAS,KAAKD,MAAd,EAAsBF,GAAtB,CAAJ,EAAgC;AAC9B,aAAO,KAAKE,MAAL,CAAYF,GAAZ,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GALD;;AAOAD,6CAAOC,GAAP,EAAkB;AAChB,WAAO,KAAKE,MAAL,CAAYF,GAAZ,CAAP;AACD,GAFD;;AAKF;AAvBA;;AAAaI","names":["MemoryStorage","key","value","cache_","util_1","exports"],"sources":["../src/core/storage/MemoryStorage.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: any } = {};\n\n  set(key: string, value: any | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): any {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n"]},"metadata":{},"sourceType":"script"}