{"ast":null,"code":"/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Defines the Firebase Storage Reference class.\r\n */\nimport * as args from './implementation/args';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { UploadTask } from './task';\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @param location An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(authWrapper, location) {\n    this.authWrapper = authWrapper;\n\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n  /**\r\n   * @return The URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  Reference.prototype.toString = function () {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  };\n\n  Reference.prototype.newRef = function (authWrapper, location) {\n    return new Reference(authWrapper, location);\n  };\n\n  Reference.prototype.mappings = function () {\n    return metadata.getMappings();\n  };\n  /**\r\n   * @return A reference to the object obtained by\r\n   *     appending childPath, removing any duplicate, beginning, or trailing\r\n   *     slashes.\r\n   */\n\n\n  Reference.prototype.child = function (childPath) {\n    args.validate('child', [args.stringSpec()], arguments);\n    var newPath = path.child(this.location.path, childPath);\n    var location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  };\n\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    /**\r\n     * @return A reference to the parent of the\r\n     *     current object, or null if the current object is the root.\r\n     */\n    get: function () {\n      var newPath = path.parent(this.location.path);\n\n      if (newPath === null) {\n        return null;\n      }\n\n      var location = new Location(this.location.bucket, newPath);\n      return this.newRef(this.authWrapper, location);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * @return An reference to the root of this\r\n     *     object's bucket.\r\n     */\n    get: function () {\n      var location = new Location(this.location.bucket, '');\n      return this.newRef(this.authWrapper, location);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    get: function () {\n      return this.location.bucket;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    get: function () {\n      return this.location.path;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    get: function () {\n      return path.lastComponent(this.location.path);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    get: function () {\n      return this.authWrapper.service();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data The blob to upload.\r\n   * @return An UploadTask that lets you control and\r\n   *     observe the upload.\r\n   */\n\n  Reference.prototype.put = function (data, metadata) {\n    if (metadata === void 0) {\n      metadata = null;\n    }\n\n    args.validate('put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('put');\n    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param string The string to upload.\r\n   * @param opt_format The format of the string to upload.\r\n   * @return An UploadTask that lets you control and\r\n   *     observe the upload.\r\n   */\n\n\n  Reference.prototype.putString = function (string, format, opt_metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n\n    args.validate('putString', [args.stringSpec(), args.stringSpec(fbsString.formatValidator, true), args.metadataSpec(true)], arguments);\n    this.throwIfRoot_('putString');\n    var data = fbsString.dataFromString(format, string);\n    var metadata = object.clone(opt_metadata);\n\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n\n    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadata);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @return A promise that resolves if the deletion succeeds.\r\n   */\n\n\n  Reference.prototype.delete = function () {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\r\n   *     A promise that resolves with the metadata for this object. If this\r\n   *     object doesn't exist or metadata cannot be retreived, the promise is\r\n   *     rejected.\r\n   */\n\n\n  Reference.prototype.getMetadata = function () {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.getMetadata(self.authWrapper, self.location, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata The new metadata for the object.\r\n   *     Only values that have been explicitly set will be changed. Explicitly\r\n   *     setting a value to null will remove the metadata.\r\n   * @return A promise that resolves\r\n   *     with the new metadata for this object.\r\n   *     @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  Reference.prototype.updateMetadata = function (metadata) {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    var self = this;\n    return this.authWrapper.getAuthToken().then(function (authToken) {\n      var requestInfo = requests.updateMetadata(self.authWrapper, self.location, metadata, self.mappings());\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  };\n  /**\r\n   * @return A promise that resolves with the download\r\n   *     URL for this object.\r\n   */\n\n\n  Reference.prototype.getDownloadURL = function () {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function (metadata) {\n      var url = metadata['downloadURLs'][0];\n\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  };\n\n  Reference.prototype.throwIfRoot_ = function (name) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  };\n\n  return Reference;\n}();\n\nexport { Reference };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;;AAGA,OAAO,KAAKA,IAAZ,MAAsB,uBAAtB;AAEA,SAASC,OAAT,QAAwB,uBAAxB;AACA,OAAO,KAAKC,aAAZ,MAA+B,wBAA/B;AAEA,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,2BAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,yBAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,uBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,2BAA1B;AACA,OAAO,KAAKC,SAAZ,MAA2B,yBAA3B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAO,KAAKC,IAAZ,MAAsB,uBAAtB;AAGA,SAASC,UAAT,QAA2B,QAA3B;AAEA;;;;;;;;;;;;AAWA;AAAA;AAAA;AAGE,qBAAsBC,WAAtB,EAAgDC,QAAhD,EAA2E;AAArD;;AACpB,QAAIA,QAAQ,YAAYV,QAAxB,EAAkC;AAChC,WAAKU,QAAL,GAAgBA,QAAhB;AACD,KAFD,MAEO;AACL,WAAKA,QAAL,GAAgBV,QAAQ,CAACW,WAAT,CAAqBD,QAArB,CAAhB;AACD;AACF;AAED;;;;;;;AAKAE;AACEf,QAAI,CAACgB,QAAL,CAAc,UAAd,EAA0B,EAA1B,EAA8BC,SAA9B;AACA,WAAO,UAAU,KAAKJ,QAAL,CAAcK,MAAxB,GAAiC,GAAjC,GAAuC,KAAKL,QAAL,CAAcP,IAA5D;AACD,GAHD;;AAKUS,+BAAV,UAAiBH,WAAjB,EAA2CC,QAA3C,EAA6D;AAC3D,WAAO,IAAIE,SAAJ,CAAcH,WAAd,EAA2BC,QAA3B,CAAP;AACD,GAFS;;AAIAE,iCAAV;AACE,WAAOX,QAAQ,CAACe,WAAT,EAAP;AACD,GAFS;AAIV;;;;;;;AAKAJ,wCAAMK,SAAN,EAAuB;AACrBpB,QAAI,CAACgB,QAAL,CAAc,OAAd,EAAuB,CAAChB,IAAI,CAACqB,UAAL,EAAD,CAAvB,EAA4CJ,SAA5C;AACA,QAAIK,OAAO,GAAGhB,IAAI,CAACiB,KAAL,CAAW,KAAKV,QAAL,CAAcP,IAAzB,EAA+Bc,SAA/B,CAAd;AACA,QAAIP,QAAQ,GAAG,IAAIV,QAAJ,CAAa,KAAKU,QAAL,CAAcK,MAA3B,EAAmCI,OAAnC,CAAf;AACA,WAAO,KAAKE,MAAL,CAAY,KAAKZ,WAAjB,EAA8BC,QAA9B,CAAP;AACD,GALD;;AAWAY,wBAAIV,mBAAJ,EAAI,QAAJ,EAAU;AAJV;;;;SAIA;AACE,UAAIO,OAAO,GAAGhB,IAAI,CAACoB,MAAL,CAAY,KAAKb,QAAL,CAAcP,IAA1B,CAAd;;AACA,UAAIgB,OAAO,KAAK,IAAhB,EAAsB;AACpB,eAAO,IAAP;AACD;;AACD,UAAIT,QAAQ,GAAG,IAAIV,QAAJ,CAAa,KAAKU,QAAL,CAAcK,MAA3B,EAAmCI,OAAnC,CAAf;AACA,aAAO,KAAKE,MAAL,CAAY,KAAKZ,WAAjB,EAA8BC,QAA9B,CAAP;AACD,KAPS;oBAAA;;AAAA,GAAV;AAaAY,wBAAIV,mBAAJ,EAAI,MAAJ,EAAQ;AAJR;;;;SAIA;AACE,UAAIF,QAAQ,GAAG,IAAIV,QAAJ,CAAa,KAAKU,QAAL,CAAcK,MAA3B,EAAmC,EAAnC,CAAf;AACA,aAAO,KAAKM,MAAL,CAAY,KAAKZ,WAAjB,EAA8BC,QAA9B,CAAP;AACD,KAHO;oBAAA;;AAAA,GAAR;AAKAY,wBAAIV,mBAAJ,EAAI,QAAJ,EAAU;SAAV;AACE,aAAO,KAAKF,QAAL,CAAcK,MAArB;AACD,KAFS;oBAAA;;AAAA,GAAV;AAIAO,wBAAIV,mBAAJ,EAAI,UAAJ,EAAY;SAAZ;AACE,aAAO,KAAKF,QAAL,CAAcP,IAArB;AACD,KAFW;oBAAA;;AAAA,GAAZ;AAIAmB,wBAAIV,mBAAJ,EAAI,MAAJ,EAAQ;SAAR;AACE,aAAOT,IAAI,CAACqB,aAAL,CAAmB,KAAKd,QAAL,CAAcP,IAAjC,CAAP;AACD,KAFO;oBAAA;;AAAA,GAAR;AAIAmB,wBAAIV,mBAAJ,EAAI,SAAJ,EAAW;SAAX;AACE,aAAO,KAAKH,WAAL,CAAiBgB,OAAjB,EAAP;AACD,KAFU;oBAAA;;AAAA,GAAX;AAIA;;;;;;;AAMAb,sCACEc,IADF,EAEEzB,QAFF,EAEkC;AAAhC;AAAAA;AAAgC;;AAEhCJ,QAAI,CAACgB,QAAL,CACE,KADF,EAEE,CAAChB,IAAI,CAAC8B,cAAL,EAAD,EAAwB9B,IAAI,CAAC+B,YAAL,CAAkB,IAAlB,CAAxB,CAFF,EAGEd,SAHF;AAKA,SAAKe,YAAL,CAAkB,KAAlB;AACA,WAAO,IAAIrB,UAAJ,CACL,IADK,EAEL,KAAKC,WAFA,EAGL,KAAKC,QAHA,EAIL,KAAKoB,QAAL,EAJK,EAKL,IAAIhC,OAAJ,CAAY4B,IAAZ,CALK,EAMLzB,QANK,CAAP;AAQD,GAlBD;AAoBA;;;;;;;;;AAOAW,4CACEmB,MADF,EAEEC,MAFF,EAGEC,YAHF,EAGyB;AADvB;AAAAD,eAAuB1B,YAAY,CAAC4B,GAApC;AAAuC;;AAGvCrC,QAAI,CAACgB,QAAL,CACE,WADF,EAEE,CACEhB,IAAI,CAACqB,UAAL,EADF,EAEErB,IAAI,CAACqB,UAAL,CAAgBb,SAAS,CAAC8B,eAA1B,EAA2C,IAA3C,CAFF,EAGEtC,IAAI,CAAC+B,YAAL,CAAkB,IAAlB,CAHF,CAFF,EAOEd,SAPF;AASA,SAAKe,YAAL,CAAkB,WAAlB;AACA,QAAIH,IAAI,GAAGrB,SAAS,CAAC+B,cAAV,CAAyBJ,MAAzB,EAAiCD,MAAjC,CAAX;AACA,QAAI9B,QAAQ,GAAGC,MAAM,CAACmC,KAAP,CAAuBJ,YAAvB,CAAf;;AACA,QAAI,CAAC1B,IAAI,CAAC+B,KAAL,CAAWrC,QAAQ,CAAC,aAAD,CAAnB,CAAD,IAAwCM,IAAI,CAAC+B,KAAL,CAAWZ,IAAI,CAACa,WAAhB,CAA5C,EAA0E;AACxEtC,cAAQ,CAAC,aAAD,CAAR,GAA0ByB,IAAI,CAACa,WAA/B;AACD;;AACD,WAAO,IAAI/B,UAAJ,CACL,IADK,EAEL,KAAKC,WAFA,EAGL,KAAKC,QAHA,EAIL,KAAKoB,QAAL,EAJK,EAKL,IAAIhC,OAAJ,CAAY4B,IAAI,CAACA,IAAjB,EAAuB,IAAvB,CALK,EAMLzB,QANK,CAAP;AAQD,GA5BD;AA8BA;;;;;;AAIAW;AACEf,QAAI,CAACgB,QAAL,CAAc,QAAd,EAAwB,EAAxB,EAA4BC,SAA5B;AACA,SAAKe,YAAL,CAAkB,QAAlB;AACA,QAAIW,IAAI,GAAG,IAAX;AACA,WAAO,KAAK/B,WAAL,CAAiBgC,YAAjB,GAAgCC,IAAhC,CAAqC,UAASC,SAAT,EAAkB;AAC5D,UAAIC,WAAW,GAAGxC,QAAQ,CAACyC,YAAT,CAAsBL,IAAI,CAAC/B,WAA3B,EAAwC+B,IAAI,CAAC9B,QAA7C,CAAlB;AACA,aAAO8B,IAAI,CAAC/B,WAAL,CAAiBqC,WAAjB,CAA6BF,WAA7B,EAA0CD,SAA1C,EAAqDI,UAArD,EAAP;AACD,KAHM,CAAP;AAID,GARD;AAUA;;;;;;;AAKAnC;AACEf,QAAI,CAACgB,QAAL,CAAc,aAAd,EAA6B,EAA7B,EAAiCC,SAAjC;AACA,SAAKe,YAAL,CAAkB,aAAlB;AACA,QAAIW,IAAI,GAAG,IAAX;AACA,WAAO,KAAK/B,WAAL,CAAiBgC,YAAjB,GAAgCC,IAAhC,CAAqC,UAASC,SAAT,EAAkB;AAC5D,UAAIC,WAAW,GAAGxC,QAAQ,CAAC4C,WAAT,CAChBR,IAAI,CAAC/B,WADW,EAEhB+B,IAAI,CAAC9B,QAFW,EAGhB8B,IAAI,CAACV,QAAL,EAHgB,CAAlB;AAKA,aAAOU,IAAI,CAAC/B,WAAL,CAAiBqC,WAAjB,CAA6BF,WAA7B,EAA0CD,SAA1C,EAAqDI,UAArD,EAAP;AACD,KAPM,CAAP;AAQD,GAZD;AAcA;;;;;;;;;;;AASAnC,iDAAeX,QAAf,EAAiC;AAC/BJ,QAAI,CAACgB,QAAL,CAAc,gBAAd,EAAgC,CAAChB,IAAI,CAAC+B,YAAL,EAAD,CAAhC,EAAuDd,SAAvD;AACA,SAAKe,YAAL,CAAkB,gBAAlB;AACA,QAAIW,IAAI,GAAG,IAAX;AACA,WAAO,KAAK/B,WAAL,CAAiBgC,YAAjB,GAAgCC,IAAhC,CAAqC,UAASC,SAAT,EAAkB;AAC5D,UAAIC,WAAW,GAAGxC,QAAQ,CAAC6C,cAAT,CAChBT,IAAI,CAAC/B,WADW,EAEhB+B,IAAI,CAAC9B,QAFW,EAGhBT,QAHgB,EAIhBuC,IAAI,CAACV,QAAL,EAJgB,CAAlB;AAMA,aAAOU,IAAI,CAAC/B,WAAL,CAAiBqC,WAAjB,CAA6BF,WAA7B,EAA0CD,SAA1C,EAAqDI,UAArD,EAAP;AACD,KARM,CAAP;AASD,GAbD;AAeA;;;;;;AAIAnC;AACEf,QAAI,CAACgB,QAAL,CAAc,gBAAd,EAAgC,EAAhC,EAAoCC,SAApC;AACA,SAAKe,YAAL,CAAkB,gBAAlB;AACA,WAAO,KAAKmB,WAAL,GAAmBN,IAAnB,CAAwB,UAASzC,QAAT,EAAiB;AAC9C,UAAIiD,GAAG,GAAIjD,QAAQ,CAAC,cAAD,CAAR,CAAsC,CAAtC,CAAX;;AACA,UAAIM,IAAI,CAAC+B,KAAL,CAAWY,GAAX,CAAJ,EAAqB;AACnB,eAAOA,GAAP;AACD,OAFD,MAEO;AACL,cAAMnD,aAAa,CAACoD,aAAd,EAAN;AACD;AACF,KAPM,CAAP;AAQD,GAXD;;AAaQvC,qCAAR,UAAqBwC,IAArB,EAAiC;AAC/B,QAAI,KAAK1C,QAAL,CAAcP,IAAd,KAAuB,EAA3B,EAA+B;AAC7B,YAAMJ,aAAa,CAACsD,oBAAd,CAAmCD,IAAnC,CAAN;AACD;AACF,GAJO;;AAKV;AA7NA","names":["args","FbsBlob","errorsExports","Location","metadata","object","path","requests","fbsString","StringFormat","type","UploadTask","authWrapper","location","makeFromUrl","Reference","validate","arguments","bucket","getMappings","childPath","stringSpec","newPath","child","newRef","Object","parent","lastComponent","service","data","uploadDataSpec","metadataSpec","throwIfRoot_","mappings","string","format","opt_metadata","RAW","formatValidator","dataFromString","clone","isDef","contentType","self","getAuthToken","then","authToken","requestInfo","deleteObject","makeRequest","getPromise","getMetadata","updateMetadata","url","noDownloadURL","name","invalidRootOperation"],"sources":["../src/reference.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport { AuthWrapper } from './implementation/authwrapper';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { errors } from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { Metadata } from './metadata';\nimport { Service } from './service';\nimport { UploadTask } from './task';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  protected location: Location;\n\n  constructor(protected authWrapper: AuthWrapper, location: string | Location) {\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  }\n\n  protected newRef(authWrapper: AuthWrapper, location: Location): Reference {\n    return new Reference(authWrapper, location);\n  }\n\n  protected mappings(): metadata.Mappings {\n    return metadata.getMappings();\n  }\n\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n  child(childPath: string): Reference {\n    args.validate('child', [args.stringSpec()], arguments);\n    let newPath = path.child(this.location.path, childPath);\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return A reference to the parent of the\n   *     current object, or null if the current object is the root.\n   */\n  get parent(): Reference | null {\n    let newPath = path.parent(this.location.path);\n    if (newPath === null) {\n      return null;\n    }\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    let location = new Location(this.location.bucket, '');\n    return this.newRef(this.authWrapper, location);\n  }\n\n  get bucket(): string {\n    return this.location.bucket;\n  }\n\n  get fullPath(): string {\n    return this.location.path;\n  }\n\n  get name(): string {\n    return path.lastComponent(this.location.path);\n  }\n\n  get storage(): Service {\n    return this.authWrapper.service();\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata: Metadata | null = null\n  ): UploadTask {\n    args.validate(\n      'put',\n      [args.uploadDataSpec(), args.metadataSpec(true)],\n      arguments\n    );\n    this.throwIfRoot_('put');\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data),\n      metadata\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  putString(\n    string: string,\n    format: StringFormat = StringFormat.RAW,\n    opt_metadata?: Metadata\n  ): UploadTask {\n    args.validate(\n      'putString',\n      [\n        args.stringSpec(),\n        args.stringSpec(fbsString.formatValidator, true),\n        args.metadataSpec(true)\n      ],\n      arguments\n    );\n    this.throwIfRoot_('putString');\n    let data = fbsString.dataFromString(format, string);\n    let metadata = object.clone<Metadata>(opt_metadata);\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data.data, true),\n      metadata\n    );\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.getMetadata(\n        self.authWrapper,\n        self.location,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.updateMetadata(\n        self.authWrapper,\n        self.location,\n        metadata,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function(metadata) {\n      let url = (metadata['downloadURLs'] as string[])[0];\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  }\n\n  private throwIfRoot_(name: string) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}