{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar Repo_1 = require(\"./Repo\");\n\nvar util_2 = require(\"./util/util\");\n\nvar parser_1 = require(\"./util/libs/parser\");\n\nvar validation_1 = require(\"./util/validation\");\n\nrequire(\"./Repo_transaction\");\n/** @const {string} */\n\n\nvar DATABASE_URL_OPTION = 'databaseURL';\n\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\n\n\nvar RepoManager =\n/** @class */\nfunction () {\n  function RepoManager() {\n    /**\r\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n     */\n    this.repos_ = {};\n    /**\r\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n     * @private {boolean}\r\n     */\n\n    this.useRestClient_ = false;\n  }\n\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n\n    return _staticInstance;\n  }; // TODO(koss): Remove these functions unless used in tests?\n\n\n  RepoManager.prototype.interrupt = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  };\n\n  RepoManager.prototype.resume = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  };\n  /**\r\n   * This function should only ever be called to CREATE a new database instance.\r\n   *\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Database}\r\n   */\n\n\n  RepoManager.prototype.databaseFromApp = function (app, url) {\n    var dbUrl = url || app.options[DATABASE_URL_OPTION];\n\n    if (dbUrl === undefined) {\n      util_2.fatal(\"Can't determine Firebase Database URL.  Be sure to include \" + DATABASE_URL_OPTION + ' option when calling firebase.intializeApp().');\n    }\n\n    var parsedUrl = parser_1.parseRepoInfo(dbUrl);\n    var repoInfo = parsedUrl.repoInfo;\n    validation_1.validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n\n    if (!parsedUrl.path.isEmpty()) {\n      util_2.fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n\n    var repo = this.createRepo(repoInfo, app);\n    return repo.database;\n  };\n  /**\r\n   * Remove the repo and make sure it is disconnected.\r\n   *\r\n   * @param {!Repo} repo\r\n   */\n\n\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = util_1.safeGet(this.repos_, repo.app.name); // This should never happen...\n\n    if (!appRepos || util_1.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      util_2.fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  };\n  /**\r\n   * Ensures a repo doesn't already exist and then creates one using the\r\n   * provided app.\r\n   *\r\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Repo} The Repo object for the specified server / repoName.\r\n   */\n\n\n  RepoManager.prototype.createRepo = function (repoInfo, app) {\n    var appRepos = util_1.safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    var repo = util_1.safeGet(appRepos, repoInfo.toURLString());\n\n    if (repo) {\n      util_2.fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n\n    repo = new Repo_1.Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\r\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n   * @param {boolean} forceRestClient\r\n   */\n\n\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n\n  return RepoManager;\n}();\n\nexports.RepoManager = RepoManager;","map":{"version":3,"mappings":"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","names":["require","DATABASE_URL_OPTION","_staticInstance","RepoManager","appName","repos_","dbUrl","interrupt","resume","app","url","options","undefined","util_2","parsedUrl","parser_1","repoInfo","validation_1","path","isEmpty","repo","createRepo","database","appRepos","util_1","name","repoInfo_","toURLString","Repo_1","useRestClient_","forceRestClient","exports"],"sources":["../src/core/RepoManager.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp, url?: string): Database {\n    const dbUrl: string = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.intializeApp().'\n      );\n    }\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}