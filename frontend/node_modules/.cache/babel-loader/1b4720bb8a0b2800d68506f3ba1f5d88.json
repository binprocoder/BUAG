{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypt_1 = require(\"./crypt\");\n\nvar json_1 = require(\"./json\");\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {{header: *, claims: *, data: *, signature: string}}\n */\n\n\nexports.decode = function (token) {\n  var header = {},\n      claims = {},\n      data = {},\n      signature = '';\n\n  try {\n    var parts = token.split('.');\n    header = json_1.jsonEval(crypt_1.base64Decode(parts[0]) || '');\n    claims = json_1.jsonEval(crypt_1.base64Decode(parts[1]) || '');\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header: header,\n    claims: claims,\n    data: data,\n    signature: signature\n  };\n};\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\n\n\nexports.isValidTimestamp = function (token) {\n  var claims = exports.decode(token).claims,\n      now = Math.floor(new Date().getTime() / 1000),\n      validSince,\n      validUntil;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'];\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'];\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'];\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return now && validSince && validUntil && now >= validSince && now <= validUntil;\n};\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {?number}\n */\n\n\nexports.issuedAtTime = function (token) {\n  var claims = exports.decode(token).claims;\n\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'];\n  }\n\n  return null;\n};\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\n * signature.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\n\n\nexports.isValidFormat = function (token) {\n  var decoded = exports.decode(token),\n      claims = decoded.claims;\n  return !!decoded.signature && !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\n\n\nexports.isAdmin = function (token) {\n  var claims = exports.decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};","map":{"version":3,"mappings":"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","names":["exports","token","header","claims","data","signature","parts","split","json_1","crypt_1","e","now","Math","floor","Date","getTime","validSince","validUntil","hasOwnProperty","decoded"],"sources":["../src/jwt.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {{header: *, claims: *, data: *, signature: string}}\n */\nexport const decode = function(token) {\n  var header = {},\n    claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    var parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '');\n    claims = jsonEval(base64Decode(parts[1]) || '');\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header: header,\n    claims: claims,\n    data: data,\n    signature: signature\n  };\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isValidTimestamp = function(token) {\n  var claims = decode(token).claims,\n    now = Math.floor(new Date().getTime() / 1000),\n    validSince,\n    validUntil;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'];\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'];\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'];\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    now && validSince && validUntil && now >= validSince && now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {?number}\n */\nexport const issuedAtTime = function(token) {\n  var claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'];\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\n * signature.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isValidFormat = function(token) {\n  var decoded = decode(token),\n    claims = decoded.claims;\n\n  return (\n    !!decoded.signature &&\n    !!claims &&\n    typeof claims === 'object' &&\n    claims.hasOwnProperty('iat')\n  );\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isAdmin = function(token) {\n  var claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n"]},"metadata":{},"sourceType":"script"}